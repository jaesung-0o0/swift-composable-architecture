{"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"metadata":{"categoryPathComponent":"MeetComposableArchitecture","title":"Your first feature","role":"project","category":"The Composable Architecture"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"]}],"kind":"project","sections":[{"title":"Your first feature","estimatedTimeInMinutes":20,"chapter":"Essentials","kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"Learn how to create a conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}]}]},{"kind":"tasks","tasks":[{"anchor":"Create-a-reducer","stepsSection":[{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture."}]}],"caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before importing the library you will need to depend on it by adding it to your"},{"type":"text","text":" "},{"type":"text","text":"Xcode project settings or SPM package:"}]},{"type":"paragraph","inlineContent":[{"text":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"text"}]}]}],"code":"01-01-01-code-0001.swift","type":"step"},{"type":"step","runtimePreview":null,"caption":[],"code":"01-01-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new struct called CounterFeature that conforms to the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol.","type":"text"}]}],"media":null},{"caption":[],"code":"01-01-01-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"To conform to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" you will start with a domain","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"modeling exercise. You will create a "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type that holds the state your feature needs"},{"type":"text","text":" "},{"text":"to do its job, typically a struct. Then you will create an ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" type that holds all"},{"type":"text","text":" "},{"type":"text","text":"the actions the user can perform in the feature, typically an enum."}],"type":"paragraph"}],"media":null,"type":"step"},{"media":null,"code":"01-01-01-code-0004.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"For the purpose of a simple counter feature, the state consists of just a single integer,","type":"text"},{"type":"text","text":" "},{"text":"the current count, and the actions consist of tapping buttons to either increment or","type":"text"},{"type":"text","text":" "},{"text":"decrement the count.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"It is best to name the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" cases after literally what the user does in the UI,","type":"text"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"code":"incrementButtonTapped","type":"codeVoice"},{"type":"text","text":", rather than what logic you want to perform, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":"."}]}],"style":"tip","name":"Tip"}],"type":"step"},{"runtimePreview":null,"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" method takes "},{"code":"State","type":"codeVoice"},{"text":" as an argument and it is marked as ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":". This","type":"text"},{"text":" ","type":"text"},{"text":"means you can make any mutations you want directly to the state. There is no need to make","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a copy of the state just to return it."}]}]}],"code":"01-01-01-code-0005.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":", you must implement"},{"type":"text","text":" "},{"type":"text","text":"a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri","type":"reference"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"that evolves the state from its current value to the next value given a user action, and"},{"type":"text","text":" "},{"text":"returns any effects that the feature wants to execute in the outside world. This almost","type":"text"},{"type":"text","text":" "},{"text":"always begins by switching on the incoming action to determine what logic you need to","type":"text"},{"text":" ","type":"text"},{"text":"perform.","type":"text"}]}],"media":null},{"code":"01-01-01-code-0006.swift","content":[{"inlineContent":[{"type":"text","text":"The logic for this feature is quite simple. We just want to either subtract one or add one"},{"text":" ","type":"text"},{"text":"to the state’s count. We must also return a value of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that represents the effect to be executed in the outside world, but in this case we do not"},{"text":" ","type":"text"},{"type":"text","text":"need to execute anything. So we can return a special"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"reference"},{"type":"text","text":" value to represent we have no effects to"},{"type":"text","text":" "},{"text":"execute.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"runtimePreview":null,"type":"step"},{"inlineContent":[{"text":"That is all it takes to implement a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"very","type":"text"}]},{"type":"text","text":" basic feature in the Composable Architecture."},{"type":"text","text":" "},{"text":"There is of course a lot more to know about, such as executing effects and feeding data","type":"text"},{"type":"text","text":" "},{"text":"back into the system, using dependencies in reducers, composing multiple reducers together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}],"type":"paragraph"}],"title":"Create a reducer","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"The fundamental unit that features are built with in the Composable Architecture is the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":". A conformance to that protocol represents the"},{"text":" ","type":"text"},{"type":"text","text":"logic and behavior for a feature in your application. This includes how to evolve the current"},{"type":"text","text":" "},{"type":"text","text":"state to the next state when an action is sent into the system, and how effects communicate"},{"text":" ","type":"text"},{"type":"text","text":"with the outside world and feed data back into the system."}],"type":"paragraph"},{"inlineContent":[{"text":"And most importantly, the feature’s core logic and behavior can be built in full isolation","type":"text"},{"text":" ","type":"text"},{"text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to reuse, and easier to test."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will","type":"text"},{"type":"text","text":" "},{"text":"add more interesting behavior to the feature, but let’s start simple for now.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"title":"Integrating with SwiftUI","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI view from that feature. This involves two new concepts:"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":", which represents the runtime of the feature, and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":", which represents the observation of the runtime.","type":"text"}]}],"kind":"contentAndMedia"}],"anchor":"Integrating-with-SwiftUI","stepsSection":[{"media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"It is our personal preference to keep the reducer and view in the same file until it is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"type":"text","text":" "},{"text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI","type":"text"},{"text":" ","type":"text"},{"text":"and get a basic view into place:","type":"text"}],"type":"paragraph"}],"code":"01-01-02-code-0001.swift","type":"step"},{"caption":[{"name":"Tip","type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The store can be held onto as a "},{"type":"codeVoice","code":"let"},{"text":". It does not need to be observed by the view.","type":"text"}]}]}],"content":[{"inlineContent":[{"type":"text","text":"The first thing one adds to the view is a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" that is generic"},{"type":"text","text":" "},{"text":"over the reducer we constructed in the previous section. The ","type":"text"},{"code":"Store","type":"codeVoice"},{"type":"text","text":" represents the runtime"},{"type":"text","text":" "},{"text":"of your feature. That is, it is the object that can process actions in order to update","type":"text"},{"type":"text","text":" "},{"text":"state, and it can execute effects and feed data from those effects back into the system.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-01-02-code-0002.swift","type":"step","runtimePreview":null},{"type":"step","code":"01-01-02-code-0003.swift","caption":[{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"You cannot read state from a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" directly, nor can you"},{"type":"text","text":" "},{"type":"text","text":"send actions to it directly. So, for now we will provide stubs for that behavior, but once"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" is added we can provide the real implementations."}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can implement some basic view hierarchy for displaying the count and providing"},{"text":" ","type":"text"},{"type":"text","text":"buttons for incrementing and decrementing."}]}],"media":null,"runtimePreview":"01-02-image-0003.png"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With some basic view scaffolding in place we can now start actually observing state in the"},{"text":" ","type":"text"},{"code":"store","type":"codeVoice"},{"text":". This is done by constructing a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":", and for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI views there is a convenience view called a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"that provides a lightweight syntax for constructing a view store.","type":"text"}]},{"runtimePreview":null,"caption":[{"name":"Tip","style":"tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Currently we are observing "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" state in the store by using "},{"type":"codeVoice","code":"observe: { $0 }"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"but typically features hold onto a lot more state than what is needed in the view. See"},{"type":"text","text":" "},{"type":"text","text":"our article "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"text":" for more information on how to best observe only the bare","type":"text"},{"text":" ","type":"text"},{"text":"essentials a view needs to do its job.","type":"text"}],"type":"paragraph"}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View stores require that "},{"code":"State","type":"codeVoice"},{"text":" be ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", so we must do that first. Once the view","type":"text"},{"type":"text","text":" "},{"text":"store is constructed we can access the feature’s state and send it actions when the user","type":"text"},{"type":"text","text":" "},{"type":"text","text":"taps on buttons."}]}],"media":null,"code":"01-01-02-code-0004.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does"},{"type":"text","text":" "},{"type":"text","text":"indeed change the visible count in the UI."}]}],"type":"step","code":"01-01-02-code-0005.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Next we want to actually run the feature. We will start with a preview. To do this we will"},{"text":" ","type":"text"},{"text":"construct a ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"type":"text","text":", and to do that we need to construct a "},{"type":"codeVoice","code":"StoreOf<CounterFeature>"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"text":" ","type":"text"},{"text":"as well as a trailing closure that specifies the reducer that powers the feature.","type":"text"}],"type":"paragraph"}],"runtimePreview":"01-02-video-0005.mp4"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving onto the next section, let’s quickly show off a super power of the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,"},{"text":" ","type":"text"},{"text":"we can run the preview with a completely different reducer to alter how it executes.","type":"text"}]},{"runtimePreview":"01-02-video-0006.mp4","content":[{"type":"paragraph","inlineContent":[{"text":"For example, in the preview, comment out the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer and the store will be","type":"text"},{"type":"text","text":" "},{"text":"given a reducer that performs no state mutations or effects. This allows us to preview the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"design of the feature without worrying about any of its logic or behavior."}]}],"caption":[{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Notice that the video demonstrates that tapping the buttons does not cause","type":"text"},{"text":" ","type":"text"},{"text":"the count to increase or decrease. That is because we are using the empty reducer in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preview."}]}],"style":"note"}],"media":null,"type":"step","code":"01-01-02-code-0006.swift"},{"code":"01-01-02-code-0007.swift","runtimePreview":null,"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Before moving on let’s be sure to bring back the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer in the preview,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}],"type":"paragraph"}],"caption":[]},{"inlineContent":[{"text":"That is all there is to implementing a basic feature in the Composable Architecture. The","type":"text"},{"type":"text","text":" "},{"text":"feature is of course very simple, and doesn’t involve anything interesting like side effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(which will be the topic of "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","isActive":true,"type":"reference"},{"text":"), but before any of that let’s see","type":"text"},{"type":"text","text":" "},{"text":"how to integrate this feature into an application.","type":"text"}],"type":"paragraph"}]},{"stepsSection":[{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the entry point of your application is probably in a file called App.swift"},{"type":"text","text":" "},{"text":"and looks something like this code.","type":"text"}]}],"caption":[],"code":"01-01-03-code-0001.swift","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will change the entry point of the application so that it constructs a "},{"code":"CounterView","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and provides a store, just as we did in the preview.","type":"text"}]}],"media":null,"code":"01-01-03-code-0002.swift","runtimePreview":null,"caption":[]},{"caption":[],"type":"step","media":null,"code":"01-01-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that the "},{"type":"codeVoice","code":"Store"},{"text":" that powers the application should only be created","type":"text"},{"text":" ","type":"text"},{"text":"a single time. For most applications it should be sufficient to create it directly in the","type":"text"},{"type":"text","text":" "},{"code":"WindowGroup","type":"codeVoice"},{"text":" at the root of the scene. But, it can also be held as a static variable","type":"text"},{"text":" ","type":"text"},{"text":"and then provided in the scene.","type":"text"}]}],"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can demonstrate another super power of the Composable Architecture. Reducers have a"},{"text":" ","type":"text"},{"type":"text","text":"method called "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","type":"reference","isActive":true},{"type":"text","text":" that is similar"},{"text":" ","type":"text"},{"type":"text","text":"to a tool that SwiftUI provides. When used it will print every action that the reducer"},{"type":"text","text":" "},{"text":"processes to the console, and it will print how the state changed after processing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action. The method will also go through great lengths to collapse the state difference to a"},{"type":"text","text":" "},{"text":"compact form. This includes not displaying nested state if it hasn’t changed, and not showing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements in collections that haven’t changed."}]},{"code":"01-01-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Update the entry point of the application to invoke","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)"},{"text":" on the reducer.","type":"text"}]}],"runtimePreview":null,"caption":[],"type":"step","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few"},{"text":" ","type":"text"},{"type":"text","text":"times you should see logs printed to the console showing you exactly what is happening."}],"type":"paragraph"}],"media":"01-03-image-0005.jpg","runtimePreview":null,"caption":[],"code":null,"type":"step"}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been"},{"text":" ","type":"text"},{"type":"text","text":"able to run it in the preview. Next we need to figure out how to run the feature in the full"},{"type":"text","text":" "},{"type":"text","text":"application by altering its entry point. This will allow us to run the feature in a simulator"},{"type":"text","text":" "},{"type":"text","text":"or on a device."}]}],"mediaPosition":"trailing"}],"title":"Integrating into the app","anchor":"Integrating-into-the-app"}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Adding side effects","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"action":{"type":"reference","isActive":true,"overridingTitle":"Get started","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]}}],"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[],"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"01-03-image-0005.jpg":{"type":"image","alt":null,"identifier":"01-03-image-0005.jpg","variants":[{"url":"\/images\/01-03-image-0005.jpg","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"title":"What is a side effect?","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","title":"Child-to-parent communication","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/_printChanges(_:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","url":"\/documentation\/composablearchitecture\/reducer\/_printchanges(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"_printChanges","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"_ReducerPrinter"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"text":">?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"_PrintChangesReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"_printChanges(_:)","kind":"symbol","abstract":[{"type":"text","text":"Enhances a reducer with debug logging of received actions and state mutations for the given"},{"type":"text","text":" "},{"text":"printer.","type":"text"}]},"01-01-02-code-0004.swift":{"identifier":"01-01-02-code-0004.swift","fileName":"CounterFeature.swift","fileType":"swift","syntax":"swift","type":"file","highlights":[{"line":1},{"line":2},{"line":7},{"line":9},{"line":16},{"line":24},{"line":32}],"content":["extension CounterFeature.State: Equatable {}","","struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","      }","    }","  }","}"]},"01-01-02-code-0007.swift":{"type":"file","syntax":"swift","fileType":"swift","identifier":"01-01-02-code-0007.swift","content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"fileName":"CounterFeature.swift","highlights":[{"line":5}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol"},"01-01-01-code-0003.swift":{"type":"file","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","","  }","","  enum Action {","","  }","}"],"syntax":"swift","highlights":[{"line":4},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"swift","fileName":"CounterFeature.swift","identifier":"01-01-01-code-0003.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"title":"Performance","type":"topic","abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"url":"\/documentation\/composablearchitecture\/performance","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"01-01-03-code-0001.swift":{"type":"file","highlights":[],"content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0001.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section"},"01-01-01-code-0005.swift":{"fileType":"swift","fileName":"CounterFeature.swift","identifier":"01-01-01-code-0005.swift","type":"file","syntax":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","","    case .incrementButtonTapped:","","    }","  }","}"]},"01-01-01-code-0002.swift":{"type":"file","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0002.swift","syntax":"swift","fileType":"swift"},"01-02-image-0003.png":{"type":"image","identifier":"01-02-image-0003.png","alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","variants":[{"url":"\/images\/01-02-image-0003.png","traits":["1x","light"]}]},"01-01-02-code-0002.swift":{"type":"file","highlights":[{"line":2},{"line":3}],"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    EmptyView()","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0002.swift","syntax":"swift","fileType":"swift"},"01-01-02-code-0005.swift":{"type":"file","highlights":[],"content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0005.swift","fileType":"swift","syntax":"swift"},"01-01-01-code-0006.swift":{"type":"file","highlights":[{"line":16},{"line":17},{"line":20},{"line":21}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0006.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"title":"none","type":"topic","abstract":[{"text":"아무것도 하지않고 즉각 종료하는 ","type":"text"},{"code":"Effect","type":"codeVoice"}],"url":"\/documentation\/composablearchitecture\/effect\/none","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"01-01-03-code-0004.swift":{"type":"file","highlights":[{"line":8}],"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0004.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol"},"01-01-03-code-0002.swift":{"type":"file","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0002.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"01-01-03-code-0003.swift":{"type":"file","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0003.swift","syntax":"swift","fileType":"swift"},"01-02-video-0006.mp4":{"type":"video","variants":[{"traits":["1x","light"],"url":"\/videos\/01-02-video-0006.mp4"}],"identifier":"01-02-video-0006.mp4","alt":null,"poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"01-01-02-code-0001.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0001.swift","syntax":"swift","fileType":"swift"},"01-01-02-code-0006.swift":{"syntax":"swift","fileType":"swift","content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        \/\/ CounterFeature()","      }","    )","  }","}"],"type":"file","fileName":"CounterFeature.swift","identifier":"01-01-02-code-0006.swift","highlights":[{"line":5}]},"01-01-02-code-0003.swift":{"type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0003.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol"},"01-01-01-code-0001.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0001.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"title":"Your first feature","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"text":" ","type":"text"},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"text":"a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"01-02-video-0005.mp4":{"type":"video","identifier":"01-02-video-0005.mp4","alt":null,"poster":null,"variants":[{"url":"\/videos\/01-02-video-0005.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/reduce(into:action:)-1t2ri":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/reduce(into:action:)-1t2ri","defaultImplementations":1,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri","type":"topic","title":"reduce(into:action:)","abstract":[{"text":"리듀서의 현재 상태를 다음 상태로 변경합니다.","type":"text"}],"required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"01-01-01-code-0004.swift":{"type":"file","highlights":[{"line":5},{"line":9},{"line":10}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0004.swift","syntax":"swift","fileType":"swift"}}}