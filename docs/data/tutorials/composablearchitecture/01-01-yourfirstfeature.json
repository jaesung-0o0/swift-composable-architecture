{"sections":[{"kind":"hero","estimatedTimeInMinutes":20,"title":"Your first feature","chapter":"Essentials","content":[{"type":"paragraph","inlineContent":[{"text":"Learn how to create a conformance to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}]}]},{"kind":"tasks","tasks":[{"stepsSection":[{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Before importing the library you will need to depend on it by adding it to your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Xcode project settings or SPM package:"}]},{"type":"paragraph","inlineContent":[{"text":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","type":"text"}]}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture."}]}],"type":"step","media":null,"code":"01-01-01-code-0001.swift","runtimePreview":null},{"type":"step","media":null,"caption":[],"code":"01-01-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new struct called CounterFeature that conforms to the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol.","type":"text"}]}],"runtimePreview":null},{"code":"01-01-01-code-0003.swift","content":[{"inlineContent":[{"type":"text","text":"To conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" you will start with a domain","type":"text"},{"text":" ","type":"text"},{"text":"modeling exercise. You will create a ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" type that holds the state your feature needs","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to do its job, typically a struct. Then you will create an "},{"type":"codeVoice","code":"Action"},{"text":" type that holds all","type":"text"},{"type":"text","text":" "},{"text":"the actions the user can perform in the feature, typically an enum.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"caption":[{"type":"aside","content":[{"inlineContent":[{"text":"It is best to name the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" cases after literally what the user does in the UI,","type":"text"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"type":"codeVoice","code":"incrementButtonTapped"},{"type":"text","text":", rather than what logic you want to perform, such as"},{"text":" ","type":"text"},{"code":"incrementCount","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"tip","name":"Tip"}],"type":"step","code":"01-01-01-code-0004.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For the purpose of a simple counter feature, the state consists of just a single integer,"},{"type":"text","text":" "},{"text":"the current count, and the actions consist of tapping buttons to either increment or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decrement the count."}]}]},{"media":null,"code":"01-01-01-code-0005.swift","runtimePreview":null,"caption":[{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" method takes "},{"type":"codeVoice","code":"State"},{"type":"text","text":" as an argument and it is marked as "},{"code":"inout","type":"codeVoice"},{"text":". This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"means you can make any mutations you want directly to the state. There is no need to make"},{"text":" ","type":"text"},{"type":"text","text":"a copy of the state just to return it."}]}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":", you must implement","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"that evolves the state from its current value to the next value given a user action, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"returns any effects that the feature wants to execute in the outside world. This almost"},{"type":"text","text":" "},{"type":"text","text":"always begins by switching on the incoming action to determine what logic you need to"},{"type":"text","text":" "},{"type":"text","text":"perform."}]}]},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"The logic for this feature is quite simple. We just want to either subtract one or add one","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the state’s count. We must also return a value of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"that represents the effect to be executed in the outside world, but in this case we do not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need to execute anything. So we can return a special"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"text":" value to represent we have no effects to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"execute."}],"type":"paragraph"}],"media":null,"type":"step","code":"01-01-01-code-0006.swift","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very"}]},{"text":" basic feature in the Composable Architecture.","type":"text"},{"text":" ","type":"text"},{"text":"There is of course a lot more to know about, such as executing effects and feeding data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into the system, using dependencies in reducers, composing multiple reducers together,"},{"text":" ","type":"text"},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}]}],"title":"Create a reducer","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fundamental unit that features are built with in the Composable Architecture is the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". A conformance to that protocol represents the"},{"text":" ","type":"text"},{"type":"text","text":"logic and behavior for a feature in your application. This includes how to evolve the current"},{"text":" ","type":"text"},{"text":"state to the next state when an action is sent into the system, and how effects communicate","type":"text"},{"type":"text","text":" "},{"text":"with the outside world and feed data back into the system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And most importantly, the feature’s core logic and behavior can be built in full isolation"},{"text":" ","type":"text"},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"type":"text","text":" "},{"type":"text","text":"to reuse, and easier to test."}]},{"inlineContent":[{"type":"text","text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will"},{"type":"text","text":" "},{"type":"text","text":"add more interesting behavior to the feature, but let’s start simple for now."}],"type":"paragraph"}]}],"anchor":"Create-a-reducer"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI view from that feature. This involves two new concepts:"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":", which represents the runtime of the feature, and","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":", which represents the observation of the runtime.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Integrating-with-SwiftUI","title":"Integrating with SwiftUI","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is our personal preference to keep the reducer and view in the same file until it is"},{"type":"text","text":" "},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"text":" ","type":"text"},{"type":"text","text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI"},{"text":" ","type":"text"},{"type":"text","text":"and get a basic view into place:"}]}],"caption":[],"type":"step","code":"01-01-02-code-0001.swift","media":null},{"media":null,"runtimePreview":null,"caption":[{"name":"Tip","style":"tip","type":"aside","content":[{"inlineContent":[{"text":"The store can be held onto as a ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":". It does not need to be observed by the view."}],"type":"paragraph"}]}],"code":"01-01-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"text":"The first thing one adds to the view is a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" that is generic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"over the reducer we constructed in the previous section. The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" represents the runtime"},{"type":"text","text":" "},{"text":"of your feature. That is, it is the object that can process actions in order to update","type":"text"},{"text":" ","type":"text"},{"text":"state, and it can execute effects and feed data from those effects back into the system.","type":"text"}]}],"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can implement some basic view hierarchy for displaying the count and providing"},{"text":" ","type":"text"},{"text":"buttons for incrementing and decrementing.","type":"text"}]}],"media":null,"runtimePreview":"01-02-image-0003.png","caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot read state from a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" directly, nor can you"},{"type":"text","text":" "},{"text":"send actions to it directly. So, for now we will provide stubs for that behavior, but once","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" is added we can provide the real implementations."}]}],"type":"aside","style":"note","name":"Note"}],"code":"01-01-02-code-0003.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With some basic view scaffolding in place we can now start actually observing state in the"},{"type":"text","text":" "},{"code":"store","type":"codeVoice"},{"type":"text","text":". This is done by constructing a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"text":", and for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI views there is a convenience view called a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"text":" ","type":"text"},{"text":"that provides a lightweight syntax for constructing a view store.","type":"text"}]},{"caption":[{"name":"Tip","content":[{"inlineContent":[{"text":"Currently we are observing ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" state in the store by using "},{"type":"codeVoice","code":"observe: { $0 }"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"but typically features hold onto a lot more state than what is needed in the view. See","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"our article "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"type":"text","text":" for more information on how to best observe only the bare"},{"text":" ","type":"text"},{"type":"text","text":"essentials a view needs to do its job."}],"type":"paragraph"}],"type":"aside","style":"tip"}],"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"View stores require that "},{"code":"State","type":"codeVoice"},{"type":"text","text":" be "},{"type":"codeVoice","code":"Equatable"},{"text":", so we must do that first. Once the view","type":"text"},{"type":"text","text":" "},{"type":"text","text":"store is constructed we can access the feature’s state and send it actions when the user"},{"text":" ","type":"text"},{"type":"text","text":"taps on buttons."}],"type":"paragraph"}],"code":"01-01-02-code-0004.swift"},{"code":"01-01-02-code-0005.swift","content":[{"inlineContent":[{"type":"text","text":"Next we want to actually run the feature. We will start with a preview. To do this we will"},{"type":"text","text":" "},{"type":"text","text":"construct a "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and to do that we need to construct a "},{"code":"StoreOf<CounterFeature>","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"text":" ","type":"text"},{"type":"text","text":"as well as a trailing closure that specifies the reducer that powers the feature."}],"type":"paragraph"}],"runtimePreview":"01-02-video-0005.mp4","caption":[{"inlineContent":[{"type":"text","text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does"},{"text":" ","type":"text"},{"text":"indeed change the visible count in the UI.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"inlineContent":[{"text":"Before moving onto the next section, let’s quickly show off a super power of the Composable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,"},{"text":" ","type":"text"},{"text":"we can run the preview with a completely different reducer to alter how it executes.","type":"text"}],"type":"paragraph"},{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Notice that the video demonstrates that tapping the buttons does not cause","type":"text"},{"text":" ","type":"text"},{"text":"the count to increase or decrease. That is because we are using the empty reducer in the","type":"text"},{"type":"text","text":" "},{"text":"preview.","type":"text"}]}]}],"type":"step","code":"01-01-02-code-0006.swift","media":null,"runtimePreview":"01-02-video-0006.mp4","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in the preview, comment out the "},{"code":"CounterFeature","type":"codeVoice"},{"text":" reducer and the store will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given a reducer that performs no state mutations or effects. This allows us to preview the"},{"type":"text","text":" "},{"text":"design of the feature without worrying about any of its logic or behavior.","type":"text"}]}]},{"runtimePreview":null,"media":null,"code":"01-01-02-code-0007.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Before moving on let’s be sure to bring back the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" reducer in the preview,"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}]}],"caption":[]},{"type":"paragraph","inlineContent":[{"text":"That is all there is to implementing a basic feature in the Composable Architecture. The","type":"text"},{"text":" ","type":"text"},{"text":"feature is of course very simple, and doesn’t involve anything interesting like side effects","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(which will be the topic of "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","type":"reference"},{"text":"), but before any of that let’s see","type":"text"},{"text":" ","type":"text"},{"text":"how to integrate this feature into an application.","type":"text"}]}]},{"title":"Integrating into the app","anchor":"Integrating-into-the-app","stepsSection":[{"content":[{"inlineContent":[{"text":"By default the entry point of your application is probably in a file called App.swift","type":"text"},{"type":"text","text":" "},{"text":"and looks something like this code.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-01-03-code-0001.swift","runtimePreview":null,"type":"step","caption":[]},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"We will change the entry point of the application so that it constructs a ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and provides a store, just as we did in the preview."}]}],"type":"step","code":"01-01-03-code-0002.swift","runtimePreview":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"It is important to note that the ","type":"text"},{"code":"Store","type":"codeVoice"},{"type":"text","text":" that powers the application should only be created"},{"type":"text","text":" "},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WindowGroup"},{"text":" at the root of the scene. But, it can also be held as a static variable","type":"text"},{"type":"text","text":" "},{"text":"and then provided in the scene.","type":"text"}]}],"code":"01-01-03-code-0003.swift","runtimePreview":null,"caption":[]},{"inlineContent":[{"text":"We can demonstrate another super power of the Composable Architecture. Reducers have a","type":"text"},{"text":" ","type":"text"},{"text":"method called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","isActive":true,"type":"reference"},{"type":"text","text":" that is similar"},{"text":" ","type":"text"},{"type":"text","text":"to a tool that SwiftUI provides. When used it will print every action that the reducer"},{"text":" ","type":"text"},{"type":"text","text":"processes to the console, and it will print how the state changed after processing the"},{"type":"text","text":" "},{"text":"action. The method will also go through great lengths to collapse the state difference to a","type":"text"},{"text":" ","type":"text"},{"text":"compact form. This includes not displaying nested state if it hasn’t changed, and not showing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements in collections that haven’t changed."}],"type":"paragraph"},{"code":"01-01-03-code-0004.swift","caption":[],"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","isActive":true,"type":"reference"},{"text":" on the reducer.","type":"text"}]}]},{"type":"step","runtimePreview":null,"caption":[],"media":"01-03-image-0005.jpg","code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few","type":"text"},{"text":" ","type":"text"},{"text":"times you should see logs printed to the console showing you exactly what is happening.","type":"text"}]}]}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"able to run it in the preview. Next we need to figure out how to run the feature in the full"},{"type":"text","text":" "},{"type":"text","text":"application by altering its entry point. This will allow us to run the feature in a simulator"},{"type":"text","text":" "},{"text":"or on a device.","type":"text"}]}]}]}]},{"action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Adding side effects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Your first feature","role":"project","category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"]}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"references":{"01-01-02-code-0004.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":1},{"line":2},{"line":7},{"line":9},{"line":16},{"line":24},{"line":32}],"content":["extension CounterFeature.State: Equatable {}","","struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","      }","    }","  }","}"],"identifier":"01-01-02-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"title":"Testing network requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/reduce(into:action:)-1t2ri":{"role":"symbol","abstract":[{"text":"리듀서의 현재 상태를 다음 상태로 변경합니다.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/reduce(into:action:)-1t2ri","title":"reduce(into:action:)","required":true,"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","defaultImplementations":1},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"url":"\/documentation\/composablearchitecture\/effect\/none","kind":"symbol","abstract":[{"text":"아무것도 하지않고 즉각 종료하는 ","type":"text"},{"type":"codeVoice","code":"Effect"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"kind":"text","text":": `Self`"}],"title":"none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","role":"pseudoSymbol","title":"Performing a network request"},"01-01-01-code-0001.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[],"content":["import ComposableArchitecture"],"identifier":"01-01-01-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"title":"Deleting a contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"project","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","title":"Testing effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","title":"Integrate views"},"01-01-03-code-0004.swift":{"identifier":"01-01-03-code-0004.swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":8}],"fileName":"App.swift"},"01-01-02-code-0002.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":2},{"line":3}],"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    EmptyView()","  }","}"],"identifier":"01-01-02-code-0002.swift"},"01-03-image-0005.jpg":{"type":"image","alt":null,"identifier":"01-03-image-0005.jpg","variants":[{"traits":["1x","light"],"url":"\/images\/01-03-image-0005.jpg"}]},"01-02-video-0006.mp4":{"identifier":"01-02-video-0006.mp4","variants":[{"traits":["1x","light"],"url":"\/videos\/01-02-video-0006.mp4"}],"type":"video","alt":null,"poster":null},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","type":"topic","role":"overview","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","kind":"section","title":"What is a side effect?"},"01-01-02-code-0001.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[],"content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"identifier":"01-01-02-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"type":"section","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Contact detail feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"title":"Your first presentation","role":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","type":"topic","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"type":"topic","kind":"article","title":"Essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"title":"Integrating with SwiftUI","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","kind":"symbol"},"01-01-02-code-0006.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":5}],"content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        \/\/ CounterFeature()","      }","    )","  }","}"],"identifier":"01-01-02-code-0006.swift"},"01-01-01-code-0003.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":4},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","","  }","","  enum Action {","","  }","}"],"identifier":"01-01-01-code-0003.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"type":"topic","estimatedTime":"20min","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"01-01-01-code-0004.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":5},{"line":9},{"line":10}],"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"identifier":"01-01-01-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","role":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"01-01-02-code-0007.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":5}],"content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"identifier":"01-01-02-code-0007.swift"},"01-02-video-0005.mp4":{"identifier":"01-02-video-0005.mp4","variants":[{"traits":["1x","light"],"url":"\/videos\/01-02-video-0005.mp4"}],"type":"video","alt":null,"poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","estimatedTime":"30min","type":"topic","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"project","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"type":"section","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"01-01-03-code-0003.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"App.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"identifier":"01-01-03-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","role":"project","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"01-01-03-code-0001.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"App.swift","highlights":[],"identifier":"01-01-03-code-0001.swift","content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"type":"text","text":" features."}]},"01-02-image-0003.png":{"type":"image","alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","identifier":"01-02-image-0003.png","variants":[{"traits":["1x","light"],"url":"\/images\/01-02-image-0003.png"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/_printChanges(_:)":{"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/_printchanges(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"_printChanges"},{"kind":"text","text":"("},{"text":"_ReducerPrinter","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture15_ReducerPrinterV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">?) -> "},{"text":"_PrintChangesReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture20_PrintChangesReducerV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"_printChanges(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","abstract":[{"type":"text","text":"Enhances a reducer with debug logging of received actions and state mutations for the given"},{"text":" ","type":"text"},{"type":"text","text":"printer."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","role":"project","estimatedTime":"1hr 0min","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"01-01-01-code-0006.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":16},{"line":17},{"line":20},{"line":21}],"identifier":"01-01-01-code-0006.swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},"01-01-02-code-0005.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[],"content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"identifier":"01-01-02-code-0005.swift"},"01-01-02-code-0003.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"identifier":"01-01-02-code-0003.swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"url":"\/documentation\/composablearchitecture\/performance","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","title":"Performance"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"01-01-03-code-0002.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"App.swift","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"identifier":"01-01-03-code-0002.swift"},"01-01-01-code-0002.swift":{"syntax":"swift","fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"identifier":"01-01-01-code-0002.swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"01-01-01-code-0005.swift":{"identifier":"01-01-01-code-0005.swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","","    case .incrementButtonTapped:","","    }","  }","}"],"type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","type":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"kind":"section","role":"pseudoSymbol","title":"Create a reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"title":"Delete contacts","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section"}}}