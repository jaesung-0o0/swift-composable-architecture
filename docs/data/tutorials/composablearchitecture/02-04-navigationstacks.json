{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-04-navigationstacks"]}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture","title":"Navigation stacks"},"sections":[{"kind":"hero","chapter":"Navigation","content":[{"inlineContent":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":30,"title":"Navigation stacks"},{"tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"We are going to add a new “Contact Detail” feature that will allow us to drill down a layer"},{"type":"text","text":" "},{"text":"from the contacts list at the root.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file called ContactDetailFeature.swift, import the Composable Architecture, and start","type":"text"},{"type":"text","text":" "},{"text":"a stub of a reducer conformance.","type":"text"}]}],"media":null,"code":"02-04-01-code-0000.swift","caption":[]},{"code":"02-04-01-code-0001.swift","content":[{"inlineContent":[{"type":"text","text":"Add a "},{"code":"State","type":"codeVoice"},{"text":" struct to fulfill that requirement for the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol. The only state we currently need is the"},{"type":"text","text":" "},{"type":"text","text":"contact, and it can be "},{"type":"codeVoice","code":"let"},{"text":" since we do not plan on mutating it from this screen.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"type":"step","media":null},{"runtimePreview":null,"caption":[],"type":"step","code":"02-04-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add an ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum to fulfill that requirement for the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol. There are not currently any actions that can"},{"type":"text","text":" "},{"type":"text","text":"be performed in this feature, so we will leave it empty."}]}],"media":null},{"runtimePreview":null,"media":null,"caption":[],"type":"step","code":"02-04-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a basic "},{"code":"body","type":"codeVoice"},{"type":"text","text":" property to fulfill that requirement of"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" protocol. Since there are no actions in this feature"},{"type":"text","text":" "},{"text":"there is nothing we can do in the reducer. More will be added to this later.","type":"text"}]}]},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a stub for a ","type":"text"},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":"."}]}],"type":"step","code":"02-04-01-code-0004.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"The view will hold onto a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactDetailFeature"},{"text":" domain, allowing it to observe the feature’s state changes and","type":"text"},{"text":" ","type":"text"},{"text":"send actions.","type":"text"}],"type":"paragraph"}],"code":"02-04-01-code-0005.swift","media":null,"type":"step","caption":[]},{"type":"step","media":null,"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observe the store so that we can get access to state using"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":". There is no real information to show in this"},{"type":"text","text":" "},{"type":"text","text":"view now other than the contact’s name, but more will be added later."}]}],"code":"02-04-01-code-0006.swift"},{"type":"step","runtimePreview":"ch02-sub04-sec01-image-0000.png","media":null,"content":[{"inlineContent":[{"text":"Add a preview so that we can see what the view looks like.","type":"text"}],"type":"paragraph"}],"code":"02-04-01-code-0007.swift","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nothing special so far, but we need a basic feature built so that we start pushing it onto"},{"type":"text","text":" "},{"text":"a navigation stack.","type":"text"}]}],"anchor":"Contact-detail-feature","title":"Contact detail feature"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Now that a new “Contact Detail” feature has been built we will make it possible to drill","type":"text"},{"text":" ","type":"text"},{"text":"down to it from the main list of contacts.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Go to ContactsFeature.swift and add a new field to the state. It will be of type","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":", generic of the feature that you want to be able to"},{"text":" ","type":"text"},{"type":"text","text":"push onto the stack. This state represents the features that are currently"},{"type":"text","text":" "},{"text":"pushed onto the stack.","type":"text"}]}],"caption":[{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"text":" type is specifically made for the","type":"text"},{"text":" ","type":"text"},{"text":"Composable Architecture, and makes it easy and ergonomic to integrate stack navigation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into your applications."}]}],"style":"note"}],"type":"step","media":null,"code":"02-04-02-code-0000.swift","runtimePreview":null},{"media":null,"code":"02-04-02-code-0001.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a case to the action enum that holds onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This represents the actions that can happen inside the stack, such as pushing or popping"},{"text":" ","type":"text"},{"text":"an element off the stack, or an action happening inside a particular feature inside the","type":"text"},{"text":" ","type":"text"},{"text":"stack.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"We will also handle the ","type":"text"},{"code":".path","type":"codeVoice"},{"text":" case in the reducer and return","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"reference"},{"type":"text","text":" for now."}],"type":"paragraph"}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the very end of the reducer use the"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","type":"reference"},{"type":"text","text":" operator to"},{"type":"text","text":" "},{"text":"integrate the ","type":"text"},{"type":"codeVoice","code":"ContactDetailFeature"},{"text":" into the stack of the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":".","type":"text"}]}],"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Scroll down to the bottom of the code snippet to see the application of the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" operator."}]}],"name":"Tip","style":"tip","type":"aside"}],"type":"step","code":"02-04-02-code-0002.swift","media":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go to the ","type":"text"},{"code":"ContactsView","type":"codeVoice"},{"text":" that holds the view for the contacts list. Swap out the","type":"text"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" for a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","type":"reference"},{"type":"text","text":". This is a type"},{"text":" ","type":"text"},{"text":"specifically tuned for driving stacks from a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You hand it a store that is scoped down to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"text":", and it handles the rest.","type":"text"}]}],"type":"step","code":"02-04-02-code-0003.swift","runtimePreview":null},{"code":"02-04-02-code-0004.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","isActive":true,"type":"reference"},{"type":"text","text":" takes two trailing closures. The first is"},{"text":" ","type":"text"},{"text":"for the root of the stack, which is our list of contacts. The second is to describe the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"destinations that can be navigated to. It is handled a store that is focused on the domain"},{"type":"text","text":" "},{"text":"of just a single element in the stack.","type":"text"}]}],"media":null},{"caption":[{"style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"It is necessary to use the ","type":"text"},{"type":"codeVoice","code":"init(state)"},{"type":"text","text":" initializer on "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"instead of the "},{"type":"codeVoice","code":"init(value:)"},{"type":"text","text":" that comes with SwiftUI."}]}],"type":"aside"}],"type":"step","media":null,"code":"02-04-02-code-0005.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wrap the row in the contacts list in a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", using the special"},{"text":" ","type":"text"},{"code":"NavigationLink(state:)","type":"codeVoice"},{"type":"text","text":" initializer that ships with this library. We are also applying a"},{"text":" ","type":"text"},{"code":".borderless","type":"codeVoice"},{"type":"text","text":" button style so that we can have the delete button in the row too."}]}]},{"media":"ch02-sub04-sec01-video-0000.mov","code":null,"content":[{"inlineContent":[{"text":"Run the application to see that we can now drill down one level, for each contact.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[]}],"anchor":"Drill-down-to-contact-detail","title":"Drill-down to contact detail"},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"We now have some drill-down functionality in our contacts app, but currently there is no"},{"type":"text","text":" "},{"type":"text","text":"interaction between the detail screen and the contacts list. Let’s change this by allowing"},{"text":" ","type":"text"},{"type":"text","text":"you to delete a contact from the detail screen. We will first prompt the user with an alert"},{"text":" ","type":"text"},{"type":"text","text":"asking them to confirm deletion, just as we did in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"text":".","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Go to ContactDetailFeature.swift to add more functionality to the reducer and view. We","type":"text"},{"type":"text","text":" "},{"text":"will start by adding some optional ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" to represent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"show the alert."}],"type":"paragraph"}],"media":null,"type":"step","code":"02-04-03-code-0000.swift"},{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The alert and delegate actions do not need an ID like was needed before. You will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see why soon."}],"type":"paragraph"}]}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add cases to "},{"code":"ContactDetailFeature.Action","type":"codeVoice"},{"type":"text","text":" for all the things the user can do in the UI,"},{"type":"text","text":" "},{"text":"such as tapping the “Delete” button, as well as any actions inside the alert and the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"delegate actions for when we need to tell the parent feature to delete the contact."}]}],"code":"02-04-03-code-0001.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Implement the new actions in the ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" property. This is very similar to what we did in"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"type":"text","text":". We will handle confirming of deletion by sending a"},{"text":" ","type":"text"},{"type":"text","text":"delegate action and dismissing using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":"","type":"text"},{"type":"text","text":" "},{"text":"dependency, and we have extracted the alert state to its own helper to make it easier to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"test later."}],"type":"paragraph"}],"caption":[],"code":"02-04-03-code-0002.swift","type":"step","media":null,"runtimePreview":null},{"code":"02-04-03-code-0003.swift","content":[{"inlineContent":[{"text":"Go to the ","type":"text"},{"code":"ContactDetailView","type":"codeVoice"},{"text":" struct and add a button for deleting the contact, as well as","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" modifier to show an alert with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"02-04-03-code-0004.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and destructure the "},{"type":"codeVoice","code":".path"},{"text":" action in order to inspect what","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is happening in each element of the stack. In particular, we want to listen for when a"},{"text":" ","type":"text"},{"code":".delegate(.confirmDeletion)","type":"codeVoice"},{"type":"text","text":" action is sent, and in that case remove the contact from the"},{"type":"text","text":" "},{"type":"text","text":"array."}]}],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Run the preview to see that the application works as expected. You can drill down to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contact, tap the delete button, confirm deletion, and then the detail is popped off the"},{"text":" ","type":"text"},{"type":"text","text":"stack and the contact is removed from the list."}]}],"type":"step","runtimePreview":null,"media":"ch02-sub04-sec03-video-0000.mp4","code":null,"caption":[]}],"anchor":"Deleting-a-contact","title":"Deleting a contact"}],"kind":"tasks"}],"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"02-04-03-code-0004.swift":{"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case let .path(.element(id: id, action: .delegate(.confirmDeletion))):","        guard let detailState = state.path[id: id]","        else { return .none }","        state.contacts.remove(id: detailState.contact.id)","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","    .forEach(\\.path, action: \/Action.path) {","      ContactDetailFeature()","    }","  }","}"],"highlights":[],"fileName":"ContactsFeature.swift","fileType":"swift","identifier":"02-04-03-code-0004.swift","type":"file","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol"},"ch02-sub04-sec03-video-0000.mp4":{"poster":null,"identifier":"ch02-sub04-sec03-video-0000.mp4","alt":null,"type":"video","variants":[{"url":"\/videos\/ch02-sub04-sec03-video-0000.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"ch02-sub04-sec01-video-0000.mov":{"type":"video","identifier":"ch02-sub04-sec01-video-0000.mov","alt":null,"variants":[{"url":"\/videos\/ch02-sub04-sec01-video-0000.mov","traits":["1x","light"]}],"poster":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","title":"StackState","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate","abstract":[{"text":"네비게이션 스택의 컨텐츠를 나타내는 데이터 목록","type":"text"}],"type":"topic","role":"symbol"},"02-04-02-code-0001.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0001.swift","fileName":"ContactsFeature.swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"type":"file"},"02-04-01-code-0002.swift":{"syntax":"swift","fileName":"ContactDetailFeature.swift","type":"file","highlights":[],"identifier":"02-04-01-code-0002.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","  enum Action: Equatable {","  }","}"],"fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)":{"kind":"symbol","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StackState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"_StackReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","role":"symbol","type":"topic","title":"forEach(_:action:destination:fileID:line:)"},"02-04-02-code-0003.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0003.swift","fileName":"ContactsFeature.swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"type":"file"},"02-04-01-code-0000.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0000.swift","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","}"],"type":"file"},"02-04-01-code-0001.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0001.swift","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"kind":"symbol"},"02-04-01-code-0004.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0004.swift","fileName":"ContactDetailFeature.swift","content":["import SwiftUI","","struct ContactDetailView: View {","  var body: some View {","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"text":" ","type":"text"},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"text":"a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol"},"02-04-02-code-0005.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0005.swift","fileName":"ContactsFeature.swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            NavigationLink(state: ContactDetailFeature.State(contact: contact)) {","              HStack {","                Text(contact.name)","                Spacer()","                Button {","                  viewStore.send(.deleteButtonTapped(id: contact.id))","                } label: {","                  Image(systemName: \"trash\")","                    .foregroundColor(.red)","                }","              }","            }","            .buttonStyle(.borderless)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","title":"Child-to-parent communication","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","role":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","kind":"symbol","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"title":"What is a side effect?","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"02-04-02-code-0000.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0000.swift","fileName":"ContactsFeature.swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"02-04-03-code-0002.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-03-code-0002.swift","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmDeletion)):","        return .run { send in","          await send(.delegate(.confirmDeletion))","          await self.dismiss()","        }","      case .alert:","        return .none","      case .delegate:","        return .none","      case .deleteButtonTapped:","        state.alert = .confirmDeletion","        return .none","      }","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}","","extension AlertState where Action == ContactDetailFeature.Action.Alert {","  static let confirmDeletion = Self {","    TextState(\"Are you sure?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmDeletion) {","      TextState(\"Delete\")","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"02-04-03-code-0000.swift":{"syntax":"swift","fileName":"ContactDetailFeature.swift","type":"file","highlights":[],"identifier":"02-04-03-code-0000.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"title":"Your first feature","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"02-04-03-code-0003.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-03-code-0003.swift","fileName":"ContactDetailFeature.swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        Button(\"Delete\") {","          viewStore.send(.deleteButtonTapped)","        }","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","    .alert(store: self.store.scope(state: \\.$alert, action: { .alert($0) }))","  }","}","","struct ContactDetailPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      ContactDetailView(","        store: Store(","          initialState: ContactDetailFeature.State(","            contact: Contact(id: UUID(), name: \"Blob\")","          )","        ) {","          ContactDetailFeature()","        }","      )","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project"},"02-04-01-code-0006.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0006.swift","fileName":"ContactDetailFeature.swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","  }","}"],"type":"file"},"02-04-02-code-0004.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0004.swift","fileName":"ContactsFeature.swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"type":"file"},"02-04-01-code-0005.swift":{"syntax":"swift","fileName":"ContactDetailFeature.swift","type":"file","highlights":[],"identifier":"02-04-01-code-0005.swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","  }","}"],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[],"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","title":"StackAction","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"title":"none","type":"topic","abstract":[{"text":"아무것도 하지않고 즉각 종료하는 ","type":"text"},{"code":"Effect","type":"codeVoice"}],"url":"\/documentation\/composablearchitecture\/effect\/none","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},"02-04-02-code-0002.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-02-code-0002.swift","fileName":"ContactsFeature.swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","    .forEach(\\.path, action: \/Action.path) {","      ContactDetailFeature()","    }","  }","}"],"type":"file"},"02-04-01-code-0007.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0007.swift","fileName":"ContactDetailFeature.swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","  }","}","","struct ContactDetailPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      ContactDetailView(","        store: Store(","          initialState: ContactDetailFeature.State(","            contact: Contact(id: UUID(), name: \"Blob\")","          )","        ) {","          ContactDetailFeature()","        }","      )","    }","  }","}"],"type":"file"},"ch02-sub04-sec01-image-0000.png":{"identifier":"ch02-sub04-sec01-image-0000.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ch02-sub04-sec01-image-0000.png"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol"},"02-04-01-code-0003.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-01-code-0003.swift","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","  enum Action: Equatable {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"type":"file"},"02-04-03-code-0001.swift":{"fileType":"swift","syntax":"swift","highlights":[],"identifier":"02-04-03-code-0001.swift","fileName":"ContactDetailFeature.swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"title":"PresentationState","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"}}}