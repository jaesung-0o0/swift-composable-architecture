{"kind":"project","schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[{"title":"Adding side effects","estimatedTimeInMinutes":30,"chapter":"Essentials","content":[{"inlineContent":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"type":"paragraph"}],"kind":"hero"},{"tasks":[{"anchor":"What-is-a-side-effect","stepsSection":[{"type":"step","code":"01-02-01-code-0001.swift","runtimePreview":"02-01-image-0001.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a new bit of functionality to the counter feature we built in"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"reference","isActive":true},{"text":". We will add a button that when tapped makes a network request to","type":"text"},{"type":"text","text":" "},{"text":"fetch a fact about the number that is currently displayed.","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"There are two ways you can approach this. Sometimes people like to work on the reducer"},{"text":" ","type":"text"},{"text":"first, and then the view. Others like to start with the view, which is what we will do now.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"We have added an additional button to the bottom of "},{"code":"CounterView","type":"codeVoice"},{"text":", and when it is tapped we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will send a "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action, which does not yet exist in the counter domain, but"},{"text":" ","type":"text"},{"type":"text","text":"will soon."}],"type":"paragraph"}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also add a progress view at the bottom to display while we are loading the fact,"},{"text":" ","type":"text"},{"type":"text","text":"and we will unwrap a bit of optional state to display the fact. We are using the"},{"type":"text","text":" "},{"code":"isLoading","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fact"},{"text":" state to accomplish this, neither of which exists in the counter","type":"text"},{"text":" ","type":"text"},{"text":"feature yet, but will soon.","type":"text"}]}],"media":null,"caption":[],"type":"step","code":"01-02-01-code-0002.swift"},{"inlineContent":[{"text":"That is all it takes for the view. The code is not yet compiling because we are using state","type":"text"},{"text":" ","type":"text"},{"text":"and actions that don’t yet exist, so let’s fix those errors in the reducer.","type":"text"}],"type":"paragraph"},{"media":null,"runtimePreview":null,"type":"step","caption":[],"code":"01-02-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Recall that this is what our ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer looks like so far, as built in"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","isActive":true},{"text":". It has a simple ","type":"text"},{"code":"State","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"text":" type, and the reducer","type":"text"},{"type":"text","text":" "},{"text":"simply decrements or increments the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" state depending on which action is sent."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the additional state and actions that have been dictated to us by the view."},{"type":"text","text":" "},{"text":"We know we need some ","type":"text"},{"code":"fact","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"isLoading"},{"text":" state, and we need a ","type":"text"},{"code":"factButtonTapped","type":"codeVoice"},{"text":" action.","type":"text"},{"text":" ","type":"text"},{"text":"We can also implement that action in the reducer by flipping ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we’ll clear the "},{"code":"fact","type":"codeVoice"},{"type":"text","text":" state when any button is tapped. And finally, we will return "},{"code":".none","type":"codeVoice"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just like we did in all the other cases."}]}],"type":"step","caption":[],"media":null,"code":"01-02-01-code-0004.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Now the question is: how can we perform a side-effect? We will be using"},{"text":" ","type":"text"},{"identifier":"http:\/\/www.numbersapi.com","type":"reference","isActive":true},{"text":" to fetch a fact for the state’s current count. We might","type":"text"},{"text":" ","type":"text"},{"text":"hope we can just use ","type":"text"},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" directly in the reducer to perform some async work, but"},{"type":"text","text":" "},{"type":"text","text":"unfortunately that is not allowed."}],"type":"paragraph"}],"caption":[],"code":"01-02-01-code-0005.swift","media":null,"runtimePreview":null,"type":"step"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture separates the simple, pure transformations of state from the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"complex, messy side effects. It is one of the core tenets of the library and there are a lot"},{"type":"text","text":" "},{"type":"text","text":"of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate"},{"text":" ","type":"text"},{"text":"for executing side effects. It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"type":"text","text":" and it is"},{"type":"text","text":" "},{"text":"explored in the next section.","type":"text"}]}],"title":"What is a side effect?","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Side effects are by far the most important aspect of feature development. They are what allow"},{"type":"text","text":" "},{"type":"text","text":"us to communicate with the outside world, such as making API requests, interacting with file"},{"type":"text","text":" "},{"type":"text","text":"systems, and performing time-based asynchrony. Without them, our applications could not do"},{"type":"text","text":" "},{"type":"text","text":"anything of real value for our users."}],"type":"paragraph"},{"inlineContent":[{"text":"However, side effects are also the most complex part of our features. State mutations are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple processes. If you run the reducer with the same piece of state and same action, you will"},{"text":" ","type":"text"},{"type":"text","text":"always get the same result. But effects are susceptible to the vagaries of the outside world,"},{"type":"text","text":" "},{"text":"such as network connectivity, disk permissions, and more. Each time you run an effect, you","type":"text"},{"text":" ","type":"text"},{"text":"can get back a completely different answer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by seeing why we can’t simply perform effectful work directly in our"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" conformances, and then we will see what tools the"},{"type":"text","text":" "},{"text":"library provides for performing effects.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"anchor":"Performing-a-network-request","title":"Performing a network request","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The primary way one constructs an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" is via the static method"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","isActive":true},{"text":". This provides","type":"text"},{"type":"text","text":" "},{"text":"you with an asynchronous context to perform any kind of work you want, as well as a handle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"send"},{"type":"text","text":") for sending actions back into the system."}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"01-02-02-code-0001.swift"},{"runtimePreview":null,"caption":[{"style":"tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Unfortunately "},{"type":"reference","identifier":"http:\/\/www.numbersapi.com","isActive":true},{"type":"text","text":" does not offer HTTPS, so you will need"},{"type":"text","text":" "},{"type":"text","text":"to add an entry to your application’s Info.plist in order to allow HTTP requests. See"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","isActive":true,"type":"reference"},{"type":"text","text":" article for information on how to do that."}],"type":"paragraph"}],"name":"Tip"}],"media":null,"code":"01-02-02-code-0002.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The trailing closure of ","type":"text"},{"code":".run","type":"codeVoice"},{"type":"text","text":" is the perfect place to perform our network request to fetch"},{"text":" ","type":"text"},{"type":"text","text":"data from "},{"isActive":true,"identifier":"http:\/\/www.numbersapi.com","type":"reference"},{"type":"text","text":" and turn it into a string."}]}]},{"type":"step","media":null,"code":"01-02-02-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"However, it is not possible to then mutate the "},{"code":"state.fact","type":"codeVoice"},{"text":" in the effect after fetching","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the data from the network. This is strictly enforced by the compiler since sendable closures"},{"type":"text","text":" "},{"type":"text","text":"cannot capture "},{"code":"inout","type":"codeVoice"},{"text":" state. This is showing how the library chooses to separate the nice,","type":"text"},{"text":" ","type":"text"},{"text":"simple and pure state mutations that reducers perform from the messy, complex effects.","type":"text"}],"type":"paragraph"}],"caption":[]},{"media":null,"code":"01-02-02-code-0004.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"In order for us to feed the information from the effect back into our reducer we need to","type":"text"},{"type":"text","text":" "},{"text":"introduce another action, called ","type":"text"},{"type":"codeVoice","code":"factResponse"},{"type":"text","text":", and it will have an associated value of the"},{"type":"text","text":" "},{"text":"string that is fetched from the network. Then we can send that action in the effect after","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"performing the asynchronous work, and we can handle the new action by flipping "},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" "},{"text":"back to ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" and updating the ","type":"text"},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state."}]}],"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Currently we are ignoring any errors that can be thrown by ","type":"text"},{"type":"codeVoice","code":"URLSession"},{"text":". In a","type":"text"},{"text":" ","type":"text"},{"text":"more complete application you would want to leverage ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"to have errors fed back into the reducer so that you can react appropriately."}]}],"name":"Warning","style":"warning"}],"runtimePreview":null},{"media":null,"runtimePreview":"02-02-video-0005.mov","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now run the application in the simulator or in a preview and see that the feature"},{"text":" ","type":"text"},{"text":"works as we expect. We can count up to a number, tap the “Fact” button, and a moment","type":"text"},{"type":"text","text":" "},{"type":"text","text":"later a fact will be displayed at the bottom of the UI."}]}],"caption":[],"code":"01-02-02-code-0005.swift","type":"step"}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Now that we understand what a side-effect is and why they cannot be performed directly in"},{"text":" ","type":"text"},{"text":"a reducer, let’s see how to fix the code we wrote above.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture bakes the notion of “effect” directly into the definition of","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". After a reducer processes an action by mutating"},{"type":"text","text":" "},{"text":"state, it can return something called an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":", which"},{"text":" ","type":"text"},{"text":"represents an asynchronous unit that is run by the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":". Effects"},{"text":" ","type":"text"},{"text":"are what can communicate with outside systems and then feed data from the outside back into","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the reducer."}]},{"type":"paragraph","inlineContent":[{"text":"This is exactly what we want to do for our number fact effect. We want to make a network","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"request, and then feed that information back into the reducer. So, let’s get started."}]}]}]},{"title":"Managing a timer","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"We will start with the view layer, just as we did before. We will add a button that either","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"displays “Start timer” or “Stop timer”, depending on some "},{"type":"codeVoice","code":"isTimerRunning"},{"text":" state, and","type":"text"},{"type":"text","text":" "},{"text":"when tapped we will send a ","type":"text"},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action. That’s all it takes for the"},{"type":"text","text":" "},{"type":"text","text":"view."}]}],"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"isTimerRunning","type":"codeVoice"},{"text":" state and ","type":"text"},{"code":"toggleTimerButtonTapped","type":"codeVoice"},{"type":"text","text":" actions do not yet exist."},{"type":"text","text":" "},{"text":"We will add them in the next step.","type":"text"}]}],"style":"note","name":"Note","type":"aside"}],"media":null,"code":"01-02-03-code-0001.swift","runtimePreview":null},{"runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Next we will update the reducer by adding the ","type":"text"},{"type":"codeVoice","code":"isTimerRunning"},{"text":" state, a new","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"text":" action, and stubbing in the basics of the logic for the new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action. We know we will want to execute some asynchronous work, in particular a timer, so"},{"text":" ","type":"text"},{"type":"text","text":"we have gone ahead and opened up a "},{"code":"run","type":"codeVoice"},{"text":" effect.","type":"text"}]}],"media":null,"code":"01-02-03-code-0002.swift"},{"caption":[],"media":null,"type":"step","code":"01-02-03-code-0003.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"code":"run","type":"codeVoice"},{"type":"text","text":" effect we can emulate a very crude timer by starting an infinite "},{"code":"while","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"loop and sleeping for one second inside the loop. This is not the best way to construct a"},{"text":" ","type":"text"},{"type":"text","text":"timer as it allows for drift to occur, but it will be fine for our purposes right now."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to react to each timer tick in the reducer we need to introduce a new action,"},{"text":" ","type":"text"},{"code":"timerTick","type":"codeVoice"},{"type":"text","text":", that will be sent after each "},{"code":"Task.sleep","type":"codeVoice"},{"type":"text","text":". And it’s in that action we will"},{"text":" ","type":"text"},{"text":"increment the state’s ","type":"text"},{"type":"codeVoice","code":"count"},{"text":".","type":"text"}]}],"media":null,"code":"01-02-03-code-0004.swift","runtimePreview":null,"type":"step","caption":[]},{"inlineContent":[{"type":"text","text":"However, there is a bug. If we tap the “Start timer” button to start the timer, and then tap"},{"type":"text","text":" "},{"text":"“Stop timer”, we will see that the timer did not stop.","type":"text"}],"type":"paragraph"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"To fix the bug, we can leverage a powerful feature of the Composable Architecture known as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“effect cancellation”. We can mark any effect as cancellable using the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","type":"reference","isActive":true},{"text":" method by providing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an ID, and then at a later time we can cancel that effect using"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)"},{"type":"text","text":"."}]}],"type":"step","code":"01-02-03-code-0005.swift","runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Now the feature works as we expect. We can start the timer, wait a few seconds to see it"},{"type":"text","text":" "},{"text":"count up, and then we can stop the timer. This shows how to manage a long-living effect,","type":"text"},{"text":" ","type":"text"},{"text":"including how to cancel effects.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[],"code":"01-02-03-code-0006.swift","runtimePreview":"03-03-video-0006.mp4"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Network requests are probably one of the most common types of side effects, but they are not","type":"text"},{"type":"text","text":" "},{"text":"the only kind. Let’s add a new bit of functionality to our counter feature. We will add","type":"text"},{"text":" ","type":"text"},{"text":"another button that when tapped starts a one second repeating timer, and for each tick we will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"increment the state’s "},{"code":"count","type":"codeVoice"},{"text":" by one.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Managing-a-timer"}],"kind":"tasks"},{"kind":"callToAction","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"action":{"isActive":true,"type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"title":"Testing your feature","featuredEyebrow":"Tutorial"}],"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-02-addingsideeffects"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","interfaceLanguage":"swift"},"metadata":{"category":"The Composable Architecture","role":"project","title":"Adding side effects","categoryPathComponent":"MeetComposableArchitecture"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"title":"Your first feature","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity":{"identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","type":"link","titleInlineContent":[{"type":"text","text":"this"}],"url":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","title":"this"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)":{"abstract":[{"type":"text","text":"Turns an effect into one that is capable of being canceled."}],"title":"cancellable(id:cancelInFlight:)","url":"\/documentation\/composablearchitecture\/effect\/cancellable(id:cancelinflight:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancellable","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ID","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cancelInFlight"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancel(id:)":{"abstract":[{"text":"An effect that will cancel any currently in-flight effect with the given identifier.","type":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/cancel(id:)","title":"cancel(id:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project"},"01-02-01-code-0002.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-01-code-0002.swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"fileName":"CounterFeature.swift","type":"file"},"01-02-03-code-0004.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","          await send(.timerTick)","        }","      }","    }","  }","}"],"identifier":"01-02-03-code-0004.swift","highlights":[{"line":16},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":57}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"},"02-01-image-0001.png":{"variants":[{"url":"\/images\/02-01-image-0001.png","traits":["1x","light"]}],"identifier":"02-01-image-0001.png","type":"image","alt":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"text":" ","type":"text"},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"text":"a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"title":"TaskResult","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","title":"Child-to-parent communication","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"01-02-02-code-0003.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        state.fact = fact","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is not allowed in","        \/\/    concurrently-executing code","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"identifier":"01-02-02-code-0003.swift","highlights":[{"line":30},{"line":31},{"line":32}],"fileName":"CounterFeature.swift","type":"file"},"01-02-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","identifier":"01-02-02-code-0005.swift","highlights":[],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","role":"pseudoSymbol"},"01-02-01-code-0003.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"],"identifier":"01-02-01-code-0003.swift","highlights":[],"fileName":"CounterFeature.swift","type":"file"},"01-02-01-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-01-code-0001.swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[],"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"01-02-03-code-0005.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"identifier":"01-02-03-code-0005.swift","highlights":[{"line":20},{"line":21},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":63},{"line":64},{"line":65}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"title":"What is a side effect?","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol"},"01-02-03-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-03-code-0006.swift","highlights":[],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol"},"03-03-video-0006.mp4":{"identifier":"03-03-video-0006.mp4","type":"video","poster":null,"alt":null,"variants":[{"url":"\/videos\/03-03-video-0006.mp4","traits":["1x","light"]}]},"01-02-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","","      let (data, _) = try await URLSession.shared","        .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(state.count)\")!)","      \/\/ 🛑 'async' call in a function that does not support concurrency","      \/\/ 🛑 Errors thrown from here are not handled","","      state.fact = String(decoding: data, as: UTF8.self)","      state.isLoading = false","","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","identifier":"01-02-01-code-0005.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"CounterFeature.swift","type":"file"},"01-02-01-code-0004.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"identifier":"01-02-01-code-0004.swift","highlights":[{"line":6},{"line":7},{"line":12},{"line":20},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":30}],"fileName":"CounterFeature.swift","type":"file"},"01-02-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-03-code-0002.swift","highlights":[{"line":8},{"line":16},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol"},"02-02-video-0005.mov":{"type":"video","identifier":"02-02-video-0005.mov","poster":null,"alt":null,"variants":[{"url":"\/videos\/02-02-video-0005.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol"},"01-02-03-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(viewStore.isTimerRunning ? \"Stop timer\" : \"Start timer\") {","          viewStore.send(.toggleTimerButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-03-code-0001.swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileName":"CounterFeature.swift","type":"file"},"01-02-03-code-0003.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","        }","      }","    }","  }","}"],"identifier":"01-02-03-code-0003.swift","highlights":[{"line":49},{"line":50},{"line":51}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"01-02-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","identifier":"01-02-02-code-0004.swift","highlights":[{"line":13},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"fileName":"CounterFeature.swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"title":"run(priority:operation:catch:fileID:line:)","type":"topic","abstract":[{"text":"비동기의 단위 작업을 감싼 ","type":"text"},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","kind":"typeIdentifier","text":"TaskPriority"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section"},"01-02-02-code-0002.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"identifier":"01-02-02-code-0002.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"fileName":"CounterFeature.swift","type":"file"},"http://www.numbersapi.com":{"title":"numbersapi.com","titleInlineContent":[{"type":"text","text":"numbersapi.com"}],"url":"http:\/\/www.numbersapi.com","identifier":"http:\/\/www.numbersapi.com","type":"link"},"01-02-02-code-0001.swift":{"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { send in","        \/\/ ✅ Do async work in here, and send actions back into the system.","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"identifier":"01-02-02-code-0001.swift","highlights":[{"line":26},{"line":27},{"line":28}],"fileName":"CounterFeature.swift","type":"file"}}}