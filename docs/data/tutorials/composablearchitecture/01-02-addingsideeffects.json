{"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","sections":[{"kind":"hero","content":[{"inlineContent":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"type":"paragraph"}],"chapter":"Essentials","estimatedTimeInMinutes":30,"title":"Adding side effects"},{"kind":"tasks","tasks":[{"title":"What is a side effect?","stepsSection":[{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"There are two ways you can approach this. Sometimes people like to work on the reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"first, and then the view. Others like to start with the view, which is what we will do now."},{"text":" ","type":"text"},{"text":"We have added an additional button to the bottom of ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and when it is tapped we"},{"type":"text","text":" "},{"text":"will send a ","type":"text"},{"type":"codeVoice","code":"factButtonTapped"},{"text":" action, which does not yet exist in the counter domain, but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will soon."}]}],"code":"01-02-01-code-0001.swift","content":[{"inlineContent":[{"type":"text","text":"Let’s add a new bit of functionality to the counter feature we built in"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"reference"},{"type":"text","text":". We will add a button that when tapped makes a network request to"},{"type":"text","text":" "},{"type":"text","text":"fetch a fact about the number that is currently displayed."}],"type":"paragraph"}],"runtimePreview":"02-01-image-0001.png"},{"code":"01-02-01-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"We will also add a progress view at the bottom to display while we are loading the fact,"},{"type":"text","text":" "},{"type":"text","text":"and we will unwrap a bit of optional state to display the fact. We are using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" and "},{"code":"fact","type":"codeVoice"},{"type":"text","text":" state to accomplish this, neither of which exists in the counter"},{"text":" ","type":"text"},{"text":"feature yet, but will soon.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"runtimePreview":null,"type":"step"},{"inlineContent":[{"type":"text","text":"That is all it takes for the view. The code is not yet compiling because we are using state"},{"type":"text","text":" "},{"type":"text","text":"and actions that don’t yet exist, so let’s fix those errors in the reducer."}],"type":"paragraph"},{"code":"01-02-01-code-0003.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recall that this is what our "},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer looks like so far, as built in","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","isActive":true,"type":"reference"},{"text":". It has a simple ","type":"text"},{"code":"State","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" type, and the reducer"},{"text":" ","type":"text"},{"text":"simply decrements or increments the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" state depending on which action is sent."}]}],"type":"step","media":null,"caption":[]},{"code":"01-02-01-code-0004.swift","caption":[],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the additional state and actions that have been dictated to us by the view."},{"type":"text","text":" "},{"type":"text","text":"We know we need some "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" and "},{"code":"isLoading","type":"codeVoice"},{"text":" state, and we need a ","type":"text"},{"code":"factButtonTapped","type":"codeVoice"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We can also implement that action in the reducer by flipping "},{"code":"isLoading","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"we’ll clear the "},{"code":"fact","type":"codeVoice"},{"type":"text","text":" state when any button is tapped. And finally, we will return "},{"type":"codeVoice","code":".none"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"just like we did in all the other cases."}]}],"runtimePreview":null},{"code":"01-02-01-code-0005.swift","runtimePreview":null,"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the question is: how can we perform a side-effect? We will be using"},{"type":"text","text":" "},{"isActive":true,"identifier":"http:\/\/www.numbersapi.com","type":"reference"},{"text":" to fetch a fact for the state’s current count. We might","type":"text"},{"type":"text","text":" "},{"text":"hope we can just use ","type":"text"},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" directly in the reducer to perform some async work, but"},{"type":"text","text":" "},{"type":"text","text":"unfortunately that is not allowed."}]}]},{"inlineContent":[{"text":"The Composable Architecture separates the simple, pure transformations of state from the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"complex, messy side effects. It is one of the core tenets of the library and there are a lot"},{"text":" ","type":"text"},{"type":"text","text":"of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate"},{"text":" ","type":"text"},{"text":"for executing side effects. It is called ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" and it is"},{"type":"text","text":" "},{"text":"explored in the next section.","type":"text"}],"type":"paragraph"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Side effects are by far the most important aspect of feature development. They are what allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"us to communicate with the outside world, such as making API requests, interacting with file"},{"text":" ","type":"text"},{"text":"systems, and performing time-based asynchrony. Without them, our applications could not do","type":"text"},{"text":" ","type":"text"},{"text":"anything of real value for our users.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, side effects are also the most complex part of our features. State mutations are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple processes. If you run the reducer with the same piece of state and same action, you will"},{"type":"text","text":" "},{"type":"text","text":"always get the same result. But effects are susceptible to the vagaries of the outside world,"},{"type":"text","text":" "},{"type":"text","text":"such as network connectivity, disk permissions, and more. Each time you run an effect, you"},{"text":" ","type":"text"},{"type":"text","text":"can get back a completely different answer."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s start by seeing why we can’t simply perform effectful work directly in our","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances, and then we will see what tools the"},{"text":" ","type":"text"},{"type":"text","text":"library provides for performing effects."}]}]}],"anchor":"What-is-a-side-effect"},{"stepsSection":[{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"The primary way one constructs an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" is via the static method"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","isActive":true,"type":"reference"},{"type":"text","text":". This provides"},{"type":"text","text":" "},{"type":"text","text":"you with an asynchronous context to perform any kind of work you want, as well as a handle"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"send","type":"codeVoice"},{"type":"text","text":") for sending actions back into the system."}],"type":"paragraph"}],"media":null,"code":"01-02-02-code-0001.swift","caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"The trailing closure of "},{"type":"codeVoice","code":".run"},{"text":" is the perfect place to perform our network request to fetch","type":"text"},{"text":" ","type":"text"},{"text":"data from ","type":"text"},{"type":"reference","identifier":"http:\/\/www.numbersapi.com","isActive":true},{"type":"text","text":" and turn it into a string."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"01-02-02-code-0002.swift","caption":[{"name":"Tip","content":[{"inlineContent":[{"type":"text","text":"Unfortunately "},{"identifier":"http:\/\/www.numbersapi.com","type":"reference","isActive":true},{"type":"text","text":" does not offer HTTPS, so you will need"},{"text":" ","type":"text"},{"type":"text","text":"to add an entry to your application’s Info.plist in order to allow HTTP requests. See"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","type":"reference","isActive":true},{"text":" article for information on how to do that.","type":"text"}],"type":"paragraph"}],"style":"tip","type":"aside"}]},{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"However, it is not possible to then mutate the ","type":"text"},{"code":"state.fact","type":"codeVoice"},{"type":"text","text":" in the effect after fetching"},{"text":" ","type":"text"},{"type":"text","text":"the data from the network. This is strictly enforced by the compiler since sendable closures"},{"text":" ","type":"text"},{"type":"text","text":"cannot capture "},{"code":"inout","type":"codeVoice"},{"text":" state. This is showing how the library chooses to separate the nice,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple and pure state mutations that reducers perform from the messy, complex effects."}]}],"media":null,"code":"01-02-02-code-0003.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for us to feed the information from the effect back into our reducer we need to"},{"type":"text","text":" "},{"type":"text","text":"introduce another action, called "},{"type":"codeVoice","code":"factResponse"},{"text":", and it will have an associated value of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string that is fetched from the network. Then we can send that action in the effect after"},{"type":"text","text":" "},{"type":"text","text":"performing the asynchronous work, and we can handle the new action by flipping "},{"code":"isLoading","type":"codeVoice"},{"text":" ","type":"text"},{"text":"back to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" and updating the ","type":"text"},{"type":"codeVoice","code":"fact"},{"text":" state.","type":"text"}]}],"caption":[{"name":"Warning","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Currently we are ignoring any errors that can be thrown by "},{"code":"URLSession","type":"codeVoice"},{"type":"text","text":". In a"},{"type":"text","text":" "},{"type":"text","text":"more complete application you would want to leverage "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to have errors fed back into the reducer so that you can react appropriately."}],"type":"paragraph"}],"style":"warning"}],"media":null,"type":"step","code":"01-02-02-code-0004.swift","runtimePreview":null},{"runtimePreview":"02-02-video-0005.mov","type":"step","code":"01-02-02-code-0005.swift","media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"We can now run the application in the simulator or in a preview and see that the feature"},{"text":" ","type":"text"},{"type":"text","text":"works as we expect. We can count up to a number, tap the “Fact” button, and a moment"},{"type":"text","text":" "},{"text":"later a fact will be displayed at the bottom of the UI.","type":"text"}],"type":"paragraph"}]}],"anchor":"Performing-a-network-request","title":"Performing a network request","contentSection":[{"content":[{"inlineContent":[{"text":"Now that we understand what a side-effect is and why they cannot be performed directly in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a reducer, let’s see how to fix the code we wrote above."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The Composable Architecture bakes the notion of “effect” directly into the definition of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":". After a reducer processes an action by mutating","type":"text"},{"type":"text","text":" "},{"text":"state, it can return something called an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":", which","type":"text"},{"type":"text","text":" "},{"text":"represents an asynchronous unit that is run by the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":". Effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are what can communicate with outside systems and then feed data from the outside back into"},{"text":" ","type":"text"},{"text":"the reducer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This is exactly what we want to do for our number fact effect. We want to make a network","type":"text"},{"type":"text","text":" "},{"type":"text","text":"request, and then feed that information back into the reducer. So, let’s get started."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"stepsSection":[{"code":"01-02-03-code-0001.swift","caption":[{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"isTimerRunning","type":"codeVoice"},{"type":"text","text":" state and "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"text":" actions do not yet exist.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"We will add them in the next step."}]}],"style":"note"}],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"We will start with the view layer, just as we did before. We will add a button that either"},{"text":" ","type":"text"},{"type":"text","text":"displays “Start timer” or “Stop timer”, depending on some "},{"type":"codeVoice","code":"isTimerRunning"},{"text":" state, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when tapped we will send a "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action. That’s all it takes for the"},{"type":"text","text":" "},{"type":"text","text":"view."}],"type":"paragraph"}],"media":null},{"media":null,"code":"01-02-03-code-0002.swift","type":"step","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Next we will update the reducer by adding the "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, a new"},{"type":"text","text":" "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"text":" action, and stubbing in the basics of the logic for the new","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action. We know we will want to execute some asynchronous work, in particular a timer, so"},{"text":" ","type":"text"},{"type":"text","text":"we have gone ahead and opened up a "},{"code":"run","type":"codeVoice"},{"text":" effect.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"type":"step","code":"01-02-03-code-0003.swift","content":[{"inlineContent":[{"text":"Inside the ","type":"text"},{"type":"codeVoice","code":"run"},{"text":" effect we can emulate a very crude timer by starting an infinite ","type":"text"},{"type":"codeVoice","code":"while"},{"text":" ","type":"text"},{"type":"text","text":"loop and sleeping for one second inside the loop. This is not the best way to construct a"},{"type":"text","text":" "},{"type":"text","text":"timer as it allows for drift to occur, but it will be fine for our purposes right now."}],"type":"paragraph"}],"media":null,"caption":[]},{"runtimePreview":null,"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"In order to react to each timer tick in the reducer we need to introduce a new action,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"timerTick"},{"text":", that will be sent after each ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":". And it’s in that action we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"code":"count","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"01-02-03-code-0004.swift"},{"inlineContent":[{"type":"text","text":"However, there is a bug. If we tap the “Start timer” button to start the timer, and then tap"},{"text":" ","type":"text"},{"text":"“Stop timer”, we will see that the timer did not stop.","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"To fix the bug, we can leverage a powerful feature of the Composable Architecture known as"},{"text":" ","type":"text"},{"text":"“effect cancellation”. We can mark any effect as cancellable using the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)"},{"type":"text","text":" method by providing"},{"text":" ","type":"text"},{"type":"text","text":"an ID, and then at a later time we can cancel that effect using"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"01-02-03-code-0005.swift","media":null,"runtimePreview":null,"type":"step"},{"media":null,"code":"01-02-03-code-0006.swift","runtimePreview":"03-03-video-0006.mp4","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the feature works as we expect. We can start the timer, wait a few seconds to see it"},{"text":" ","type":"text"},{"type":"text","text":"count up, and then we can stop the timer. This shows how to manage a long-living effect,"},{"text":" ","type":"text"},{"type":"text","text":"including how to cancel effects."}]}]}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Network requests are probably one of the most common types of side effects, but they are not","type":"text"},{"type":"text","text":" "},{"text":"the only kind. Let’s add a new bit of functionality to our counter feature. We will add","type":"text"},{"text":" ","type":"text"},{"text":"another button that when tapped starts a one second repeating timer, and for each tick we will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" by one."}],"type":"paragraph"}]}],"title":"Managing a timer","anchor":"Managing-a-timer"}]},{"title":"Testing your feature","kind":"callToAction","featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"action":{"type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true}}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-02-addingsideeffects"]}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","category":"The Composable Architecture","role":"project","title":"Adding side effects"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","interfaceLanguage":"swift"},"references":{"01-02-03-code-0002.swift":{"identifier":"01-02-03-code-0002.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","      }","    }","  }","}"],"syntax":"swift","fileName":"CounterFeature.swift","highlights":[{"line":8},{"line":16},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"title":"Testing network requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"02-01-image-0001.png":{"identifier":"02-01-image-0001.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/02-01-image-0001.png"}],"type":"image"},"01-02-03-code-0001.swift":{"fileType":"swift","type":"file","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(viewStore.isTimerRunning ? \"Stop timer\" : \"Start timer\") {","          viewStore.send(.toggleTimerButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"identifier":"01-02-03-code-0001.swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","type":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"kind":"section","role":"pseudoSymbol","title":"Create a reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"title":"Delete contacts","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"title":"Your first presentation","role":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","type":"topic","estimatedTime":"30min"},"01-02-03-code-0003.swift":{"content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","        }","      }","    }","  }","}"],"type":"file","fileType":"swift","identifier":"01-02-03-code-0003.swift","highlights":[{"line":49},{"line":50},{"line":51}],"syntax":"swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","kind":"section","title":"What is a side effect?"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancel(id:)":{"abstract":[{"type":"text","text":"An effect that will cancel any currently in-flight effect with the given identifier."}],"url":"\/documentation\/composablearchitecture\/effect\/cancel(id:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"cancel","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"text":"ID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6cancel2idACyxGqd___tSHRd__lFZ2IDL_qd__mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"cancel(id:)"},"01-02-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","          await send(.timerTick)","        }","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":16},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":57}],"identifier":"01-02-03-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"type":"topic","estimatedTime":"20min","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"project","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","type":"topic"},"03-03-video-0006.mp4":{"identifier":"03-03-video-0006.mp4","variants":[{"url":"\/videos\/03-03-video-0006.mp4","traits":["1x","light"]}],"type":"video","poster":null,"alt":null},"01-02-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","","      let (data, _) = try await URLSession.shared","        .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(state.count)\")!)","      \/\/ 🛑 'async' call in a function that does not support concurrency","      \/\/ 🛑 Errors thrown from here are not handled","","      state.fact = String(decoding: data, as: UTF8.self)","      state.isLoading = false","","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"identifier":"01-02-01-code-0005.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","role":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","title":"Testing effects"},"01-02-01-code-0002.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"identifier":"01-02-01-code-0002.swift"},"http://www.numbersapi.com":{"titleInlineContent":[{"text":"numbersapi.com","type":"text"}],"url":"http:\/\/www.numbersapi.com","type":"link","identifier":"http:\/\/www.numbersapi.com","title":"numbersapi.com"},"01-02-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":13},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"identifier":"01-02-02-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","role":"project","estimatedTime":"1hr 0min","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","role":"project","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","estimatedTime":"30min"},"01-02-03-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[],"identifier":"01-02-03-code-0006.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"title":"Deleting a contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow"},"01-02-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { send in","        \/\/ ✅ Do async work in here, and send actions back into the system.","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":26},{"line":27},{"line":28}],"identifier":"01-02-02-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"type":"section","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"01-02-01-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"identifier":"01-02-01-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","title":"Integrate views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","role":"pseudoSymbol","title":"Performing a network request"},"01-02-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        state.fact = fact","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is not allowed in","        \/\/    concurrently-executing code","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":30},{"line":31},{"line":32}],"identifier":"01-02-02-code-0003.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)":{"abstract":[{"text":"Turns an effect into one that is capable of being canceled.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/cancellable(id:cancelinflight:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancellable","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"text":"ID","preciseIdentifier":"s:22ComposableArchitecture6EffectV11cancellable2id14cancelInFlightACyxGqd___SbtSHRd__lF2IDL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"cancelInFlight","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"title":"cancellable(id:cancelInFlight:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"type":"text","text":" features."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"title":"Integrating with SwiftUI","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"type":"topic","kind":"article","title":"Essentials"},"01-02-03-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":20},{"line":21},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":63},{"line":64},{"line":65}],"identifier":"01-02-03-code-0005.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}]},"01-02-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"identifier":"01-02-02-code-0002.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"01-02-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[],"identifier":"01-02-02-code-0005.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","estimatedTime":"30min","type":"topic","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"project","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"02-02-video-0005.mov":{"identifier":"02-02-video-0005.mov","variants":[{"traits":["1x","light"],"url":"\/videos\/02-02-video-0005.mov"}],"type":"video","poster":null,"alt":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"abstract":[{"type":"text","text":"비동기의 단위 작업을 감싼 "},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"title":"run(priority:operation:catch:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"send"},{"kind":"text","text":": "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"send","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","type":"topic","role":"overview","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"01-02-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"],"fileType":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[],"identifier":"01-02-01-code-0003.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"01-02-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileType":"swift","type":"file","fileName":"CounterFeature.swift","highlights":[{"line":6},{"line":7},{"line":12},{"line":20},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":30}],"identifier":"01-02-01-code-0004.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"title":"TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"type":"section","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Contact detail feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity":{"titleInlineContent":[{"text":"this","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","title":"this"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"}}}