{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","sections":[{"kind":"hero","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}]}],"chapter":"Navigation","title":"Your first presentation"},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","media":"ch02-sub01-sec01-image-0001.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose that you are working on an application that shows a list of contacts at the root, and"},{"type":"text","text":" "},{"text":"you want to add the ability to create a new contact. This should be done by tapping a “+” icon","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the UI, a sheet will be presented where you can enter the contact’s info, and then tapping"},{"type":"text","text":" "},{"text":"a button will dismiss the sheet and add the contact to the list.","type":"text"}]}],"kind":"contentAndMedia"}],"title":"Project set up","stepsSection":[{"media":null,"code":"02-01-01-code-0000.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start by creating a new file, ContactsFeature.swift, and we will get the very basics"},{"type":"text","text":" "},{"text":"of our contacts feature in this file. Currently that consists of a simple ","type":"text"},{"code":"Contact","type":"codeVoice"},{"text":" model","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"data type, and a simple reducer with a collection of contacts, and a single action for when"},{"text":" ","type":"text"},{"text":"the “+” button is tapped. Currently that action is not yet implemented.","type":"text"}]}],"caption":[{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We conform "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol in order to test this"},{"type":"text","text":" "},{"type":"text","text":"feature later."}]}]}]},{"caption":[],"media":null,"type":"step","code":"02-01-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add a view that holds onto a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" of the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" "},{"text":"and observes the store in order to show a list of contacts and send actions.","type":"text"}]}],"runtimePreview":null},{"media":null,"type":"step","content":[{"inlineContent":[{"text":"Add a preview with a few stubbed contacts already in the state so that we can see what","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the feature looks like."}],"type":"paragraph"}],"caption":[],"code":"02-01-01-code-0002.swift","runtimePreview":"ch02-sub01-sec01-image-0001.png"},{"caption":[],"code":"02-01-01-code-0003.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a new file, AddContactFeature.swift, that will hold the reducer and view for the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature that allows us to enter the name of a new contact. The feature will have a “Cancel”"},{"text":" ","type":"text"},{"type":"text","text":"button for dismissing, and a “Save” button that when tapped should dismiss the feature"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"text":" add the contact to the list of contacts in the parent.","type":"text"}],"type":"paragraph"}],"type":"step"},{"type":"step","runtimePreview":null,"media":null,"caption":[],"code":"02-01-01-code-0004.swift","content":[{"inlineContent":[{"type":"text","text":"Add a view that holds onto a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" "},{"type":"text","text":"and observes the state in order to show a text field for the contact name and send actions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Add a preview so that we can see what the feature looks like."}],"type":"paragraph"}],"type":"step","caption":[],"code":"02-01-01-code-0005.swift","runtimePreview":"ch02-sub01-sec01-image-0002.png","media":null}],"anchor":"Project-set-up"},{"stepsSection":[{"content":[{"inlineContent":[{"text":"We will start by integrating the features together at the reducer level. This takes a","type":"text"},{"type":"text","text":" "},{"text":"few steps. Go back to the ContactsFeature.swift file where we built the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"reducer for handling the logic and behavior of the list of contacts."}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"runtimePreview":null,"code":"02-01-02-code-0000.swift"},{"code":"02-01-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Integrate the features’ states together by using the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper to hold onto an optional"},{"text":" ","type":"text"},{"type":"text","text":"value."}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"A "},{"code":"nil","type":"codeVoice"},{"text":" value represents that the “Add Contacts” feature is not presented, and a non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"text":"value represents that it is presented.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"code":"02-01-02-code-0002.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Integrate the feature’s actions together by adding a case that holds onto a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"This allows the parent to observe every action sent from the child feature."}],"type":"paragraph"}],"media":null},{"code":"02-01-02-code-0003.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Since a new case has been added to the action enum we must now handle it in the main","type":"text"},{"text":" ","type":"text"},{"text":"reducer. For now we will do nothing for this case and return ","type":"text"},{"code":".none","type":"codeVoice"},{"type":"text","text":", but soon we will do"},{"type":"text","text":" "},{"text":"more here.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null},{"runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This creates a new reducer that runs the child reducer when a child"},{"type":"text","text":" "},{"text":"action comes into the system, and runs the parent reducer on all actions. It also","type":"text"},{"type":"text","text":" "},{"text":"automatically handles effect cancellation when the child feature is dismissed, and a lot","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more. See the documentation for more information."}]}],"content":[{"inlineContent":[{"text":"Integrate the reducers together by making use of the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"text":" ","type":"text"},{"text":"reducer operator.","type":"text"}],"type":"paragraph"}],"type":"step","code":"02-01-02-code-0004.swift"},{"inlineContent":[{"type":"text","text":"That is all it takes to integrate the two features’ domains together. Before moving onto the"},{"type":"text","text":" "},{"type":"text","text":"view, we can start flexing some of the muscles that the library gives us. Because the two"},{"type":"text","text":" "},{"type":"text","text":"features are so tightly integrated together we can now easily implement the presentation and"},{"text":" ","type":"text"},{"text":"dismissal of the “Add Contact” feature.","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"When the “+” button is tapped in the contacts list feature we can now populate the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"addContact"},{"text":" state to represent that the feature should be presented.","type":"text"}]}],"media":null,"code":"02-01-02-code-0005.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"When the “Cancel” button is tapped "},{"type":"emphasis","inlineContent":[{"text":"inside","type":"text"}]},{"type":"text","text":" the “Add Contacts” feature we want to dismiss"},{"type":"text","text":" "},{"text":"the feature and do nothing else. This can be accomplished by simply ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":"-ing out the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"addContact"},{"text":" state.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"02-01-02-code-0006.swift","caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"We are destructuring on the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"text":" case in order to listen for","type":"text"},{"type":"text","text":" "},{"text":"actions inside the “Add Contact” feature.","type":"text"}],"type":"paragraph"}]}]},{"caption":[],"runtimePreview":null,"media":null,"code":"02-01-02-code-0007.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Save” button is tapped "},{"inlineContent":[{"text":"inside","type":"text"}],"type":"emphasis"},{"type":"text","text":" the “Add Contacts” feature we want to not only"},{"type":"text","text":" "},{"type":"text","text":"dismiss the feature, but we also want to add the new contact to the collection of contacts"},{"text":" ","type":"text"},{"text":"held in ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.State"},{"text":".","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"That is all it takes to implement communication between parent and child features. The parent"},{"text":" ","type":"text"},{"type":"text","text":"feature can create state in order to drive navigation, and the parent feature can listen for"},{"type":"text","text":" "},{"type":"text","text":"child actions to figure out what additional logic it wants to layer on. Next we need to"},{"type":"text","text":" "},{"text":"integrate the views together.","type":"text"}],"type":"paragraph"}],"anchor":"Integrate-reducers","title":"Integrate reducers","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Now that we have our two isolated features built, it is time to integrate them together so","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that you can navigate to the “Add Contact” screen from the contacts list screen. To do this we"},{"text":" ","type":"text"},{"text":"will first integrate the features’ reducers, which consists of utilizing","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" ","type":"text"},{"type":"text","text":"to integrate the domains, and the reducer operator"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"type":"text","text":"integrate the reducers."}]}],"mediaPosition":"trailing"}]},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recall that view currently looks like this. It is a simple list with a row for each contact,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and we have a navigation title and toolbar. We need to figure out how to present a sheet"},{"type":"text","text":" "},{"type":"text","text":"in this view whenever the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state flips to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[],"media":null,"code":"02-01-02-code-0008.swift","type":"step","runtimePreview":null},{"inlineContent":[{"text":"The library comes with a variety of tools that mimic SwiftUI’s native navigation tools (such","type":"text"},{"type":"text","text":" "},{"text":"as sheets, popovers, fullscreen covers, alerts, and confirmation dialogs), but they take","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":"s instead of bindings.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"sheet(store:)","type":"codeVoice"},{"type":"text","text":" view modifier by scoping your store down to just the presentation"},{"text":" ","type":"text"},{"type":"text","text":"domain of the "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" feature. When the "},{"code":"addContact","type":"codeVoice"},{"text":" state becomes non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", a new"},{"text":" ","type":"text"},{"type":"text","text":"store will be derived focused only on the "},{"type":"codeVoice","code":"AddContactFeature"},{"text":" domain, which is what you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pass to the "},{"type":"codeVoice","code":"AddContactView"},{"text":".","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[],"media":null,"code":"02-01-02-code-0009.swift"},{"media":"ch02-sub01-sec03-image-0000.mov","code":null,"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Run the app in the preview to show that it works as expected. Tapping the “+” icon brings up","type":"text"},{"type":"text","text":" "},{"text":"the “AddContactFeature” in a sheet, and tapping “Save” adds a new contact to the list,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"whereas tapping “Cancel” does not."}]}]}],"title":"Integrate views","anchor":"Integrate-views","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Now that we have integrated the domain and reducers of the two features we must integrate"},{"text":" ","type":"text"},{"type":"text","text":"their views. In particular, we will present an "},{"code":"AddContactView","type":"codeVoice"},{"text":" from the ","type":"text"},{"type":"codeVoice","code":"ContactsView"},{"text":".","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In the previous sections we facilitated child-to-parent communication by having the parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reducer inspect the actions in the child so that we could determine when the “Save” and"},{"text":" ","type":"text"},{"type":"text","text":"“Cancel” buttons were tapped. This is not ideal since it may lead to the parent making"},{"type":"text","text":" "},{"type":"text","text":"assumptions about what logic it should perform when something happens in the child feature."}]},{"inlineContent":[{"text":"A better pattern is to use so-called “delegate actions” for the child feature to directly tell","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the parent what it wants done."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-01-04-code-0000.swift","type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Go to AddContactFeature.swift and add a new ","type":"text"},{"type":"codeVoice","code":"Delegate"},{"text":" action enum to the","type":"text"},{"text":" ","type":"text"},{"code":"AddContactFeature","type":"codeVoice"},{"type":"text","text":". This enum will describe all the actions that the parent can listen for"},{"type":"text","text":" "},{"text":"and interpret. It allows the child feature to directly tell the parent what it wants done.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"code":"02-01-04-code-0001.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle the new case in the reducer, but we should never actually perform any logic in this"},{"type":"text","text":" "},{"type":"text","text":"case. Only the parent should listen for "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" actions and respond accordingly."}]}],"caption":[]},{"type":"step","media":null,"caption":[],"code":"02-01-04-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"Anytime we want the child feature to communicate to the parent we will return an effect that"},{"text":" ","type":"text"},{"text":"immediately and synchronously sends a delegate action. For example, when the “Save” button","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is tapped, we will send the "},{"type":"codeVoice","code":"saveContact"},{"text":" action.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"caption":[],"runtimePreview":null,"type":"step","code":"02-01-04-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift and update the reducer to listen for delegate actions to"},{"type":"text","text":" "},{"text":"figure out when it is time to dismiss or save the contact.","type":"text"}]}],"media":null},{"type":"paragraph","inlineContent":[{"text":"The application should work exactly as it did before the “delegate action” refactor, but now","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the child feature can accurately describe what it wants the parent to do rather than the"},{"type":"text","text":" "},{"text":"parent make assumptions. There is still room for improvement though. It is very common for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"child feature to want to dismiss itself, such as is the case when tapping “Cancel”. It is too"},{"text":" ","type":"text"},{"type":"text","text":"cumbersome to create a delegate action just to communicate this to the parent, and so the"},{"text":" ","type":"text"},{"type":"text","text":"library comes with a special tool for this."}]},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to AddContactFeature.swift and add a dependency on"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":". This is a value that allows child features to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dismiss themselves without any direct contact with the parent feature."}]}],"runtimePreview":null,"code":"02-01-04-code-0004.swift","type":"step"},{"code":"02-01-04-code-0005.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" dependency by returning an effect and invoking it. This will communicate"},{"text":" ","type":"text"},{"type":"text","text":"with the parent in order for a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"text":" action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to be sent, which will clear out the state driving the presentation."}]}],"type":"step","media":null,"caption":[{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"dismiss","type":"codeVoice"},{"text":" dependency is asynchronous which means it is only appropriate to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"invoke from an effect."}],"type":"paragraph"}],"type":"aside"}]},{"caption":[],"type":"step","code":"02-01-04-code-0006.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Remove the ","type":"text"},{"code":"cancel","type":"codeVoice"},{"text":" action from the ","type":"text"},{"code":"Delegate","type":"codeVoice"},{"type":"text","text":" enum because it is no longer needed. We do"},{"text":" ","type":"text"},{"type":"text","text":"not need to explicitly communicate to the parent that it should dismiss the child. That is"},{"text":" ","type":"text"},{"type":"text","text":"all handled by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":".","type":"text"}]}]},{"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"02-01-04-code-0007.swift","content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift. We can also remove the "},{"code":"cancel","type":"codeVoice"},{"text":" logic from the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" reducer and it is no longer necessary to explicitly "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the"},{"text":" ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" state. That is already taken care of.","type":"text"}],"type":"paragraph"}]}],"title":"Child-to-parent communication","anchor":"Child-to-parent-communication"}]},{"abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"title":"Multiple presentation destinations","action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"reference"},"featuredEyebrow":"Tutorial","kind":"callToAction"}],"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","interfaceLanguage":"swift"},"metadata":{"category":"The Composable Architecture","role":"project","title":"Your first presentation","categoryPathComponent":"MeetComposableArchitecture"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","role":"project","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","estimatedTime":"30min"},"02-01-01-code-0002.swift":{"syntax":"swift","highlights":[],"fileType":"swift","type":"file","fileName":"ContactsFeature.swift","identifier":"02-01-01-code-0002.swift","content":["struct ContactsView_Previews: PreviewProvider {","  static var previews: some View {","    ContactsView(","      store: Store(","        initialState: ContactsFeature.State(","          contacts: [","            Contact(id: UUID(), name: \"Blob\"),","            Contact(id: UUID(), name: \"Blob Jr\"),","            Contact(id: UUID(), name: \"Blob Sr\"),","          ]","        )","      ) {","        ContactsFeature()","      }","    )","  }","}"]},"02-01-02-code-0009.swift":{"syntax":"swift","highlights":[],"content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","  }","}"],"type":"file","fileType":"swift","identifier":"02-01-02-code-0009.swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"title":"Deleting a contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","title":"Integrate views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"02-01-04-code-0002.swift":{"syntax":"swift","highlights":[],"fileType":"swift","type":"file","fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0002.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .send(.delegate(.cancel))","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .send(.delegate(.saveContact(state.contact)))","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"]},"02-01-02-code-0006.swift":{"syntax":"swift","highlights":[],"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"type":"file","fileType":"swift","identifier":"02-01-02-code-0006.swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"project","estimatedTime":"40min","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"title":"Your first presentation","role":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","type":"topic","estimatedTime":"30min"},"02-01-02-code-0003.swift":{"syntax":"swift","highlights":[],"fileType":"swift","type":"file","fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0003.swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","","      case .addContact:","        return .none","      }","    }","  }","}"]},"02-01-04-code-0007.swift":{"syntax":"swift","highlights":[],"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      \/\/ case .addContact(.presented(.delegate(.cancel))):","      \/\/   state.addContact = nil","      \/\/   return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        \/\/ state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"type":"file","fileType":"swift","identifier":"02-01-04-code-0007.swift","fileName":"ContactsFeature.swift"},"02-01-02-code-0007.swift":{"syntax":"swift","highlights":[],"fileType":"swift","type":"file","fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0007.swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","","      case .addContact(.presented(.saveButtonTapped)):","        guard let contact = state.addContact?.contact","        else { return .none }","        state.contacts.append(contact)","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"]},"02-01-02-code-0005.swift":{"syntax":"swift","highlights":[],"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"type":"file","fileType":"swift","identifier":"02-01-02-code-0005.swift","fileName":"ContactsFeature.swift"},"02-01-01-code-0003.swift":{"syntax":"swift","highlights":[],"fileType":"swift","type":"file","fileName":"AddContactFeature.swift","identifier":"02-01-01-code-0003.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case saveButtonTapped","    case setName(String)","  }","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","estimatedTime":"30min","type":"topic","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"project","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"title":"Integrating with SwiftUI","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"type":"topic","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"type":"text","text":" features."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"},"02-01-02-code-0001.swift":{"type":"file","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"syntax":"swift","fileType":"swift","identifier":"02-01-02-code-0001.swift","fileName":"ContactsFeature.swift","highlights":[]},"02-01-01-code-0000.swift":{"fileName":"ContactsFeature.swift","content":["import Foundation","import ComposableArchitecture","","struct Contact: Equatable, Identifiable {","  let id: UUID","  var name: String","}","","struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-01-code-0000.swift"},"02-01-01-code-0004.swift":{"content":["import SwiftUI","","struct AddContactView: View {","  let store: StoreOf<AddContactFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        TextField(\"Name\", text: viewStore.binding(get: \\.contact.name, send: { .setName($0) }))","        Button(\"Save\") {","          viewStore.send(.saveButtonTapped)","        }","      }","      .toolbar {","        ToolbarItem {","          Button(\"Cancel\") {","            viewStore.send(.cancelButtonTapped)","          }","        }","      }","    }","  }","}"],"type":"file","fileName":"AddContactFeature.swift","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-01-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}]},"02-01-02-code-0002.swift":{"type":"file","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"syntax":"swift","fileType":"swift","identifier":"02-01-02-code-0002.swift","fileName":"ContactsFeature.swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"title":"Delete contacts","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationO0L_qd__mfp","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationR0L_qd_0_mfp","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"text":"Destination","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_PresentationReducerV","kind":"typeIdentifier","text":"_PresentationReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Destination","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)"},"02-01-01-code-0005.swift":{"identifier":"02-01-01-code-0005.swift","fileName":"AddContactFeature.swift","type":"file","syntax":"swift","content":["struct AddContactPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      AddContactView(","        store: Store(","          initialState: AddContactFeature.State(","            contact: Contact(","              id: UUID(),","              name: \"Blob\"","            )","          )","        ) {","          AddContactFeature()","        }","      )","    }","  }","}"],"fileType":"swift","highlights":[]},"02-01-04-code-0005.swift":{"fileName":"AddContactFeature.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .run { _ in await self.dismiss() }","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .run { [contact = state.contact] send in","        await send(.delegate(.saveContact(contact)))","        await self.dismiss()","      }","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-04-code-0005.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","role":"symbol","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"type":"topic","title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"ch02-sub01-sec01-image-0002.png":{"type":"image","alt":null,"identifier":"ch02-sub01-sec01-image-0002.png","variants":[{"traits":["1x","light"],"url":"\/images\/ch02-sub01-sec01-image-0002.png"}]},"02-01-04-code-0000.swift":{"fileName":"AddContactFeature.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-04-code-0000.swift"},"ch02-sub01-sec01-image-0001.png":{"type":"image","alt":null,"identifier":"ch02-sub01-sec01-image-0001.png","variants":[{"traits":["1x","light"],"url":"\/images\/ch02-sub01-sec01-image-0001.png"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","role":"pseudoSymbol"},"02-01-04-code-0004.swift":{"fileName":"AddContactFeature.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .send(.delegate(.cancel))","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .send(.delegate(.saveContact(state.contact)))","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-04-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","type":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"kind":"section","role":"pseudoSymbol","title":"Create a reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"title":"Testing network requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","title":"PresentationAction.dismiss","abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"dismiss","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"type":"topic","kind":"article","title":"Essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","role":"pseudoSymbol","title":"Performing a network request"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","title":"PresentationAction.presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO0D0xmfp","text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"02-01-02-code-0008.swift":{"content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","  }","}"],"type":"file","fileName":"ContactsFeature.swift","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-02-code-0008.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","kind":"section","title":"What is a side effect?"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow"},"02-01-01-code-0001.swift":{"fileName":"ContactsFeature.swift","content":["import SwiftUI","","struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","  }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-01-code-0001.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"title":"Navigation","role":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"title":"Meet the Composable Architecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","type":"topic","role":"overview","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"02-01-02-code-0004.swift":{"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"type":"file","fileName":"ContactsFeature.swift","highlights":[],"syntax":"swift","fileType":"swift","identifier":"02-01-02-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","title":"Testing effects"},"02-01-04-code-0001.swift":{"type":"file","fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0001.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"highlights":[],"syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","role":"project","estimatedTime":"1hr 0min","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"title":"DismissEffect","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"type":"section","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Contact detail feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"text":"a SwiftUI view.","type":"text"}],"type":"topic","estimatedTime":"20min","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"type":"section","kind":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"ch02-sub01-sec03-image-0000.mov":{"type":"video","alt":null,"identifier":"ch02-sub01-sec03-image-0000.mov","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ch02-sub01-sec03-image-0000.mov"}]},"02-01-04-code-0003.swift":{"fileName":"ContactsFeature.swift","identifier":"02-01-04-code-0003.swift","type":"file","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.delegate(.cancel))):","        state.addContact = nil","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        \/\/ guard let contact = state.addContact?.contact","        \/\/ else { return .none }","        state.contacts.append(contact)","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"highlights":[],"syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"02-01-04-code-0006.swift":{"type":"file","identifier":"02-01-04-code-0006.swift","fileName":"AddContactFeature.swift","content":["import ComposableArchitecture","","struct AddContactFeature: Reducer {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action: Equatable {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      \/\/ case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .cancelButtonTapped:","      return .run { _ in await self.dismiss() }","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .run { [contact = state.contact] send in","        await send(.delegate(.saveContact(contact)))","        await self.dismiss()","      }","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"highlights":[],"syntax":"swift","fileType":"swift"},"02-01-02-code-0000.swift":{"fileType":"swift","type":"file","highlights":[],"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"identifier":"02-01-02-code-0000.swift","fileName":"ContactsFeature.swift","syntax":"swift"}}}