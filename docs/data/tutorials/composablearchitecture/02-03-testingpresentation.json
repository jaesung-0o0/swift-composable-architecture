{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"project","title":"Testing presentation","categoryPathComponent":"MeetComposableArchitecture","category":"The Composable Architecture"},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-03-testingpresentation"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}]}]},"sections":[{"title":"Testing presentation","chapter":"Navigation","kind":"hero","estimatedTimeInMinutes":40,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]}]},{"tasks":[{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The first functionality we will test is adding a new contact. This entails emulating the"},{"text":" ","type":"text"},{"text":"entire use flow of the user tapping the “+” button, typing into the name text field,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tapping the “Save” button, and confirming that the sheet is dismissed and the new contact"},{"text":" ","type":"text"},{"type":"text","text":"is added to the list."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Testing the add contact flow","stepsSection":[{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a new file, ContactsFeatureTests.swift, to your test target and paste in some basic","type":"text"},{"type":"text","text":" "},{"text":"scaffolding for a test.","type":"text"}]}],"code":"02-03-01-code-0000.swift","runtimePreview":null,"caption":[]},{"code":"02-03-01-code-0001.swift","caption":[{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"type":"text","text":" for a tutorial on testing, as well as the article"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" for more detailed information."}],"type":"paragraph"}]}],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Construct a test store by supplying the initial state the feature should start in, as well"},{"text":" ","type":"text"},{"type":"text","text":"as the reducer that is being tested."}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button by sending the "},{"type":"codeVoice","code":"addButtonTapped"},{"type":"text","text":" action. The"},{"text":" ","type":"text"},{"text":"trailing closure provided is where we will assert on how state changes after sending","type":"text"},{"text":" ","type":"text"},{"text":"the action.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"02-03-01-code-0002.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"The only mutation we expect to happen is that the "},{"type":"codeVoice","code":"destination"},{"text":" field becomes populated","type":"text"},{"text":" ","type":"text"},{"text":"with some data, in particular the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" case of the destination enum."}],"type":"paragraph"}],"caption":[],"media":null,"code":"02-03-01-code-0003.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"addContact","type":"codeVoice"},{"text":" case will hold onto some data, which is ","type":"text"},{"type":"codeVoice","code":"AddContactFeature.State"},{"text":".","type":"text"}]}],"media":null,"type":"step","code":"02-03-01-code-0004.swift","runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To construct that state we need to construct a "},{"type":"codeVoice","code":"Contact"},{"text":" value, and now we run into","type":"text"},{"type":"text","text":" "},{"text":"trouble. What can we provide for the ID?","type":"text"}]}],"type":"step","caption":[],"code":"02-03-01-code-0005.swift","runtimePreview":null,"media":null},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" currently makes use of an uncontrolled dependency, making it very hard"},{"type":"text","text":" "},{"type":"text","text":"to test this feature. It constructs a random UUID when presenting this feature, and we can’t"},{"text":" ","type":"text"},{"text":"predict that ID to get a passing test. So, just as we did in ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"we will add a dependency on a UUID generator to our "},{"type":"codeVoice","code":"ContactsFeature"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"step","media":null,"content":[{"inlineContent":[{"text":"Go back to ContactsFeature.swift, and add a dependency on the UUID generator.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"code":"02-03-01-code-0006.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the newly added UUID dependency for creating UUIDs rather than reaching out to the","type":"text"},{"type":"text","text":" "},{"text":"global, uncontrollable initializer.","type":"text"}]}],"caption":[],"code":"02-03-01-code-0007.swift","type":"step","media":null},{"caption":[],"media":null,"type":"step","code":"02-03-01-code-0008.swift","content":[{"inlineContent":[{"text":"Go back to ContactsFeatureTests.swift and override the dependencies on the test store so","type":"text"},{"text":" ","type":"text"},{"text":"that it uses a controlled UUID generator. In particular, we will use the “incrementing”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generator, which generates sequential, increasing IDs starting at 0."}],"type":"paragraph"}],"runtimePreview":null},{"caption":[{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The initializer on UUID that allows providing an integer is provided by our","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","isActive":true},{"type":"text","text":" library, which the Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"depends on."}]}]}],"type":"step","code":"02-03-01-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Now we can predict the UUID generated when the contact is created.","type":"text"}]}],"media":null,"runtimePreview":null},{"inlineContent":[{"text":"This test passes! So this proves that when the “+” button is tapped, that a sheet will fly","type":"text"},{"type":"text","text":" "},{"text":"up for the “Add Contact” feature. Let’s keep asserting on more of the user flow.","type":"text"}],"type":"paragraph"},{"type":"step","caption":[],"code":"02-03-01-code-0010.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact. The trailing closure is"},{"text":" ","type":"text"},{"text":"where we can assert on how state changed after sending the action.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"To do this we use a special subscript defined on","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"type":"text","text":" that allows you to modify the data in the case"},{"text":" ","type":"text"},{"type":"text","text":"of any enum."}]},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState\/subscript(case:)","type":"reference","isActive":true},{"type":"text","text":" for documentation"},{"type":"text","text":" "},{"type":"text","text":"on this subscript."}]}],"style":"tip","type":"aside"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert on how state changed by mutating the "},{"code":"destination","type":"codeVoice"},{"text":" through the ","type":"text"},{"type":"codeVoice","code":"addContact"},{"text":" case of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the destination enum."}]}],"media":null,"code":"02-03-01-code-0011.swift","runtimePreview":null},{"media":null,"runtimePreview":null,"code":"02-03-01-code-0012.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the “Add Contact” feature. We do not"},{"type":"text","text":" "},{"type":"text","text":"expect the state to change immediately when sending this action, and so we do not need"},{"type":"text","text":" "},{"text":"to provide a trailing closure.","type":"text"}]}],"caption":[]},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the delegate action "},{"code":"saveContact","type":"codeVoice"},{"text":" being received by the test store. This action is","type":"text"},{"type":"text","text":" "},{"text":"sent from the ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" when the “Save” button is tapped."}]}],"media":null,"code":"02-03-01-code-0013.swift","runtimePreview":null},{"code":"02-03-01-code-0014.swift","runtimePreview":null,"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that when the "},{"code":"saveContact","type":"codeVoice"},{"text":" delegate action is received that state mutates by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a contact to the array."}]}]},{"caption":[],"type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Finally assert that the test store receives a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true,"type":"reference"},{"type":"text","text":" action, which causes the “Add Contact”"},{"type":"text","text":" "},{"type":"text","text":"feature to be dismissed."}],"type":"paragraph"}],"code":"02-03-01-code-0015.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a fully passing test, and proves the end-to-end lifecycle of presenting a child"},{"type":"text","text":" "},{"text":"feature, interacting with it, and how the child communicates information back to the parent.","type":"text"},{"text":" ","type":"text"},{"text":"However, this test is quite verbose, and is asserting on behavior that is local to just the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“Add Contact” feature. If we are only wanting to test at a high level that we can present"},{"type":"text","text":" "},{"text":"and dismiss a child feature, there is a better tool available called “non-exhaustive”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"testing."}]}],"anchor":"Testing-the-add-contact-flow"},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The previously written test is powerful and impressive, but also verbose. We had to assert","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on how everything evolves in the child feature, and had to assert how every effect action"},{"text":" ","type":"text"},{"text":"is received by the store. Sometimes it can be useful to write tests in a less exhaustive","type":"text"},{"type":"text","text":" "},{"text":"manner, especially when testing the integration of many features, such as is the case with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"features performing navigation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"text":" for more information on non-exhaustive testing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"techniques."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"caption":[],"media":null,"code":"02-03-02-code-0000.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start a new test case to test the same “Add Contact” user flow as above, but this time"},{"type":"text","text":" "},{"type":"text","text":"we will do it in the non-exhaustive style."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Set the test store’s "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" to "},{"type":"codeVoice","code":".off"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"02-03-02-code-0001.swift","caption":[]},{"content":[{"inlineContent":[{"text":"Emulate the user tapping on the “+” button, but this time do not provide a trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure. In non-exhaustive test stores there is no need to assert on state changes if you","type":"text"},{"text":" ","type":"text"},{"text":"do not want to.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"caption":[],"code":"02-03-02-code-0002.swift","type":"step"},{"media":null,"caption":[],"code":"02-03-02-code-0003.swift","content":[{"inlineContent":[{"text":"Emulate the user typing into the name text field of the contact, but again do not assert","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on any state changes in the child feature."}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the child feature."}]}],"media":null,"code":"02-03-02-code-0004.swift","caption":[]},{"code":"02-03-02-code-0005.swift","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Next we want to assert that sometime after the user taps the “Save” button that the"},{"text":" ","type":"text"},{"type":"text","text":"contact is added to the array and the child feature is dismissed. However, we cannot assert"},{"type":"text","text":" "},{"type":"text","text":"on that until all the actions have been received, and so we can do that by using"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ComposableArchitecture\/TestStore\/skipreceivedactions(strict:file:line:)"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that the final state of the feature has a new contact added to the array and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"destination"},{"text":" state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"’d out.","type":"text"}]}],"runtimePreview":null,"code":"02-03-02-code-0006.swift","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to write a very high level test covering the full user flow of adding"},{"type":"text","text":" "},{"text":"a new contact to the list. We don’t need to assert on all of the nitty gritty details in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the child feature, and instead can just assert that the contact was indeed added after the"},{"text":" ","type":"text"},{"text":"user completed their steps.","type":"text"}]}],"title":"Non-exhaustive testing","anchor":"Non-exhaustive-testing"},{"title":"Testing the delete contact flow","anchor":"Testing-the-delete-contact-flow","stepsSection":[{"type":"step","code":"02-03-03-code-0000.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Start a new test method to test the delete flow.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","code":"02-03-03-code-0001.swift","caption":[],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" for testing the "},{"code":"ContactsFeature","type":"codeVoice"},{"text":" reducer.","type":"text"},{"type":"text","text":" "},{"text":"This time we do not need to override any dependencies because we do not expect any to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used"}],"type":"paragraph"}]},{"media":null,"content":[{"inlineContent":[{"text":"Start the initial state of the feature with some contacts already added to the array. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will make it easier to test the deletion behavior."}],"type":"paragraph"}],"caption":[],"code":"02-03-03-code-0002.swift","type":"step","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping on the delete button by sending the "},{"code":"deleteButtonTapped","type":"codeVoice"},{"text":" action.","type":"text"},{"text":" ","type":"text"},{"text":"We will test deleting the second contact, which has an ID of ","type":"text"},{"code":"UUID(1)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","code":"02-03-03-code-0003.swift","caption":[],"runtimePreview":null,"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"We expect that the state’s ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" field will be populated with the "},{"code":"alert","type":"codeVoice"},{"type":"text","text":" case"},{"type":"text","text":" "},{"text":"since an alert should appear.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"02-03-03-code-0004.swift","runtimePreview":null},{"type":"step","caption":[],"code":"02-03-03-code-0005.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Technically we can simply repeat exactly what we did in the reducer for constructing the"},{"type":"text","text":" "},{"text":"alert. It’s verbose, but it does get the test passing.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"inlineContent":[{"type":"text","text":"However, that is a bit of a pain to repeat all of that work. There is a better way."}],"type":"paragraph"},{"type":"step","caption":[],"media":null,"code":"02-03-03-code-0006.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Go back to ContactsFeature.swift where the reducer is implemented. Extend ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"with its ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" generic constrained to ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.Action"},{"type":"text","text":". Add a static function"},{"type":"text","text":" "},{"text":"that constructs the alert, which allows us to reuse this logic in multiple places.","type":"text"}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make use of the new "},{"code":"deleteConfirmation","type":"codeVoice"},{"type":"text","text":" static alert function in the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"reducer, rather than building ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" from scratch.","type":"text"}]}],"caption":[],"media":null,"code":"02-03-03-code-0007.swift","runtimePreview":null},{"runtimePreview":null,"code":"02-03-03-code-0008.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see this passes. This proves that when the delete button is tapped, an"},{"text":" ","type":"text"},{"type":"text","text":"alert is shown to the user."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and use the new "},{"type":"codeVoice","code":"deleteConfirmation"},{"type":"text","text":" static function"},{"text":" ","type":"text"},{"text":"to assert against the alert, rather than building ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":" from scratch."}]}],"type":"step","media":null},{"runtimePreview":null,"type":"step","code":"02-03-03-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user confirming to delete contact by sending the "},{"code":"confirmDeletion","type":"codeVoice"},{"text":" action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the alert."}]}],"caption":[],"media":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Assert that the alert was dismissed and that the contact corresponding to the ID of"},{"text":" ","type":"text"},{"code":"UUID(1)","type":"codeVoice"},{"text":" was removed.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-03-03-code-0010.swift","type":"step","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to test the deletion flow. Run the test suite to see everything passes,"},{"text":" ","type":"text"},{"text":"proving that when the user taps the confirmation button in the alert that indeed the contact","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will be removed."}]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last important piece of functionality to test is deleting a contact. This involves tapping"},{"type":"text","text":" "},{"text":"a button, asserting that an alert is shown, confirming the deletion through the alert, and","type":"text"},{"text":" ","type":"text"},{"text":"then asserting that indeed the contact was removed.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"callToAction","title":"Navigation stacks","action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","type":"reference"}}],"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"text":" ","type":"text"},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"text":"a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},"02-03-01-code-0000.swift":{"identifier":"02-03-01-code-0000.swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","  }","}"],"type":"file","syntax":"swift","highlights":[],"fileType":"swift","fileName":"ContactsFeatureTests.swift"},"02-03-03-code-0001.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","syntax":"swift","fileType":"swift","identifier":"02-03-03-code-0001.swift"},"02-03-01-code-0003.swift":{"identifier":"02-03-01-code-0003.swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","      )","    }","  }","}"],"type":"file","syntax":"swift","highlights":[],"fileType":"swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"02-03-03-code-0004.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","syntax":"swift","fileType":"swift","identifier":"02-03-03-code-0004.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project"},"02-03-01-code-0012.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","  }","}"],"fileType":"swift","identifier":"02-03-01-code-0012.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol"},"02-03-02-code-0005.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.skipReceivedActions()","  }","}"],"fileType":"swift","identifier":"02-03-02-code-0005.swift","fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0005.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"identifier":"02-03-01-code-0005.swift","fileName":"ContactsFeatureTests.swift"},"02-03-03-code-0003.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","    }","  }","}"],"fileType":"swift","identifier":"02-03-03-code-0003.swift","fileName":"ContactsFeatureTests.swift"},"02-03-03-code-0005.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","        AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: UUID(1))) {","            TextState(\"Delete\")","          }","        }","      )","    }","  }","}"],"identifier":"02-03-03-code-0005.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","role":"pseudoSymbol"},"02-03-01-code-0001.swift":{"type":"file","syntax":"swift","fileType":"swift","identifier":"02-03-01-code-0001.swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","highlights":[]},"02-03-03-code-0000.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","  }","}"],"fileType":"swift","identifier":"02-03-03-code-0000.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol"},"02-03-03-code-0002.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  }","}"],"fileType":"swift","identifier":"02-03-03-code-0002.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol"},"02-03-01-code-0008.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"fileType":"swift","identifier":"02-03-01-code-0008.swift","fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0013.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","    }","  }","}"],"identifier":"02-03-01-code-0013.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project"},"02-03-01-code-0015.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","    await store.receive(.destination(.dismiss)) {","      $0.destination = nil","    }","  }","}"],"identifier":"02-03-01-code-0015.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState/subscript(case:)":{"title":"subscript(case:)","type":"topic","url":"\/documentation\/composablearchitecture\/presentationstate\/subscript(case:)","kind":"symbol","abstract":[{"type":"text","text":"Accesses the value associated with the given case for reading and writing."}],"fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"kind":"externalParam","text":"case"},{"text":" _: ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState\/subscript(case:)","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol"},"02-03-01-code-0009.swift":{"type":"file","highlights":[],"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","  }","}"],"fileType":"swift","identifier":"02-03-01-code-0009.swift","fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0007.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"identifier":"02-03-01-code-0007.swift","fileName":"ContactsFeature.swift"},"http://github.com/pointfreeco/swift-dependencies":{"titleInlineContent":[{"type":"text","text":"swift-dependencies"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","url":"http:\/\/github.com\/pointfreeco\/swift-dependencies","type":"link","title":"swift-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","kind":"section","type":"topic","abstract":[],"title":"Non-exhaustive testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","url":"\/documentation\/composablearchitecture\/testing"},"02-03-03-code-0010.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(.destination(.presented(.alert(.confirmDeletion(id: UUID(1)))))) {","      $0.contacts.remove(id: UUID(1))","      $0.destination = nil","    }","  }","}"],"fileType":"swift","syntax":"swift","identifier":"02-03-03-code-0010.swift","fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0014.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"identifier":"02-03-01-code-0014.swift","fileName":"ContactsFeatureTests.swift"},"02-03-02-code-0004.swift":{"type":"file","highlights":[],"content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","  }","}"],"fileType":"swift","syntax":"swift","identifier":"02-03-02-code-0004.swift","fileName":"ContactsFeatureTests.swift"},"02-03-02-code-0003.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","  }","}"],"identifier":"02-03-02-code-0003.swift","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project"},"02-03-03-code-0007.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"identifier":"02-03-03-code-0007.swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"dismiss","kind":"identifier"}],"title":"PresentationAction.dismiss","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","abstract":[{"text":"An action sent to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"title":"What is a side effect?","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"title":"exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic","role":"symbol","kind":"symbol"},"02-03-01-code-0002.swift":{"fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","    }","  }","}"],"syntax":"swift","type":"file","identifier":"02-03-01-code-0002.swift","highlights":[],"fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0006.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"identifier":"02-03-01-code-0006.swift","fileName":"ContactsFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","title":"Child-to-parent communication","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","role":"project","estimatedTime":"30min"},"02-03-02-code-0006.swift":{"identifier":"02-03-02-code-0006.swift","fileType":"swift","fileName":"ContactsFeatureTests.swift","syntax":"swift","highlights":[],"type":"file","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.skipReceivedActions()","    store.assert {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","      $0.destination = nil","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"title":"Your first feature","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section"},"02-03-01-code-0011.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-01-code-0011.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","  }","}"]},"02-03-01-code-0010.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-01-code-0010.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","    }","  }","}"]},"02-03-03-code-0008.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-03-code-0008.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"title":"PresentationState","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section"},"02-03-01-code-0004.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-01-code-0004.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","        )","      )","    }","  }","}"]},"02-03-03-code-0009.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-03-code-0009.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(.destination(.presented(.alert(.confirmDeletion(id: UUID(1)))))) {","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[],"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"02-03-02-code-0001.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-02-code-0001.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","}"]},"02-03-03-code-0006.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeature.swift","type":"file","identifier":"02-03-03-code-0006.swift","fileType":"swift","content":["import ComposableArchitecture","","extension AlertState where Action == ContactsFeature.Action.Alert {","  static func deleteConfirmation(id: UUID) -> Self {","    Self {","      TextState(\"Are you sure?\")","    } actions: {","      ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","        TextState(\"Delete\")","      }","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"02-03-02-code-0002.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-02-code-0002.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","  }","}"]},"02-03-02-code-0000.swift":{"highlights":[],"syntax":"swift","fileName":"ContactsFeatureTests.swift","type":"file","identifier":"02-03-02-code-0000.swift","fileType":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","  }","}"]}}}