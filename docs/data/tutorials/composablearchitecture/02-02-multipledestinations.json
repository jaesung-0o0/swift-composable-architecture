{"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"kind":"project","metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Multiple presentation destinations"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","interfaceLanguage":"swift"},"sections":[{"title":"Multiple presentation destinations","estimatedTimeInMinutes":30,"kind":"hero","chapter":"Navigation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}]}]},{"kind":"tasks","tasks":[{"anchor":"Delete-contacts","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first"},{"type":"text","text":" "},{"text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that we used last section, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ifLet"},{"text":", all work for presenting alerts","type":"text"},{"type":"text","text":" "},{"text":"from optional state too.","type":"text"}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-02-01-code-0000.swift","caption":[],"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action","type":"text"},{"text":" ","type":"text"},{"text":"that will be sent when the delete button is tapped on a row in the contacts list.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"text":"of the contact.","type":"text"}]},{"code":"02-02-01-code-0001.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Add a piece of optional ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" state to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":" state. We will further use ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" as it allows us to describe all","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the details of the alert in a manner that is test friendly since it is "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"type":"step"},{"caption":[{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The only choices in the alert are to cancel or confirm deletion, but we do not need","type":"text"},{"text":" ","type":"text"},{"text":"to model the cancel action. That will be handled automatically for us.","type":"text"}]}]}],"type":"step","media":null,"content":[{"inlineContent":[{"text":"Add a new case to the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"’s action that represents the actions that can"},{"type":"text","text":" "},{"type":"text","text":"happen in the alert. We will use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" for this.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"02-02-01-code-0002.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have new state modeled in our domain for the presentation of the alert, we can"},{"type":"text","text":" "},{"type":"text","text":"properly implement the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."}]},{"content":[{"inlineContent":[{"type":"text","text":"When the delete button is tapped we can populate the "},{"code":"alert","type":"codeVoice"},{"type":"text","text":" state in order to ask the user"},{"type":"text","text":" "},{"text":"to confirm deletion of the contact.","type":"text"}],"type":"paragraph"}],"code":"02-02-01-code-0003.swift","runtimePreview":null,"media":null,"type":"step","caption":[]},{"code":"02-02-01-code-0004.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Integrate the alert’s logic into the "},{"type":"codeVoice","code":"ContactsFeature"},{"text":" by making another use of the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" operator."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Listen for when the confirmation action is sent in the alert, and at that time we can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actually remove the element from the array."}]}],"runtimePreview":null,"code":"02-02-01-code-0005.swift","caption":[],"media":null,"type":"step"},{"inlineContent":[{"text":"That’s all it takes to integrate the alert it the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" and implement all of its"},{"text":" ","type":"text"},{"text":"logic. Next we need to integrate the alert into the view. Just as the library ships a special","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"sheet(store:)"},{"text":" view modifier that is tuned specifically for","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":"s, it also comes with a ","type":"text"},{"code":"alert(store:)","type":"codeVoice"},{"type":"text","text":" that serves a similar"},{"type":"text","text":" "},{"type":"text","text":"purpose."}],"type":"paragraph"},{"runtimePreview":null,"media":null,"code":"02-02-01-code-0006.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" view modifier to the "},{"type":"codeVoice","code":"ContactsView"},{"type":"text","text":", and hand it a store that is"},{"type":"text","text":" "},{"type":"text","text":"scoped to the alert domain."}]}],"type":"step"},{"type":"step","caption":[],"code":"02-02-01-code-0007.swift","content":[{"inlineContent":[{"type":"text","text":"Add a button to each row of the contacts list in order to send the "},{"code":"deleteButtonTapped","type":"codeVoice"},{"type":"text","text":" "},{"text":"action to the view store.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"content":[{"inlineContent":[{"text":"Run the app in the preview to see that deletion works as expected. After tapping the trash","type":"text"},{"text":" ","type":"text"},{"text":"icon, an alert shows, and if you confirm deletion the item is removed from the list.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":"ch02-sub02-sec01-0000.mov","code":null,"type":"step"},{"inlineContent":[{"text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not modeled as concisely as it could be."}],"type":"paragraph"}],"title":"Delete contacts"},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Currently the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" can navigate to two possible destinations: either the “Add"},{"type":"text","text":" "},{"text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"destinations at once. However, that currently is possible since we are representing each of"},{"text":" ","type":"text"},{"type":"text","text":"those destinations as optional pieces of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The number of invalid states explodes exponentially when you use optionals to represent"},{"text":" ","type":"text"},{"text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals","type":"text"},{"text":" ","type":"text"},{"text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"leaks complexity into your application since you can never truly know which feature is being"},{"type":"text","text":" "},{"text":"presented.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s see how to more concisely model our domains for navigating to multiple destinations."}]}],"mediaPosition":"trailing"}],"anchor":"Improve-domain-modeling","title":"Improve domain modeling","stepsSection":[{"type":"step","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Define a new reducer, called ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":", nested inside the "},{"type":"codeVoice","code":"ContactsFeature"},{"text":". This","type":"text"},{"type":"text","text":" "},{"text":"reducer will hold the domain and logic for every feature that can be navigated to from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the contacts feature."}],"type":"paragraph"}],"media":null,"code":"02-02-02-code-0000.swift"},{"media":null,"code":"02-02-02-code-0001.swift","caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Implement the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" requirement as an enum because we want to express the fact that only"},{"type":"text","text":" "},{"type":"text","text":"one single destination can be active at a time, and enums are perfect for that."}],"type":"paragraph"}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case to the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" enum for each destination feature that can be navigated to, and"},{"type":"text","text":" "},{"text":"hold onto that feature’s state. Right now this includes the ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" and the"},{"type":"text","text":" "},{"type":"text","text":"alert."}]}],"code":"02-02-02-code-0002.swift","runtimePreview":null,"caption":[],"type":"step"},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Implement the ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" requirement as an enum."}],"type":"paragraph"}],"code":"02-02-02-code-0003.swift"},{"content":[{"inlineContent":[{"text":"Add a case to the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum for each destination feature that can be navigated to, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold onto that feature’s action."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"code":"02-02-02-code-0004.swift","caption":[],"type":"step"},{"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"text":" of the reducer.","type":"text"}]}],"media":null,"code":"02-02-02-code-0005.swift"},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Compose all of the destination features together by using the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true,"type":"reference"},{"text":" reducer to focus on the domain of a reducer. Typically","type":"text"},{"type":"text","text":" "},{"text":"you will need one ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true,"type":"reference"},{"type":"text","text":" reducer for each destination except for"},{"type":"text","text":" "},{"type":"text","text":"alerts and confirmation dialogs since they do not have a reducer of their own."}],"type":"paragraph"}],"code":"02-02-02-code-0006.swift","caption":[],"type":"step"},{"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"02-02-02-code-0007.swift","content":[{"inlineContent":[{"type":"text","text":"Replace the two pieces of optional "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" with a"},{"type":"text","text":" "},{"type":"text","text":"single option pointed at "},{"code":"Destination.State","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two action cases that held onto "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"type":"text","text":" "},{"text":"with a single case that holds onto ","type":"text"},{"code":"Destination.Action","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"02-02-02-code-0008.swift","runtimePreview":null,"media":null,"caption":[]},{"inlineContent":[{"type":"text","text":"Now our model is more concisely defined, and we have compile time guarantees that only"},{"type":"text","text":" "},{"type":"text","text":"one destination can be active at a time. But, also now have a lot of compiler errors we need"},{"type":"text","text":" "},{"text":"to fix.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Instead of populating a piece of ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" optional state in order to drive navigation","type":"text"},{"type":"text","text":" "},{"text":"to that feature, we will now mutate ","type":"text"},{"type":"codeVoice","code":"destination"},{"type":"text","text":" to point it to the "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" case."}]}],"type":"step","runtimePreview":null,"code":"02-02-02-code-0009.swift","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when listening for actions happening in child domains we now need to destructure the"},{"text":" ","type":"text"},{"code":".destination(.presented(_))","type":"codeVoice"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"type":"text","text":" "},{"text":"save the contact.","type":"text"}]}],"runtimePreview":null,"media":null,"caption":[],"type":"step","code":"02-02-02-code-0010.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"And when the alert confirms deletion of the contact.","type":"text"}]}],"type":"step","caption":[],"code":"02-02-02-code-0011.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can handle all other destination actions by simply returning a "},{"type":"codeVoice","code":".none"},{"type":"text","text":" effect to"},{"text":" ","type":"text"},{"type":"text","text":"represent there is no other work to perform."}]}],"type":"step","media":null,"caption":[],"code":"02-02-02-code-0012.swift"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Update the state mutation for showing an alert to instead point the ","type":"text"},{"type":"codeVoice","code":"destination"},{"type":"text","text":" to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"alert"},{"text":" case.","type":"text"}]}],"media":null,"code":"02-02-02-code-0013.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"code":"ifLet","type":"codeVoice"},{"type":"text","text":"s that were used at the bottom of the reducer with a single one that"},{"type":"text","text":" "},{"text":"runs the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer whenever the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state is non-"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]}],"caption":[],"media":null,"code":"02-02-02-code-0014.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a"},{"type":"text","text":" "},{"type":"text","text":"single optional enum, and we can now prove that only one destination can be active at a time."},{"text":" ","type":"text"},{"type":"text","text":"All that is left is to update the view so that we can specify which case of the destination"},{"type":"text","text":" "},{"type":"text","text":"enum drives the sheet and alert."}]},{"content":[{"inlineContent":[{"text":"There is an additional overload of ","type":"text"},{"code":"sheet(store:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alert(store:)"},{"text":" that takes two extra","type":"text"},{"type":"text","text":" "},{"text":"arguments: a state transformation for extracting a particular case from the","type":"text"},{"type":"text","text":" "},{"code":"Destination.State","type":"codeVoice"},{"text":" enum, and an action transformation for embedding a child action into","type":"text"},{"type":"text","text":" "},{"text":"a particular case of the ","type":"text"},{"code":"Destination.Action","type":"codeVoice"},{"text":" enum.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"02-02-02-code-0015.swift","caption":[],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"The state transformation is responsible for taking a piece of ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"text":", which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is an enum, and extracting a particular case from it. We can do this by using a case path"},{"type":"text","text":" "},{"type":"text","text":"derived from the "},{"type":"codeVoice","code":"addContact"},{"text":" case.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"02-02-02-code-0016.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The action transformation is responsible for taking a child action in the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"text":" domain and embedding it into the ","type":"text"},{"code":"Destination.Action","type":"codeVoice"},{"text":" enum. This can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be done by using the case of the enum as a function."}]}],"caption":[],"media":null,"code":"02-02-02-code-0017.swift","runtimePreview":null},{"caption":[],"type":"step","media":null,"code":"02-02-02-code-0018.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"The same can be done for the ","type":"text"},{"code":"alert(store:)","type":"codeVoice"},{"type":"text","text":" view modifier."}]}]},{"inlineContent":[{"text":"That completes the refactor of the reducer and view to use a single piece of optional enum","type":"text"},{"type":"text","text":" "},{"text":"state instead using multiple optional values. The application works exactly as it did before,","type":"text"},{"type":"text","text":" "},{"text":"but now its domain is more concisely modeled.","type":"text"}],"type":"paragraph"}]}]},{"kind":"callToAction","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"title":"Testing presentation","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","overridingTitle":"Get started","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"featuredEyebrow":"Tutorial"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/scope","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","title":"Scope","abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"navigatorTitle":[{"kind":"identifier","text":"Scope"}]},"02-02-02-code-0008.swift":{"fileType":"swift","syntax":"swift","identifier":"02-02-02-code-0008.swift","type":"file","highlights":[],"content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift"},"02-02-01-code-0000.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0000.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0011.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-02-code-0011.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","type":"topic","title":"ifLet(_:action:destination:fileID:line:)","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)","kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"},"02-02-02-code-0017.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"identifier":"02-02-02-code-0017.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0000.swift":{"syntax":"swift","fileType":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","  }","}"],"identifier":"02-02-02-code-0000.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-01-code-0007.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(","        state: \\.$alert,","        action: { .alert($0) }","      )","    )","  }","}"],"identifier":"02-02-01-code-0007.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0005.swift":{"syntax":"swift","fileType":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","    var body: some ReducerOf<Self> {","    }","  }","}"],"identifier":"02-02-02-code-0005.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"title":"PresentationState","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article"},"02-02-02-code-0013.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case .destination:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-02-code-0013.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"02-02-02-code-0003.swift":{"fileType":"swift","type":"file","identifier":"02-02-02-code-0003.swift","syntax":"swift","highlights":[],"content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","    }","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"title":"What is a side effect?","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"text":"Learn how to create a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"text":" ","type":"text"},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"text":"a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","abstract":[],"title":"Navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","title":"Child-to-parent communication","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"title":"Testing your feature","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","kind":"project","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","kind":"project","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"title":"Delete contacts","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol"},"02-02-02-code-0014.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case .destination:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"identifier":"02-02-02-code-0014.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0010.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-02-code-0010.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-01-code-0001.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0001.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"title":"Integrating into the app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol"},"02-02-02-code-0016.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action:","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"identifier":"02-02-02-code-0016.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-01-code-0003.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0003.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"title":"Multiple presentation destinations","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"title":"Testing the add contact flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-8lumc":{"required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Body","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-8lumc","title":"body","defaultImplementations":1,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc","abstract":[{"text":"다른 리듀서들과 결합한 리듀서의 컨텐츠와 행동.","type":"text"}],"kind":"symbol"},"02-02-02-code-0001.swift":{"syntax":"swift","fileType":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","    }","  }","}"],"identifier":"02-02-02-code-0001.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"02-02-02-code-0018.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"identifier":"02-02-02-code-0018.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-01-code-0006.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(","        state: \\.$alert,","        action: { .alert($0) }","      )","    )","  }","}"],"identifier":"02-02-01-code-0006.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a SwiftUI view."}],"title":"Your first feature","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project"},"02-02-02-code-0002.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"02-02-02-code-0002.swift","highlights":[],"content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","  }","}"],"fileName":"ContactsFeatures.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"02-02-02-code-0006.swift":{"syntax":"swift","fileType":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addContact, action: \/Action.addContact) {","        AddContactFeature()","      }","    }","  }","}"],"identifier":"02-02-02-code-0006.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0009.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-02-code-0009.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"title":"Adding side effects","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","title":"Drill-down to contact detail","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},"02-02-01-code-0002.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0002.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"title":"Navigation stacks","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","estimatedTime":"30min","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project"},"ch02-sub02-sec01-0000.mov":{"identifier":"ch02-sub02-sec01-0000.mov","type":"video","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ch02-sub02-sec01-0000.mov"}],"alt":null},"02-02-02-code-0012.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case .destination:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-02-code-0012.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0004.swift":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","  }","}"],"fileType":"swift","identifier":"02-02-02-code-0004.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","kind":"project","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"title":"Improve domain modeling","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","kind":"section","abstract":[{"text":"In the previous section you learned how model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol"},"02-02-01-code-0005.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"identifier":"02-02-01-code-0005.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},"02-02-02-code-0007.swift":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileType":"swift","identifier":"02-02-02-code-0007.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"02-02-02-code-0015.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"identifier":"02-02-02-code-0015.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol for","type":"text"},{"type":"text","text":" "},{"text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol"},"02-02-01-code-0004.swift":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileType":"swift","identifier":"02-02-01-code-0004.swift","highlights":[],"fileName":"ContactsFeatures.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","kind":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","role":"pseudoSymbol"}}}