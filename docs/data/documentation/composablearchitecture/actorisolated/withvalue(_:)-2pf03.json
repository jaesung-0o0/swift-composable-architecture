{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-2pf03"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withValue","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"operation","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"platforms":["iOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The result of the operation.","type":"text"}]}]},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Useful for modifying a value in a single transaction.","type":"text"}]},{"syntax":"swift","code":["\/\/ Isolate an integer for concurrent read\/write access:","let count = ActorIsolated(0)","","func increment() async {","  \/\/ Safely increment it:","  await self.count.withValue { $0 += 1 }","}"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"Because XCTest assertions donâ€™t play nicely with Swift concurrency, "},{"type":"codeVoice","code":"withValue"},{"text":" also","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provides a handy interface to peek at an actor-isolated value and assert against it:"}],"type":"paragraph"},{"syntax":"swift","code":["let didOpenSettings = ActorIsolated(false)","let model = withDependencies {","  $0.openSettings = { await didOpenSettings.setValue(true) }","} operation: {","  FeatureModel()","}","await model.settingsButtonTapped()","await didOpenSettings.withValue { XCTAssertTrue($0) }"],"type":"codeListing"}],"type":"aside","name":"Tip","style":"tip"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/actorisolated\/withvalue(_:)-2pf03"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"]]},"metadata":{"roleHeading":"Instance Method","title":"withValue(_:)","symbolKind":"method","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"externalID":"s:17ConcurrencyExtras13ActorIsolatedC9withValueyqd__qd__xzYbKXEKlF"},"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/withValue(_:)-2pf03":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-2pf03","url":"\/documentation\/composablearchitecture\/actorisolated\/withvalue(_:)-2pf03","type":"topic","role":"symbol","title":"withValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withValue","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"url":"\/documentation\/composablearchitecture\/actorisolated","role":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"title":"ActorIsolated","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}