{"metadata":{"symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"setValue","kind":"identifier"},{"text":"(() ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"role":"symbol","title":"setValue(_:)","externalID":"s:17ConcurrencyExtras13ActorIsolatedC8setValueyyxyYbKXKKF"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)"},"variants":[{"paths":["\/documentation\/composablearchitecture\/actorisolated\/setvalue(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"setValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"newValue","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"languages":["swift"],"platforms":["iOS"]}],"kind":"declarations"},{"parameters":[{"name":"newValue","content":[{"inlineContent":[{"type":"text","text":"The value to replace the current isolated value with."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"syntax":"swift","code":["\/\/ Isolate an integer for concurrent read\/write access:","let count = ActorIsolated(0)","","func reset() async {","  \/\/ Reset it:","  await self.count.setValue(0)","}"],"type":"codeListing"},{"type":"aside","style":"tip","name":"Tip","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"withValue(_:)"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"setValue"},{"type":"text","text":" if the value being set is derived from the"},{"type":"text","text":" "},{"text":"current value. This isolates the entire transaction and avoids data races between reading","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and writing the value."}],"type":"paragraph"}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"]]},"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/setValue(_:)":{"title":"setValue(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"setValue","kind":"identifier"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/actorisolated\/setvalue(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)","abstract":[{"text":"Overwrite the isolated value with a new value.","type":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"url":"\/documentation\/composablearchitecture\/actorisolated","role":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"title":"ActorIsolated","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}]}}}