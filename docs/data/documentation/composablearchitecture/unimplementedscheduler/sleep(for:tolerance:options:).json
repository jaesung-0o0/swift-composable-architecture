{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/unimplementedscheduler\/sleep(for:tolerance:options:)"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/sleep(for:tolerance:options:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations"]]},"kind":"symbol","metadata":{"symbolKind":"method","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"roleHeading":"Instance Method","title":"sleep(for:tolerance:options:)","extendedModule":"Combine","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sleep"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"}],"role":"symbol","externalID":"s:7Combine9SchedulerP0A10SchedulersE5sleep3for9tolerance7optionsy0B8TimeType_6StrideQZ_AK0B7OptionsQzSgtYaKF::SYNTHESIZED::s:17CombineSchedulers22UnimplementedSchedulerV"},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"kind":"text","text":" "},{"text":"duration","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":" = .zero, ","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"? = nil) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"duration","content":[{"inlineContent":[{"type":"text","text":"The time interval on which to sleep between yielding."}],"type":"paragraph"}]},{"name":"tolerance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed timing variance when emitting events. Defaults to "},{"type":"codeVoice","code":"zero"},{"text":".","type":"text"}]}]},{"name":"options","content":[{"type":"paragraph","inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the task is cancelled before the time ends, this function throws "},{"code":"CancellationError","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function doesnâ€™t block the scheduler."}]},{"syntax":null,"type":"codeListing","code":["try await in scheduler.sleep(for: .seconds(1))"]}]}],"abstract":[{"type":"text","text":"Suspends the current task for at least the given duration."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedScheduler"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","title":"UnimplementedScheduler","navigatorTitle":[{"text":"UnimplementedScheduler","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"A scheduler that causes the current XCTest test case to fail if it is used.","type":"text"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/sleep(for:tolerance:options:)":{"title":"sleep(for:tolerance:options:)","role":"symbol","url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/sleep(for:tolerance:options:)","abstract":[{"type":"text","text":"Suspends the current task for at least the given duration."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/sleep(for:tolerance:options:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"kind":"text","text":"("},{"kind":"externalParam","text":"for"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/Scheduler-Implementations":{"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/scheduler-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations","title":"Scheduler Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}