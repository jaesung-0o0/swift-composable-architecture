{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"timer"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" = .zero, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"? = nil) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["iOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The time interval on which to sleep between yielding the current instant in"},{"text":" ","type":"text"},{"text":"time. For example, a value of ","type":"text"},{"type":"codeVoice","code":"0.5"},{"type":"text","text":" yields an instant approximately every half-second."}]}],"name":"interval"},{"name":"tolerance","content":[{"type":"paragraph","inlineContent":[{"text":"The allowed timing variance when emitting events. Defaults to ","type":"text"},{"code":"zero","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scheduler options passed to the timer. Defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"name":"options"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A stream that repeatedly yields the current time.","type":"text"}]}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"If the task is cancelled, the sequence will terminate."}],"type":"paragraph"},{"code":["for await instant in scheduler.timer(interval: .seconds(1)) {","  print(\"now:\", instant)","}"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/unimplementedscheduler\/timer(interval:tolerance:options:)"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/timer(interval:tolerance:options:)","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"timer(interval:tolerance:options:)","roleHeading":"Instance Method","extendedModule":"Combine","modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"role":"symbol","symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE5timer8interval9tolerance7optionsScSy0B8TimeTypeQzGAI_6StrideQZ_AM0B7OptionsQzSgtF::SYNTHESIZED::s:17CombineSchedulers22UnimplementedSchedulerV","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"timer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":">","kind":"text"}]},"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/timer(interval:tolerance:options:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"timer","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval."}],"title":"timer(interval:tolerance:options:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/timer(interval:tolerance:options:)","url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/timer(interval:tolerance:options:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedScheduler"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","title":"UnimplementedScheduler","navigatorTitle":[{"text":"UnimplementedScheduler","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"A scheduler that causes the current XCTest test case to fail if it is used.","type":"text"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/Scheduler-Implementations":{"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/scheduler-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations","title":"Scheduler Implementations","abstract":[],"role":"collectionGroup","kind":"article"}}}