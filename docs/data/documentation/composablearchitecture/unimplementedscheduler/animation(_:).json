{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"animation","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"? = .default) -> "},{"text":"AnySchedulerOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}]},{"parameters":[{"name":"animation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An animation to be performed."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, if you load some asynchronous data in an ","type":"text"},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" and then"},{"text":" ","type":"text"},{"type":"text","text":"pipe its output into a "},{"type":"codeVoice","code":"@Published"},{"text":" field, you may be tempted to use the ","type":"text"},{"code":".assign(to:)","type":"codeVoice"},{"type":"text","text":" "},{"text":"operator:","type":"text"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this prevents you from wrapping the "},{"code":"articles","type":"codeVoice"},{"type":"text","text":" mutation in "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" since"},{"text":" ","type":"text"},{"text":"that is hidden from you in the ","type":"text"},{"code":".assign(to:)","type":"codeVoice"},{"type":"text","text":" operator. In this situation you can simply"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":".animation"},{"type":"text","text":" operator on "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" to transform "},{"code":"DispatchQueue.main","type":"codeVoice"},{"text":" into a","type":"text"},{"type":"text","text":" "},{"text":"scheduler that performs its work inside ","type":"text"},{"code":"withAnimation","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another common use case is when you have a Combine publisher made up of many publishers"},{"text":" ","type":"text"},{"text":"that have been merged or concatenated. You may want to animate the outputs of each of","type":"text"},{"type":"text","text":" "},{"text":"those publishers differently:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"]}]}],"metadata":{"roleHeading":"Instance Method","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers22UnimplementedSchedulerV","title":"animation(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"extendedModule":"Combine","symbolKind":"method"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/unimplementedscheduler\/animation(_:)"]}],"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"text":" ","type":"text"},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"text":" block.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/animation(_:)"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedScheduler"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","title":"UnimplementedScheduler","navigatorTitle":[{"text":"UnimplementedScheduler","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"A scheduler that causes the current XCTest test case to fail if it is used.","type":"text"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/animation(_:)":{"title":"animation(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/animation(_:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/animation(_:)","abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"code":"withAnimation","type":"codeVoice"},{"text":" block.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","kind":"typeIdentifier","text":"Animation"},{"text":"?) -> ","kind":"text"},{"text":"AnySchedulerOf","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/Scheduler-Implementations":{"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/scheduler-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations","title":"Scheduler Implementations","abstract":[],"role":"collectionGroup","kind":"article"}}}