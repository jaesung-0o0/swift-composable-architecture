{"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"],"title":"Creating a view"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"],"title":"Debugging view updates"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"title":"Instance Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"generated":true}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","interfaceLanguage":"swift"},"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"generated":true,"title":"View containers"}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"type":"conformsTo"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Content","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["iOS"]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"This helper is an alternative to observing the view store manually on your view, which requires","type":"text"},{"text":" ","type":"text"},{"text":"the boilerplate of a custom initializer.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, the following view, which manually observes the store it is handed by constructing"},{"type":"text","text":" "},{"text":"a view store in its initializer:","type":"text"}],"type":"paragraph"},{"code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"…can be written more simply using ","type":"text"},{"type":"codeVoice","code":"WithViewStore"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"There may be times where the slightly more verbose style of observing a store is preferred","type":"text"},{"text":" ","type":"text"},{"text":"instead of using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged"},{"type":"text","text":" "},{"type":"text","text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing"},{"text":" ","type":"text"},{"text":"such instability you should consider manually setting up observation with an","type":"text"},{"text":" ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"type":"text","text":" property as described above."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you may want to observe the state in a store in a context that is not a view"},{"type":"text","text":" "},{"text":"builder. In such cases ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" will not work since it is intended only for"},{"type":"text","text":" "},{"text":"SwiftUI views.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"text":" protocol, which uses a separate","type":"text"},{"text":" ","type":"text"},{"code":"@SceneBuilder","type":"codeVoice"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":". In this case you must use an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":":"}]},{"code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is highly discouraged for you to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of your root store’s state."},{"type":"text","text":" "},{"text":"It is almost never needed and will cause many view recomputations leading to poor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"performance. This is why we construct a separate "},{"type":"codeVoice","code":"SceneState"},{"text":" type that holds onto only the","type":"text"},{"type":"text","text":" "},{"text":"state that the view needs for rendering. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","type":"reference"},{"type":"text","text":" for more information on this"},{"type":"text","text":" "},{"text":"topic.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"If your view does not need access to any state in the store and only needs to be able to send"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" at all. Instead, you can send"},{"text":" ","type":"text"},{"text":"actions to a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" in a lightweight way like so:"}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Tap me\") {","  ViewStore(self.store).send(.buttonTapped)","}"],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Overview","text":"Overview"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/withviewstore"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"WithViewStore","symbolKind":"struct","externalID":"s:22ComposableArchitecture13WithViewStoreV","roleHeading":"Structure","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","title":"SwiftUI.View","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)","title":"_printChanges(_:)","abstract":[{"text":"Prints debug information to the console whenever the view is computed.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"_printChanges","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"WithViewStore","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","url":"\/documentation\/composablearchitecture\/withviewstore\/body","title":"body","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"text":"Content","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV7Contentq0_mfp","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l","kind":"symbol","title":"init(_:observe:content:file:line:)","role":"symbol","abstract":[{"text":"Initializes a structure that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" into an observable ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" in order"},{"text":" ","type":"text"},{"type":"text","text":"to compute views from state."}],"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE_7observe7content4file4lineACyxq_q0_GAA0E0Cyqd__q_G_xqd__cq0_AA0dE0Cyxq_Gcs12StaticStringVSutclufc5StateL_qd__mfp","kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D6Actionq_mfp","text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE_7observe7content4file4lineACyxq_q0_GAA0E0Cyqd__q_G_xqd__cq0_AA0dE0Cyxq_Gcs12StaticStringVSutclufc5StateL_qd__mfp"},{"text":") -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D5Statexmfp"},{"text":", ","kind":"text"},{"text":"content","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"viewStore"},{"text":": ","kind":"text"},{"text":"ViewStore","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D5Statexmfp"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D6Actionq_mfp","kind":"typeIdentifier","text":"ViewAction"},{"text":">) -> ","kind":"text"},{"text":"Content","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE7Contentq0_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","role":"symbol","navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"type":"topic","kind":"symbol","title":"NavigationStackStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"type":"topic","kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"title":"View Implementations","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","role":"collectionGroup","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"title":"DynamicViewContent Implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","abstract":[]},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","type":"unresolvable","title":"SwiftUI.DynamicViewContent"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"title":"CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"url":"\/documentation\/composablearchitecture\/performance","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","title":"Performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","title":"IfLetStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}]}}}