{"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"toChildState","kind":"internalParam"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"fromChildAction","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"A function that transforms ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"ChildState"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"toChildState"},{"name":"fromChildAction","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms "},{"type":"codeVoice","code":"ChildAction"},{"type":"text","text":" into "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A new store with its domain (state and action) transformed.","type":"text"}]}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be useful for deriving new stores to hand to child views in an application. For"},{"text":" ","type":"text"},{"text":"example:","type":"text"}]},{"syntax":"swift","code":["\/\/ Application state made from child states.","struct AppFeature: Reducer {","  struct State {","    var login: Login.State","    \/\/ ...","  }","  enum Action {","    case login(Login.Action)","    \/\/ ...","  }","","\/\/ A store that runs the entire application.","let store = Store(initialState: AppFeature.State()) {","  AppFeature()","}","","\/\/ Construct a login view by scoping the store","\/\/ to one that works with only login domain.","LoginView(","  store: store.scope(","    state: \\.login,","    action: AppFeature.Action.login","  )",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scoping in this fashion allows you to better modularize your application. In this case,"},{"type":"text","text":" "},{"code":"LoginView","type":"codeVoice"},{"text":" could be extracted to a module that has no access to ","type":"text"},{"type":"codeVoice","code":"AppFeature.State"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AppFeature.Action"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Scoping also gives a view the opportunity to focus on just the state and actions it cares","type":"text"},{"type":"text","text":" "},{"text":"about, even if its feature domain is larger.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above login domain could model a two screen login flow: a login form followed"},{"text":" ","type":"text"},{"type":"text","text":"by a two-factor authentication screen. The second screen’s domain might be nested in the"},{"text":" ","type":"text"},{"type":"text","text":"first:"}]},{"code":["struct Login: Reducer {","  struct State: Equatable {","    var email = \"\"","    var password = \"\"","    var twoFactorAuth: TwoFactorAuthState?","  }","  enum Action: Equatable {","    case emailChanged(String)","    case loginButtonTapped","    case loginResponse(Result<TwoFactorAuthState, LoginError>)","    case passwordChanged(String)","    case twoFactorAuth(TwoFactorAuthAction)","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The login view holds onto a store of this domain:"}],"type":"paragraph"},{"code":["struct LoginView: View {","  let store: StoreOf<Login>","","  var body: some View { \/* ... *\/ }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If its body were to use a view store of the same domain, this would introduce a number of"},{"text":" ","type":"text"},{"text":"problems:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view would be able to read from "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" state. This state is only intended"},{"type":"text","text":" "},{"type":"text","text":"to be read from the two-factor auth screen."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Even worse, changes to ","type":"text"},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" state would now cause SwiftUI to recompute"},{"text":" ","type":"text"},{"code":"LoginView","type":"codeVoice"},{"text":"’s body unnecessarily.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view would be able to send "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" actions. These actions are only"},{"text":" ","type":"text"},{"text":"intended to be sent from the two-factor auth screen (and reducer).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The login view would be able to send non user-facing login actions, like "},{"code":"loginResponse","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These actions are only intended to be used in the login reducer to feed the results of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effects back into the store."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To avoid these issues, one can introduce a view-specific domain that slices off the subset of"},{"type":"text","text":" "},{"text":"state and actions that a view cares about:","type":"text"}]},{"syntax":"swift","code":["extension LoginView {","  struct ViewState: Equatable {","    var email: String","    var password: String","  }","","  enum ViewAction: Equatable {","    case emailChanged(String)","    case loginButtonTapped","    case passwordChanged(String)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also introduce a couple helpers that transform feature state into view state and"},{"text":" ","type":"text"},{"type":"text","text":"transform view actions into feature actions."}]},{"syntax":"swift","type":"codeListing","code":["extension Login.State {","  var view: LoginView.ViewState {","    .init(email: self.email, password: self.password)","  }","}","","extension LoginView.ViewAction {","  var feature: Login.Action {","    switch self {","    case let .emailChanged(email)","      return .emailChanged(email)","    case .loginButtonTapped:","      return .loginButtonTapped","    case let .passwordChanged(password)","      return .passwordChanged(password)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With these helpers defined, "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":" can now scope its store’s feature domain into its view"},{"text":" ","type":"text"},{"text":"domain:","type":"text"}]},{"type":"codeListing","code":[" var body: some View {","   WithViewStore(","     self.store, observe: \\.view, send: \\.feature","   ) { viewStore in","     \/\/ ...","   }"," }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This view store is now incapable of reading any state but view state (and will not recompute"},{"text":" ","type":"text"},{"type":"text","text":"when non-view state changes), and is incapable of sending any actions but view actions."}]}],"kind":"content"}],"metadata":{"title":"scope(state:action:)","externalID":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","role":"symbol","roleHeading":"Instance Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},"sections":[],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-hei8"],"title":"Overloads"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-hei8":{"type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-hei8","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">>"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-hei8","title":"scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","type":"topic","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","title":"scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"}}}