{"abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bind"},{"text":"<","kind":"text"},{"text":"ModelValue","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ViewValue","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"modelValue"},{"text":": ","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"viewValue"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_Bindable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewValue"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"_Bindable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SQ","text":"Equatable"},{"text":", ","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"text":" == ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"\n"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"modelValue","content":[{"type":"paragraph","inlineContent":[{"text":"A binding from model state. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"text":", a binding derived from a published field","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on an observable object."}]}]},{"name":"viewValue","content":[{"inlineContent":[{"text":"A binding from view state. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"text":", a focus binding.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"SwiftUI comes with many property wrappers that can be used in views to drive view state, like","type":"text"},{"text":" ","type":"text"},{"text":"field focus. Unfortunately, these property wrappers ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be used in views. It’s not possible"},{"type":"text","text":" "},{"text":"to extract this logic to an observable object and integrate it with the rest of the model’s","type":"text"},{"type":"text","text":" "},{"text":"business logic, and be in a better position to test this state.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We can work around these limitations by introducing a published field to your observable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object and synchronizing it to view state with this view modifier."}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/caselet\/bind(_:to:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"bind(_:to:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ModelValue","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ViewValue"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewValue"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"symbolKind":"method","platforms":[{"introducedAt":"14.0","name":"iOS","unavailable":false,"beta":false,"deprecated":false},{"name":"macOS","deprecated":false,"beta":false,"introducedAt":"11.0","unavailable":false},{"name":"tvOS","unavailable":false,"beta":false,"deprecated":false,"introducedAt":"14.0"},{"deprecated":false,"unavailable":false,"name":"watchOS","beta":false,"introducedAt":"7.0"}],"modules":[{"relatedModules":["SwiftUI"],"name":"ComposableArchitecture"}],"extendedModule":"SwiftUI","roleHeading":"Instance Method","externalID":"s:7SwiftUI4ViewP0A16UINavigationCoreE4bind_2toQrqd___qd_0_tAD9_BindableRd__AdGRd_0_SQ5ValueRpd__AHQyd_0_AIRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture7CaseLetV","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet\/View-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet\/bind(_:to:)"},"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"title":"CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet/View-Implementations":{"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/caselet\/view-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet\/View-Implementations","abstract":[],"kind":"article","title":"View Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet/bind(_:to:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet\/bind(_:to:)","kind":"symbol","type":"topic","title":"bind(_:to:)","url":"\/documentation\/composablearchitecture\/caselet\/bind(_:to:)","role":"symbol","abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ModelValue","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ViewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}]}}}