{"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state"},{"text":" ","type":"text"},{"text":"and a view. The Composable Architecture provides several tools for creating bindings that establish","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such communication with your application’s store."}]},{"anchor":"Ad-hoc-bindings","level":3,"text":"Ad hoc bindings","type":"heading"},{"inlineContent":[{"type":"text","text":"The simplest tool for creating bindings that communicate with your store is"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","isActive":true},{"type":"text","text":", which is handed two closures: one that describes how to"},{"text":" ","type":"text"},{"type":"text","text":"transform state into the binding’s value, and one that describes how to transform the binding’s"},{"type":"text","text":" "},{"type":"text","text":"value into an action that can be fed back into the store."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, a reducer may have a domain that tracks if user has enabled haptic feedback. First, it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can define a boolean property on state:"}]},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable {","    var isHapticFeedbackEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"define a corresponding action that can be sent updates:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticFeedbackEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"When the reducer handles this action, it can update state accordingly:","type":"text"}]},{"code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let .isHapticFeedbackEnabledChanged(isEnabled):","      state.isHapticFeedbackEnabled = isEnabled","      return .none","","    \/\/ ...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"text":" ","type":"text"},{"type":"text","text":"communicate with our Composable Architecture feature:"}],"type":"paragraph"},{"code":["struct SettingsView: View {","  let store: StoreOf<Settings>","  ","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        Toggle(","          \"Haptic feedback\",","          isOn: viewStore.binding(","            get: \\.isHapticFeedbackEnabled,","            send: { .isHapticFeedbackEnabledChanged($0) }","          )","        )","","        \/\/ ...","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"text":"Binding state, actions, and reducers","level":3,"anchor":"Binding-state-actions-and-reducers","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"text":" ","type":"text"},{"text":"a collection of tools that can be applied to a reducer’s domain and logic to make this easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}]},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"text":"means that each field requires a corresponding action that can be sent to the store. Typically this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"comes in the form of an enum with a case per field:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces"},{"text":" ","type":"text"},{"type":"text","text":"the state at each field with a new value:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let digestChanged(digest):","      state.digest = digest","      return .none","","    case let displayNameChanged(displayName):","      state.displayName = displayName","      return .none","","    case let enableNotificationsChanged(isOn):","      state.enableNotifications = isOn","      return .none","","    case let protectMyPostsChanged(isOn):","      state.protectMyPosts = isOn","      return .none","","    case let sendEmailNotificationsChanged(isOn):","      state.sendEmailNotifications = isOn","      return .none","","    case let sendMobileNotificationsChanged(isOn):","      state.sendMobileNotifications = isOn","      return .none","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This is a ","type":"text"},{"inlineContent":[{"text":"lot","type":"text"}],"type":"emphasis"},{"text":" of boilerplate for something that should be simple. Luckily, we can dramatically","type":"text"},{"text":" ","type":"text"},{"text":"eliminate this boilerplate using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"text":", and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"First, we can annotate each bindable value of state with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","isActive":true},{"type":"text","text":" property wrapper:"}],"type":"paragraph"},{"code":["struct Settings: Reducer {","  struct State: Equatable {","    @BindingState var digest = Digest.daily","    @BindingState var displayName = \"\"","    @BindingState var enableNotifications = false","    var isLoading = false","    @BindingState var protectMyPosts = false","    @BindingState var sendEmailNotifications = false","    @BindingState var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Each annotated field is directly bindable to SwiftUI controls, like pickers, toggles, and text","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fields. Notably, the "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" property is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" annotated as being bindable, which prevents the"},{"text":" ","type":"text"},{"type":"text","text":"view from mutating this value directly."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next, we can conform the action type to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"text":" by collapsing all of the individual,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field-mutating actions into a single case that holds a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":" generic over the reducer’s"},{"type":"text","text":" "},{"type":"text","text":"state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by allowing the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference","isActive":true},{"type":"text","text":" to handle these"},{"text":" ","type":"text"},{"type":"text","text":"field mutations for us:"}]},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    BindingReducer()","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions are constructed and sent to the store by invoking dynamic member lookup on the view:"}]},{"type":"codeListing","code":["TextField(\"Display name\", text: viewStore.$displayName)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your reducer can pattern"},{"type":"text","text":" "},{"text":"match the action for a given key path:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  BindingReducer()","","  Reduce { state, action in","    switch action","    case .binding(\\.$displayName):","      \/\/ Validate display name","  ","    case .binding(\\.$enableNotifications):","      \/\/ Return an authorization request effect","  ","    \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send","type":"text"},{"text":" ","type":"text"},{"text":"a specific action describing how a binding changed, such as ","type":"text"},{"code":".displayNameChanged(\"Blob\")","type":"codeVoice"},{"type":"text","text":", you will"},{"type":"text","text":" "},{"text":"send a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"text":" ","type":"text"},{"type":"codeVoice","code":".set(\\.$displayName, \"Blob\")"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(initialState: Settings.State()) {","  Settings()","}","","store.send(.set(\\.$displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.$protectMyPosts, true)) {","  $0.protectMyPosts = true",")"]},{"name":"Tip","style":"tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you use ","type":"text"},{"type":"codeVoice","code":"@BindingState"},{"text":" on a larger struct and would like to observe changes to smaller","type":"text"},{"text":" ","type":"text"},{"text":"fields, apply the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)"},{"text":" modifier to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":":"}]},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State {","    @BindingState var developerSettings: DeveloperSettings","    \/\/ ...","  }","  \/\/ ...","  var body: some Reducer<State, Action> {","    BindingReducer()","      .onChange(of: \\.developerSettings.showDiagnostics) { oldValue, newValue in","        \/\/ Logic for when `showDiagnostics` changes...","      }","","    \/\/ ...","  }","}"],"type":"codeListing"}]},{"level":3,"anchor":"Binding-view-state-and-binding-view-stores","text":"Binding view state and binding view stores","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When a view store observes state bundled up in a “view state” struct (as described in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#View-stores"},{"text":"), a couple additional tools are required. First, the ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" "},{"text":"struct must annotate the fields it will hold onto with the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true,"type":"reference"},{"type":"text","text":" property wrapper:"}]},{"syntax":"swift","type":"codeListing","code":["struct NotificationSettingsView: View {","  let store: StoreOf<Settings>","","  struct ViewState: Equatable {","    @BindingViewState var enableNotifications: Bool","    @BindingViewState var sendEmailNotifications: Bool","    @BindingViewState var sendMobileNotifications: Bool","  }","","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"And then, when the view store is constructed, we can invoke the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-4gpoj"},{"text":" initializer, which is handed a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","type":"reference"},{"type":"text","text":" that can produce "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"text":" values from a store:","type":"text"}],"type":"paragraph"},{"code":["struct NotificationSettingsView: View {","  \/\/ ...","","  var body: some View {","    WithViewStore(","      self.store,","      observe: { bindingViewStore in","        ViewState(","          enableNotifications: bindingViewStore.$enableNotifications,","          sendEmailNotifications: bindingViewStore.$sendEmailNotifications,","          sendMobileNotifications: bindingViewStore.$sendMobileNotifications","        )","      }","    ) {","      \/\/ ...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We recommend extracting this work to simplify the call site, ","type":"text"},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":" with an initializer on your"},{"type":"text","text":" "},{"code":"ViewState","type":"codeVoice"},{"text":" struct:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct NotificationSettingsView: View {","  \/\/ ...","  struct ViewState: Equatable {","    \/\/ ...","","    init(bindingViewStore: BindingViewStore<Settings.State>) {","      self._enableNotifications = bindingViewStore.$enableNotifications","      self._sendEmailNotifications = bindingViewStore.$sendEmailNotifications","      self._sendMobileNotifications = bindingViewStore.$sendMobileNotifications","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, you can use dynamic member lookup on the view store to pluck out any view state bindings:"}]},{"syntax":"swift","code":["Form {","  Toggle(\"Enable notifications\", isOn: viewStore.$enableNotifications)","","  \/\/ ...","}"],"type":"codeListing"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindings"]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Working with SwiftUI bindings"},"seeAlsoSections":[{"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","role":"symbol","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"type":"topic","title":"BindingState","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingstate","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#View-stores":{"abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#View-stores","title":"View stores","type":"topic","url":"\/documentation\/composablearchitecture\/performance#View-stores"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","url":"\/documentation\/composablearchitecture\/bindingviewstate","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of view state that can be directly"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"type":"topic","role":"symbol","title":"BindingViewState","navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"binding"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp","text":"ViewState"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp"},{"text":", ","kind":"text"},{"text":"send","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding"},{"text":"<","kind":"text"},{"text":"Value","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"binding(get:send:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","role":"symbol","abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"text":" ","type":"text"},{"type":"text","text":"actions to the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"url":"\/documentation\/composablearchitecture\/bindingviewstore","abstract":[{"type":"text","text":"A property wrapper type that can derive "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"text":" values for a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingViewStore","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"BindingViewStore","kind":"identifier"}],"title":"BindingViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-4gpoj":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-4gpoj","role":"symbol","title":"init(_:observe:content:file:line:)","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-4gpoj","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE_7observe7content4file4lineACyxq_q0_GAA0E0Cyqd__q_G_xAA07BindingdE0Vyqd__Gcq0_AA0dE0Cyxq_Gcs12StaticStringVSutcAA14BindableActionR_5StateQy_Rsd__lufcAUL_qd__mfp"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D6Actionq_mfp","text":"ViewAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","text":"BindingViewStore"},{"kind":"text","text":"<"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE_7observe7content4file4lineACyxq_q0_GAA0E0Cyqd__q_G_xAA07BindingdE0Vyqd__Gcq0_AA0dE0Cyxq_Gcs12StaticStringVSutcAA14BindableActionR_5StateQy_Rsd__lufcAUL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D5Statexmfp","text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"content","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"viewStore"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","kind":"typeIdentifier","text":"ViewStore"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D5Statexmfp"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE0D6Actionq_mfp","text":"ViewAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreVAASQRzrlE7Contentq0_mfp","kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"code":"Content","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","abstract":[{"text":"Initializes a structure that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":" into an observable "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" in order"},{"text":" ","type":"text"},{"type":"text","text":"to compute bindings and views from state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"title":"onChange(of:_:)","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)","kind":"symbol","abstract":[{"type":"text","text":"리듀서가 상태의 값을 바꿀 때 돌아가는 리듀서를 추가합니다."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onChange"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1VL_qd__mfp","kind":"typeIdentifier","text":"V"},{"kind":"text","text":", ("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"oldValue"},{"text":": ","kind":"text"},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1VL_qd__mfp"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"newValue","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"V","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1VL_qd__mfp"},{"kind":"text","text":") -> "},{"text":"R","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1RL_qd_0_mfp"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16_OnChangeReducerV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1VL_qd__mfp"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF1RL_qd_0_mfp","kind":"typeIdentifier","text":"R"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"type":"topic","role":"symbol","title":"BindingAction","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"url":"\/documentation\/composablearchitecture\/bindingreducer","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"바인딩 액션을 전달 받을 때, 바인딩할 수 있는 상태("},{"type":"codeVoice","code":"BindableState"},{"text":") 를 업데이트 하는 리듀서","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","title":"BindingReducer","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"title":"BindableAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"}}}