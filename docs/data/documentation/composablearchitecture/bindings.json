{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Working with SwiftUI bindings","roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}]},"kind":"article","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"seeAlsoSections":[{"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindings"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state","type":"text"},{"type":"text","text":" "},{"text":"and a view. The Composable Architecture provides several tools for creating bindings that establish","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such communication with your application’s store."}]},{"type":"heading","anchor":"Ad-hoc-bindings","text":"Ad hoc bindings","level":3},{"inlineContent":[{"text":"The simplest tool for creating bindings that communicate with your store is","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes"},{"text":", which is handed two closures: one that describes how to","type":"text"},{"text":" ","type":"text"},{"text":"transform state into the binding’s value, and one that describes how to transform the binding’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value into an action that can be fed back into the store."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, a reducer may have a domain that tracks if user has enabled haptic feedback. First, it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can define a boolean property on state:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable {","    var isHapticFeedbackEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"]},{"inlineContent":[{"text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must","type":"text"},{"text":" ","type":"text"},{"text":"define a corresponding action that can be sent updates:","type":"text"}],"type":"paragraph"},{"code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticFeedbackEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"When the reducer handles this action, it can update state accordingly:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let .isHapticFeedbackEnabledChanged(isEnabled):","      state.isHapticFeedbackEnabled = isEnabled","      return .none","","    \/\/ ...","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"type":"text","text":" "},{"text":"communicate with our Composable Architecture feature:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct SettingsView: View {","  let store: StoreOf<Settings>","  ","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        Toggle(","          \"Haptic feedback\",","          isOn: viewStore.binding(","            get: \\.isHapticFeedbackEnabled,","            send: { .isHapticFeedbackEnabledChanged($0) }","          )","        )","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"level":3,"anchor":"Binding-state-actions-and-reducers","text":"Binding state, actions, and reducers","type":"heading"},{"inlineContent":[{"text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"text":" ","type":"text"},{"type":"text","text":"a collection of tools that can be applied to a reducer’s domain and logic to make this easier."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}]},{"code":["struct Settings: Reducer {","  struct State: Equatable {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"text":"means that each field requires a corresponding action that can be sent to the store. Typically this","type":"text"},{"type":"text","text":" "},{"text":"comes in the form of an enum with a case per field:","type":"text"}],"type":"paragraph"},{"code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the state at each field with a new value:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let digestChanged(digest):","      state.digest = digest","      return .none","","    case let displayNameChanged(displayName):","      state.displayName = displayName","      return .none","","    case let enableNotificationsChanged(isOn):","      state.enableNotifications = isOn","      return .none","","    case let protectMyPostsChanged(isOn):","      state.protectMyPosts = isOn","      return .none","","    case let sendEmailNotificationsChanged(isOn):","      state.sendEmailNotifications = isOn","      return .none","","    case let sendMobileNotificationsChanged(isOn):","      state.sendMobileNotifications = isOn","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This is a ","type":"text"},{"inlineContent":[{"type":"text","text":"lot"}],"type":"emphasis"},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"type":"text","text":" "},{"type":"text","text":"eliminate this boilerplate using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"First, we can annotate each bindable value of state with the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","type":"reference","isActive":true},{"type":"text","text":" property wrapper:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable {","    @BindingState var digest = Digest.daily","    @BindingState var displayName = \"\"","    @BindingState var enableNotifications = false","    var isLoading = false","    @BindingState var protectMyPosts = false","    @BindingState var sendEmailNotifications = false","    @BindingState var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Each annotated field is directly bindable to SwiftUI controls, like pickers, toggles, and text"},{"type":"text","text":" "},{"type":"text","text":"fields. Notably, the "},{"type":"codeVoice","code":"isLoading"},{"text":" property is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" annotated as being bindable, which prevents the"},{"text":" ","type":"text"},{"text":"view from mutating this value directly.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Next, we can conform the action type to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true,"type":"reference"},{"type":"text","text":" by collapsing all of the individual,"},{"type":"text","text":" "},{"type":"text","text":"field-mutating actions into a single case that holds a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true,"type":"reference"},{"text":" generic over the reducer’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by allowing the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true,"type":"reference"},{"text":" to handle these","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    BindingReducer()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions are constructed and sent to the store by invoking dynamic member lookup on the view:"}]},{"type":"codeListing","syntax":"swift","code":["TextField(\"Display name\", text: viewStore.$displayName)"]},{"inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your reducer can pattern"},{"text":" ","type":"text"},{"text":"match the action for a given key path:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some Reducer<State, Action> {","  BindingReducer()","","  Reduce { state, action in","    switch action","    case .binding(\\.$displayName):","      \/\/ Validate display name","  ","    case .binding(\\.$enableNotifications):","      \/\/ Return an authorization request effect","  ","    \/\/ ...","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send"},{"type":"text","text":" "},{"type":"text","text":"a specific action describing how a binding changed, such as "},{"code":".displayNameChanged(\"Blob\")","type":"codeVoice"},{"text":", you will","type":"text"},{"text":" ","type":"text"},{"text":"send a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"code":".set(\\.$displayName, \"Blob\")","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["let store = TestStore(initialState: Settings.State()) {","  Settings()","}","","store.send(.set(\\.$displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.$protectMyPosts, true)) {","  $0.protectMyPosts = true",")"],"syntax":"swift"},{"type":"aside","style":"tip","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"If you use ","type":"text"},{"code":"@BindingState","type":"codeVoice"},{"text":" on a larger struct and would like to observe changes to smaller","type":"text"},{"text":" ","type":"text"},{"text":"fields, apply the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","type":"reference"},{"text":" modifier to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: Reducer {","  struct State {","    @BindingState var developerSettings: DeveloperSettings","    \/\/ ...","  }","  \/\/ ...","  var body: some Reducer<State, Action> {","    BindingReducer()","      .onChange(of: \\.developerSettings.showDiagnostics) { oldValue, newValue in","        \/\/ Logic for when `showDiagnostics` changes...","      }","","    \/\/ ...","  }","}"]}]},{"level":3,"type":"heading","text":"Binding view state and binding view stores","anchor":"Binding-view-state-and-binding-view-stores"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a view store observes state bundled up in a “view state” struct (as described in"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#View-stores"},{"text":"), a couple additional tools are required. First, the ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"text":" ","type":"text"},{"text":"struct must annotate the fields it will hold onto with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"text":" property wrapper:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct NotificationSettingsView: View {","  let store: StoreOf<Settings>","","  struct ViewState: Equatable {","    @BindingViewState var enableNotifications: Bool","    @BindingViewState var sendEmailNotifications: Bool","    @BindingViewState var sendMobileNotifications: Bool","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, when the view store is constructed, we can invoke the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-4gpoj"},{"type":"text","text":" initializer, which is handed a"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","type":"reference"},{"text":" that can produce ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","type":"reference","isActive":true},{"type":"text","text":" values from a store:"}]},{"syntax":"swift","type":"codeListing","code":["struct NotificationSettingsView: View {","  \/\/ ...","","  var body: some View {","    WithViewStore(","      self.store,","      observe: { bindingViewStore in","        ViewState(","          enableNotifications: bindingViewStore.$enableNotifications,","          sendEmailNotifications: bindingViewStore.$sendEmailNotifications,","          sendMobileNotifications: bindingViewStore.$sendMobileNotifications","        )","      }","    ) {","      \/\/ ...","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"We recommend extracting this work to simplify the call site, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"text":" with an initializer on your","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ViewState"},{"text":" struct:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct NotificationSettingsView: View {","  \/\/ ...","  struct ViewState: Equatable {","    \/\/ ...","","    init(bindingViewStore: BindingViewStore<Settings.State>) {","      self._enableNotifications = bindingViewStore.$enableNotifications","      self._sendEmailNotifications = bindingViewStore.$sendEmailNotifications","      self._sendMobileNotifications = bindingViewStore.$sendMobileNotifications","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, you can use dynamic member lookup on the view store to pluck out any view state bindings:"}]},{"type":"codeListing","syntax":"swift","code":["Form {","  Toggle(\"Enable notifications\", isOn: viewStore.$enableNotifications)","","  \/\/ ...","}"]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":">"}],"title":"onChange(of:_:)","kind":"symbol","abstract":[{"type":"text","text":"리듀서가 상태의 값을 바꿀 때 돌아가는 리듀서를 추가합니다."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"get","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"send","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","title":"binding(get:send:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"text":" ","type":"text"},{"text":"actions to the store.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"title":"BindingAction","type":"topic","abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"url":"\/documentation\/composablearchitecture\/bindingaction","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}],"navigatorTitle":[{"text":"BindingAction","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"type":"topic","url":"\/documentation\/composablearchitecture\/bindingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","title":"BindingState","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingState"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}],"abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingreducer","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"topic","title":"BindingReducer","abstract":[{"type":"text","text":"바인딩 액션을 전달 받을 때, 바인딩할 수 있는 상태("},{"code":"BindableState","type":"codeVoice"},{"type":"text","text":") 를 업데이트 하는 리듀서"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"url":"\/documentation\/composablearchitecture\/bindingviewstate","abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingViewState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","type":"topic","navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"BindingViewState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"title":"BindableAction","type":"topic","abstract":[{"text":"An action type that exposes a ","type":"text"},{"code":"binding","type":"codeVoice"},{"text":" case that holds a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/bindableaction","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindableAction"}],"navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#View-stores":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#View-stores","title":"View stores","url":"\/documentation\/composablearchitecture\/performance#View-stores","abstract":[],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingViewStore"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingviewstore","title":"BindingViewStore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","abstract":[{"type":"text","text":"A property wrapper type that can derive "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","type":"reference"},{"text":" values for a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-4gpoj":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-4gpoj","type":"topic","abstract":[{"text":"Initializes a structure that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into an observable "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" in order"},{"text":" ","type":"text"},{"type":"text","text":"to compute bindings and views from state."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-4gpoj","conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","kind":"typeIdentifier","text":"BindingViewStore"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"content"},{"text":": (","kind":"text"},{"text":"ViewStore","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Content"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(_:observe:content:file:line:)"}}}