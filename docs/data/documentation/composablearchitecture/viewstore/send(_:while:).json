{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"action","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}]}]},{"kind":"parameters","parameters":[{"name":"action","content":[{"inlineContent":[{"type":"text","text":"An action."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A predicate on "},{"code":"ViewState","type":"codeVoice"},{"text":" that determines for how long this method should","type":"text"},{"type":"text","text":" "},{"text":"suspend.","type":"text"}],"type":"paragraph"}],"name":"predicate"}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while work"},{"text":" ","type":"text"},{"type":"text","text":"is being performed in an effect. One common example of this is using SwiftUI’s "},{"code":".refreshable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"method, which shows a loading indicator on the screen while work is being performed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh"},{"text":" ","type":"text"},{"type":"text","text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:"}],"type":"paragraph"},{"code":["struct Feature: Reducer {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(TaskResult<String>)","  }","  @Dependency(\\.fetch) var fetch","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .pulledToRefresh:","      state.isLoading = true","      return .run { send in","        await send(.receivedResponse(TaskResult { try await self.fetch() }))","      }","","    case let .receivedResponse(result):","      state.isLoading = false","      state.response = try? result.value","      return .none","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Note that we keep track of an ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" boolean in our state so that we know exactly when"},{"text":" ","type":"text"},{"text":"the network response is being performed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view can show the fact in a "},{"code":"List","type":"codeVoice"},{"type":"text","text":", if it’s present, and we can use the "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here we’ve used the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","isActive":true},{"type":"text","text":" method to suspend while the "},{"code":"isLoading","type":"codeVoice"},{"text":" state is","type":"text"},{"type":"text","text":" "},{"code":"true","type":"codeVoice"},{"type":"text","text":". Once that piece of state flips back to "},{"type":"codeVoice","code":"false"},{"text":" the method will resume, signaling to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" that the work has finished which will cause the loading indicator to disappear."}]}],"kind":"content"}],"metadata":{"symbolKind":"method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp","text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp","text":"ViewState"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture"}],"title":"send(_:while:)","externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"generated":true,"title":"Sending actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"]}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"title":"send(_:while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"yield(while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"abstract":[{"type":"text","text":"Sends an action to the store."}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"title":"send(_:)"}}}