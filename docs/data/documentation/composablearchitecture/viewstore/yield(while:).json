{"kind":"symbol","abstract":[{"text":"Suspends the current task while a predicate on state is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"],"generated":true,"title":"Sending actions"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"text":"@escaping","kind":"attribute"},{"kind":"text","text":" ("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"languages":["swift"],"platforms":["iOS"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"A predicate on ","type":"text"},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" that determines for how long this method"},{"type":"text","text":" "},{"type":"text","text":"should suspend."}],"type":"paragraph"}],"name":"predicate"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"If you want to suspend at the same time you send an action to the view store, use","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","isActive":true},{"type":"text","text":"."}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/yield(while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp","text":"ViewState"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"externalID":"s:22ComposableArchitecture9ViewStoreC5yield5whileySbxc_tYaF","title":"yield(while:)","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"method"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"title":"send(_:while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"abstract":[{"type":"text","text":"Sends an action to the store."}],"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"title":"send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"yield(while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}