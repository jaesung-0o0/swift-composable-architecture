{"metadata":{"title":"Store","externalID":"s:22ComposableArchitecture5StoreC","roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","symbolKind":"class"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"],"title":"Creating a store"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"],"title":"Scoping stores"},{"title":"Accessing state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)"]},{"title":"Sending actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask"]},{"title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"]},{"title":"UIKit integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"]}],"seeAlsoSections":[{"title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"],"generated":true}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","interfaceLanguage":"swift"},"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will typically construct a single one of these at the root of your application:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      RootView(","        store: Store(initialState: AppFeature.State()) {","          AppFeature()","        }","      )","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"…and then use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true,"type":"reference"},{"text":" method to derive more focused stores that can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"passed to subviews."}],"type":"paragraph"},{"text":"Scoping","anchor":"Scoping","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The most important operation defined on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" is the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true,"type":"reference"},{"type":"text","text":" method, which"},{"text":" ","type":"text"},{"type":"text","text":"allows you to transform a store into one that deals with child state and actions. This is"},{"type":"text","text":" "},{"type":"text","text":"necessary for passing stores to subviews that only care about a small portion of the entire"},{"type":"text","text":" "},{"text":"application’s domain.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if an application has a tab view at its root with tabs for activity, search, and"},{"type":"text","text":" "},{"text":"profile, then we can model the domain like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct State {","  var activity: Activity.State","  var profile: Profile.State","  var search: Search.State","}","","enum Action {","  case activity(Activity.Action)","  case profile(Profile.Action)","  case search(Search.Action)","}"]},{"inlineContent":[{"type":"text","text":"We can construct a view for each of these domains by applying "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","type":"reference","isActive":true},{"text":" to a","type":"text"},{"text":" ","type":"text"},{"text":"store that holds onto the full app domain in order to transform it into a store for each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sub-domain:"}],"type":"paragraph"},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    TabView {","      ActivityView(","        store: self.store.scope(state: \\.activity, action: { .activity($0) })","      )","      .tabItem { Text(\"Activity\") }","","      SearchView(","        store: self.store.scope(state: \\.search, action: { .search($0) })","      )","      .tabItem { Text(\"Search\") }","","      ProfileView(","        store: self.store.scope(state: \\.profile, action: { .profile($0) })","      )","      .tabItem { Text(\"Profile\") }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Thread-safety","type":"heading","text":"Thread safety"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" class is not thread-safe, and so all interactions with an instance of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"(including all of its scopes and derived "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":"s) must be done on the same thread the","type":"text"},{"type":"text","text":" "},{"text":"store was created on. Further, if the store is powering a SwiftUI or UIKit view, as is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"customary, then all interactions must be done on the "},{"inlineContent":[{"type":"text","text":"main"}],"type":"emphasis"},{"type":"text","text":" thread."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The reason stores are not thread-safe is due to the fact that when an action is sent to a store,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a reducer is run on the current state, and this process cannot be done from multiple threads."},{"text":" ","type":"text"},{"type":"text","text":"It is possible to make this process thread-safe by introducing locks or queues, but this"},{"type":"text","text":" "},{"type":"text","text":"introduces new complications:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If done simply with ","type":"text"},{"code":"DispatchQueue.main.async","type":"codeVoice"},{"text":" you will incur a thread hop even when you are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where"},{"type":"text","text":" "},{"text":"sometimes you are required to do work synchronously, such as in animation blocks.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It is possible to create a scheduler that performs its work immediately when on the main","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"thread and otherwise uses "},{"code":"DispatchQueue.main.async","type":"codeVoice"},{"type":"text","text":" ("},{"type":"emphasis","inlineContent":[{"text":"e.g.","type":"text"}]},{"type":"text","text":", see Combine Schedulers’"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","isActive":true},{"text":").","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This introduces a lot more complexity, and should probably not be adopted without having a very"},{"type":"text","text":" "},{"text":"good reason.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why we require all actions be sent from the same thread. This requirement is in the same"},{"text":" ","type":"text"},{"type":"text","text":"spirit of how "},{"code":"URLSession","type":"codeVoice"},{"text":" and other Apple APIs are designed. Those APIs tend to deliver their","type":"text"},{"text":" ","type":"text"},{"text":"outputs on whatever thread is most convenient for them, and then it is your responsibility to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dispatch back to the main queue if that’s what you need. The Composable Architecture makes you"},{"text":" ","type":"text"},{"type":"text","text":"responsible for making sure to send actions on the main thread. If you are using an effect that"},{"type":"text","text":" "},{"text":"may deliver its output on a non-main thread, you must explicitly perform ","type":"text"},{"type":"codeVoice","code":".receive(on:)"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"order to force it back on the main thread."}]},{"type":"paragraph","inlineContent":[{"text":"This approach makes the fewest number of assumptions about how effects are created and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some"},{"type":"text","text":" "},{"text":"testing benefits. If your effects are not responsible for their own scheduling, then in tests","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all of the effects would run synchronously and immediately. You would not be able to test how"},{"text":" ","type":"text"},{"type":"text","text":"multiple in-flight effects interleave with each other and affect the state of your application."},{"type":"text","text":" "},{"text":"However, by leaving scheduling out of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" we get to test these aspects of our effects","type":"text"},{"text":" ","type":"text"},{"text":"if we so desire, or we can ignore if we prefer. We have that flexibility.","type":"text"}]},{"anchor":"Thread-safety-checks","text":"Thread safety checks","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The store performs some basic thread safety checks in order to help catch mistakes. Stores"},{"text":" ","type":"text"},{"type":"text","text":"constructed via the initializer "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)"},{"type":"text","text":" are assumed"},{"type":"text","text":" "},{"text":"to run only on the main thread, and so a check is executed immediately to make sure that is the","type":"text"},{"text":" ","type":"text"},{"text":"case. Further, all actions sent to the store and all scopes (see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},{"text":") of","type":"text"},{"text":" ","type":"text"},{"text":"the store are also checked to make sure that work is performed on the main thread.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store"]}],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","type":"topic","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":") -> ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","title":"scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:transaction:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","title":"send(_:transaction:)","url":"\/documentation\/composablearchitecture\/store\/send(_:transaction:)","role":"symbol","abstract":[{"type":"text","text":"Sends an action to the store with a given transaction."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"transaction"},{"kind":"text","text":": "},{"text":"Transaction","preciseIdentifier":"s:7SwiftUI11TransactionV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/init(initialState:reducer:withDependencies:)":{"abstract":[{"text":"Initializes a store from an initial state and a reducer.","type":"text"}],"type":"topic","title":"init(initialState:reducer:withDependencies:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/init(initialstate:reducer:withdependencies:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"text":"initialState","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": () -> "},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"withDependencies"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","title":"ifLet(then:else:)","type":"topic","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"text":" or not, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"abstract":[{"type":"text","text":"A convenience type alias for referring to a store of a given reducer’s domain."}],"type":"topic","title":"StoreOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/storeof","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"StoreOf","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreTask":{"url":"\/documentation\/composablearchitecture\/storetask","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StoreTask"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask","title":"StoreTask","kind":"symbol","abstract":[{"text":"The type returned from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"text":" that represents the lifecycle of the effect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"started from sending an action."}],"navigatorTitle":[{"text":"StoreTask","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"url":"\/documentation\/composablearchitecture\/store\/send(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","title":"send(_:)","kind":"symbol","abstract":[{"text":"Sends an action to the store.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","title":"withState(_:)","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","role":"symbol","abstract":[{"type":"text","text":"Calls the given closure with the current state of the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"url":"\/documentation\/composablearchitecture\/storepublisher","abstract":[{"text":"A publisher of store state.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"StorePublisher","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}],"kind":"symbol","role":"symbol","title":"StorePublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"https://github.com/pointfreeco/combine-schedulers/blob/main/Sources/CombineSchedulers/UIScheduler.swift":{"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","title":"UIScheduler","url":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","titleInlineContent":[{"text":"UIScheduler","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:animation:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"animation","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"abstract":[{"type":"text","text":"Sends an action to the store with a given animation."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store\/send(_:animation:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","type":"topic","title":"send(_:animation:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"}}}