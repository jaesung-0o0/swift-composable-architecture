{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"You will typically construct a single one of these at the root of your application:"}],"type":"paragraph"},{"code":["@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      RootView(","        store: Store(initialState: AppFeature.State()) {","          AppFeature()","        }","      )","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and then use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"text":" method to derive more focused stores that can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed to subviews."}]},{"type":"heading","anchor":"Scoping","text":"Scoping","level":3},{"inlineContent":[{"text":"The most important operation defined on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},{"type":"text","text":" method, which"},{"type":"text","text":" "},{"type":"text","text":"allows you to transform a store into one that deals with child state and actions. This is"},{"type":"text","text":" "},{"type":"text","text":"necessary for passing stores to subviews that only care about a small portion of the entire"},{"type":"text","text":" "},{"type":"text","text":"application’s domain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if an application has a tab view at its root with tabs for activity, search, and"},{"type":"text","text":" "},{"text":"profile, then we can model the domain like this:","type":"text"}]},{"syntax":"swift","code":["struct State {","  var activity: Activity.State","  var profile: Profile.State","  var search: Search.State","}","","enum Action {","  case activity(Activity.Action)","  case profile(Profile.Action)","  case search(Search.Action)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can construct a view for each of these domains by applying "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"type":"text","text":" to a"},{"type":"text","text":" "},{"text":"store that holds onto the full app domain in order to transform it into a store for each","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sub-domain:"}],"type":"paragraph"},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    TabView {","      ActivityView(","        store: self.store.scope(state: \\.activity, action: { .activity($0) })","      )","      .tabItem { Text(\"Activity\") }","","      SearchView(","        store: self.store.scope(state: \\.search, action: { .search($0) })","      )","      .tabItem { Text(\"Search\") }","","      ProfileView(","        store: self.store.scope(state: \\.profile, action: { .profile($0) })","      )","      .tabItem { Text(\"Profile\") }","    }","  }","}"],"type":"codeListing"},{"type":"heading","level":3,"text":"Thread safety","anchor":"Thread-safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" class is not thread-safe, and so all interactions with an instance of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"(including all of its scopes and derived ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":"s) must be done on the same thread the"},{"type":"text","text":" "},{"text":"store was created on. Further, if the store is powering a SwiftUI or UIKit view, as is","type":"text"},{"type":"text","text":" "},{"text":"customary, then all interactions must be done on the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"main"}]},{"text":" thread.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason stores are not thread-safe is due to the fact that when an action is sent to a store,"},{"text":" ","type":"text"},{"text":"a reducer is run on the current state, and this process cannot be done from multiple threads.","type":"text"},{"type":"text","text":" "},{"text":"It is possible to make this process thread-safe by introducing locks or queues, but this","type":"text"},{"type":"text","text":" "},{"text":"introduces new complications:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If done simply with ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.main.async"},{"type":"text","text":" you will incur a thread hop even when you are"},{"text":" ","type":"text"},{"type":"text","text":"already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where"},{"type":"text","text":" "},{"text":"sometimes you are required to do work synchronously, such as in animation blocks.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It is possible to create a scheduler that performs its work immediately when on the main"},{"text":" ","type":"text"},{"type":"text","text":"thread and otherwise uses "},{"type":"codeVoice","code":"DispatchQueue.main.async"},{"text":" (","type":"text"},{"type":"emphasis","inlineContent":[{"text":"e.g.","type":"text"}]},{"type":"text","text":", see Combine Schedulers’"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift"},{"text":").","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This introduces a lot more complexity, and should probably not be adopted without having a very","type":"text"},{"type":"text","text":" "},{"type":"text","text":"good reason."}]},{"inlineContent":[{"text":"This is why we require all actions be sent from the same thread. This requirement is in the same","type":"text"},{"text":" ","type":"text"},{"text":"spirit of how ","type":"text"},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" and other Apple APIs are designed. Those APIs tend to deliver their"},{"type":"text","text":" "},{"text":"outputs on whatever thread is most convenient for them, and then it is your responsibility to","type":"text"},{"text":" ","type":"text"},{"text":"dispatch back to the main queue if that’s what you need. The Composable Architecture makes you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"responsible for making sure to send actions on the main thread. If you are using an effect that"},{"text":" ","type":"text"},{"text":"may deliver its output on a non-main thread, you must explicitly perform ","type":"text"},{"code":".receive(on:)","type":"codeVoice"},{"text":" in","type":"text"},{"type":"text","text":" "},{"text":"order to force it back on the main thread.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This approach makes the fewest number of assumptions about how effects are created and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some"},{"text":" ","type":"text"},{"text":"testing benefits. If your effects are not responsible for their own scheduling, then in tests","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all of the effects would run synchronously and immediately. You would not be able to test how"},{"type":"text","text":" "},{"type":"text","text":"multiple in-flight effects interleave with each other and affect the state of your application."},{"type":"text","text":" "},{"type":"text","text":"However, by leaving scheduling out of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" we get to test these aspects of our effects"},{"type":"text","text":" "},{"type":"text","text":"if we so desire, or we can ignore if we prefer. We have that flexibility."}]},{"type":"heading","anchor":"Thread-safety-checks","text":"Thread safety checks","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The store performs some basic thread safety checks in order to help catch mistakes. Stores"},{"type":"text","text":" "},{"text":"constructed via the initializer ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","isActive":true},{"type":"text","text":" are assumed"},{"type":"text","text":" "},{"type":"text","text":"to run only on the main thread, and so a check is executed immediately to make sure that is the"},{"type":"text","text":" "},{"type":"text","text":"case. Further, all actions sent to the store and all scopes (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"type":"text","text":") of"},{"text":" ","type":"text"},{"type":"text","text":"the store are also checked to make sure that work is performed on the main thread."}]}],"kind":"content"}],"metadata":{"title":"Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","roleHeading":"Class","symbolKind":"class","externalID":"s:22ComposableArchitecture5StoreC","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"],"title":"State management"}],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"],"title":"Creating a store"},{"title":"Scoping stores","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"]},{"title":"Accessing state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)"]},{"title":"Sending actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"],"title":"Combine integration"},{"title":"UIKit integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreTask":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask","title":"StoreTask","abstract":[{"type":"text","text":"The type returned from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"text":" that represents the lifecycle of the effect","type":"text"},{"text":" ","type":"text"},{"text":"started from sending an action.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/storetask","navigatorTitle":[{"text":"StoreTask","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StoreTask"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store."}],"url":"\/documentation\/composablearchitecture\/store\/send(_:)","title":"send(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC6Actionq_mfp","text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:transaction:)":{"role":"symbol","kind":"symbol","abstract":[{"text":"Sends an action to the store with a given transaction.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","title":"send(_:transaction:)","url":"\/documentation\/composablearchitecture\/store\/send(_:transaction:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC6Actionq_mfp"},{"kind":"text","text":", "},{"text":"transaction","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Transaction","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI11TransactionV"},{"text":") -> ","kind":"text"},{"text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/init(initialState:reducer:withDependencies:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","url":"\/documentation\/composablearchitecture\/store\/init(initialstate:reducer:withdependencies:)","type":"topic","role":"symbol","title":"init(initialState:reducer:withDependencies:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialState"},{"text":": () -> ","kind":"text"},{"text":"R","preciseIdentifier":"s:22ComposableArchitecture5StoreC12initialState7reducer16withDependenciesACyxq_GxyXK_qd__yXEy0H016DependencyValuesVzcSgtc0E0Qyd__Rsz6ActionQyd__Rs_AA7ReducerRd__lufc1RL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC12initialState7reducer16withDependenciesACyxq_GxyXK_qd__yXEy0H016DependencyValuesVzcSgtc0E0Qyd__Rsz6ActionQyd__Rs_AA7ReducerRd__lufc1RL_qd__mfp","text":"R"},{"kind":"text","text":", "},{"text":"withDependencies","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?)","kind":"text"}],"abstract":[{"type":"text","text":"Initializes a store from an initial state and a reducer."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"title":"scope(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC5Statexmfp","kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF10ChildStateL_qd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"childAction"},{"kind":"text","text":": "},{"text":"ChildAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF11ChildActionL_qd_0_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture5StoreC6Actionq_mfp"},{"text":") -> ","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"ChildState","preciseIdentifier":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF10ChildStateL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF11ChildActionL_qd_0_mfp","text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","kind":"symbol","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StorePublisher","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/storepublisher","abstract":[{"text":"A publisher of store state.","type":"text"}],"title":"StorePublisher","kind":"symbol","navigatorTitle":[{"text":"StorePublisher","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","kind":"symbol"},"https://github.com/pointfreeco/combine-schedulers/blob/main/Sources/CombineSchedulers/UIScheduler.swift":{"title":"UIScheduler","type":"link","url":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","titleInlineContent":[{"type":"text","text":"UIScheduler"}],"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:animation:)":{"role":"symbol","kind":"symbol","abstract":[{"text":"Sends an action to the store with a given animation.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","title":"send(_:animation:)","url":"\/documentation\/composablearchitecture\/store\/send(_:animation:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture5StoreC6Actionq_mfp"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"animation"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation"},{"kind":"text","text":"?) -> "},{"text":"StoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"title":"withState(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"state","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC5Statexmfp","text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC9withStateyqd__qd__xXElF1RL_qd__mfp","text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC9withStateyqd__qd__xXElF1RL_qd__mfp","text":"R","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","abstract":[{"type":"text","text":"Calls the given closure with the current state of the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","url":"\/documentation\/composablearchitecture\/storeof","type":"topic","role":"symbol","title":"StoreOf","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"StoreOf","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to a store of a given reducer’s domain."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"title":"ifLet(then:else:)","abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"store","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF7WrappedL_qd__mfp","text":"Wrapped"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC6Actionq_mfp"},{"text":">) -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}]}}}