{"metadata":{"externalID":"s:12Dependencies16DependencyValuesV9mainQueue17CombineSchedulers12AnySchedulerVySo17OS_dispatch_queueC8DispatchE0I8TimeTypeVAiJE0I7OptionsVGvp","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mainQueue"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier","text":"AnySchedulerOf"},{"text":"<","kind":"text"},{"text":"DispatchQueue","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"},{"kind":"text","text":">"}],"title":"mainQueue","roleHeading":"Instance Property","extendedModule":"Dependencies","role":"symbol","modules":[{"name":"ComposableArchitecture","relatedModules":["Dependencies"]}],"symbolKind":"property"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues\/mainQueue"},"abstract":[{"text":"The “main” queue.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"mainQueue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf"},{"text":"<","kind":"text"},{"text":"DispatchQueue","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"text":" ","kind":"text"},{"text":"set","kind":"keyword"},{"kind":"text","text":" }"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Introduce controllable timing to your features by using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependency","isActive":true},{"type":"text","text":" property wrapper"},{"type":"text","text":" "},{"type":"text","text":"with a key path to this property. The wrapped value is a Combine scheduler with the time"},{"type":"text","text":" "},{"type":"text","text":"type and options of a dispatch queue. By default, "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" will be provided,"},{"text":" ","type":"text"},{"type":"text","text":"with the exception of XCTest cases, in which an “unimplemented” scheduler will be provided."}]},{"inlineContent":[{"type":"text","text":"For example, you could introduce controllable timing to an observable object model that"},{"text":" ","type":"text"},{"type":"text","text":"counts the number of seconds it’s onscreen:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["final class TimerModel: ObservableObject {","  @Published var elapsed = 0","","  @Dependency(\\.mainQueue) var mainQueue","","  @MainActor","  func onAppear() async {","    for await _ in self.mainQueue.timer(interval: .seconds(1)) {","      self.elapsed += 1","    }","  }","}"]},{"inlineContent":[{"text":"And you could test this model by overriding its main queue with a test scheduler:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["func testFeature() {","  let mainQueue = DispatchQueue.test","  let model = withDependencies {","    $0.mainQueue = mainQueue.eraseToAnyScheduler()","  } operation: {","    TimerModel()","  }","","  Task { await model.onAppear() }","","  mainQueue.advance(by: .seconds(1))","  XCTAssertEqual(model.elapsed, 1)","","  mainQueue.advance(by: .seconds(4))","  XCTAssertEqual(model.elapsed, 5)","}"]}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/composablearchitecture\/dependencyvalues\/mainqueue"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependency":{"url":"\/documentation\/composablearchitecture\/dependency","navigatorTitle":[{"text":"Dependency","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A property wrapper for accessing dependencies.","type":"text"}],"role":"symbol","type":"topic","title":"Dependency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependency","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Dependency"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyValues/mainQueue":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues\/mainQueue","role":"symbol","url":"\/documentation\/composablearchitecture\/dependencyvalues\/mainqueue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"mainQueue"},{"kind":"text","text":": "},{"text":"AnySchedulerOf","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"The “main” queue.","type":"text"}],"type":"topic","kind":"symbol","title":"mainQueue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyValues":{"url":"\/documentation\/composablearchitecture\/dependencyvalues","navigatorTitle":[{"text":"DependencyValues","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A collection of dependencies that is globally available.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues","title":"DependencyValues","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DependencyValues"}]}}}