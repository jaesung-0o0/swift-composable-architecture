{"metadata":{"externalID":"s:12Dependencies16DependencyValuesV11mainRunLoop17CombineSchedulers12AnySchedulerVySo05NSRunF0C10FoundationE0J8TimeTypeVAiJE0J7OptionsVGvp","roleHeading":"Instance Property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mainRunLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"RunLoop","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSRunLoop"},{"text":">","kind":"text"}],"symbolKind":"property","role":"symbol","modules":[{"relatedModules":["Dependencies"],"name":"ComposableArchitecture"}],"title":"mainRunLoop","extendedModule":"Dependencies"},"abstract":[{"text":"The “main” run loop.","type":"text"}],"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/dependencyvalues\/mainrunloop"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mainRunLoop","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","text":"AnySchedulerOf"},{"kind":"text","text":"<"},{"text":"RunLoop","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSRunLoop"},{"kind":"text","text":"> { "},{"text":"get","kind":"keyword"},{"text":" ","kind":"text"},{"text":"set","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Introduce controllable timing to your features by using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependency","isActive":true},{"text":" property wrapper","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a key path to this property. The wrapped value is a Combine scheduler with the time"},{"type":"text","text":" "},{"text":"type and options of a run loop. By default, ","type":"text"},{"type":"codeVoice","code":"RunLoop.main"},{"text":" will be provided, with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exception of XCTest cases, in which an “unimplemented” scheduler will be provided."}]},{"inlineContent":[{"text":"For example, you could introduce controllable timing to an observable object model that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"counts the number of seconds it’s onscreen:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["struct TimerModel: ObservableObject {","  @Published var elapsed = 0","","  @Dependency(\\.mainRunLoop) var mainRunLoop","","  @MainActor","  func onAppear() async {","    for await _ in self.mainRunLoop.timer(interval: .seconds(1)) {","      self.elapsed += 1","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And you could test this model by overriding its main run loop with a test scheduler:"}]},{"syntax":null,"type":"codeListing","code":["func testFeature() {","  let mainRunLoop = RunLoop.test","  let model = withDependencies {","    $0.mainRunLoop = mainRunLoop","  } operation: {","    TimerModel()","  }","","  Task { await model.onAppear() }","","  mainRunLoop.advance(by: .seconds(1))","  XCTAssertEqual(model.elapsed, 1)","","  mainRunLoop.advance(by: .seconds(4))","  XCTAssertEqual(model.elapsed, 5)","}"]}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues\/mainRunLoop","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependency":{"url":"\/documentation\/composablearchitecture\/dependency","navigatorTitle":[{"text":"Dependency","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A property wrapper for accessing dependencies.","type":"text"}],"role":"symbol","type":"topic","title":"Dependency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependency","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Dependency"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyValues/mainRunLoop":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues\/mainRunLoop","role":"symbol","url":"\/documentation\/composablearchitecture\/dependencyvalues\/mainrunloop","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"mainRunLoop","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"RunLoop","preciseIdentifier":"c:objc(cs)NSRunLoop","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"The “main” run loop.","type":"text"}],"type":"topic","kind":"symbol","title":"mainRunLoop"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyValues":{"url":"\/documentation\/composablearchitecture\/dependencyvalues","navigatorTitle":[{"text":"DependencyValues","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A collection of dependencies that is globally available.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyValues","title":"DependencyValues","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DependencyValues"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]}}}