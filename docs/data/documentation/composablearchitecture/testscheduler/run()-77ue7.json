{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Runs the scheduler until it has no scheduled items left."}],"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/testscheduler\/run()-77ue7"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"method","roleHeading":"Instance Method","externalID":"s:17CombineSchedulers13TestSchedulerC3runyyF","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"kind":"text","text":"()"}],"title":"run()","modules":[{"name":"ComposableArchitecture"}],"role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"kind":"text","text":"()"}],"languages":["swift"]}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is useful for proving exhaustively that your publisher eventually completes"},{"text":" ","type":"text"},{"type":"text","text":"and does not run forever. For example, the following code will run an infinite loop forever"},{"type":"text","text":" "},{"type":"text","text":"because the timer never finishes:"}],"type":"paragraph"},{"syntax":"swift","code":["let scheduler = DispatchQueue.test","Publishers.Timer(every: .seconds(1), scheduler: scheduler)","  .autoconnect()","  .sink { _ in print($0) }","  .store(in: &cancellables)","","scheduler.run() \/\/ Will never complete"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you wanted to make sure that this publisher eventually completes you would need to"},{"type":"text","text":" "},{"type":"text","text":"chain on another operator that completes it when a certain condition is met. This can be"},{"text":" ","type":"text"},{"type":"text","text":"done in many ways, such as using "},{"code":"prefix","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let scheduler = DispatchQueue.test","Publishers.Timer(every: .seconds(1), scheduler: scheduler)","  .autoconnect()","  .prefix(3)","  .sink { _ in print($0) }","  .store(in: &cancellables)","","scheduler.run() \/\/ Prints 3 times and completes."]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler"]]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-77ue7"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/run()-77ue7":{"title":"run()","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Runs the scheduler until it has no scheduled items left."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-77ue7","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/testscheduler\/run()-77ue7","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"title":"TestScheduler","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler","navigatorTitle":[{"text":"TestScheduler","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}