{"kind":"symbol","abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"text":" ","type":"text"},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"extendedModule":"Combine","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers13TestSchedulerC","symbolKind":"method","role":"symbol","roleHeading":"Instance Method","title":"animation(_:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/testscheduler\/animation(_:)"]}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/animation(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"animation"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"animation","kind":"internalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI9AnimationV","kind":"typeIdentifier","text":"Animation"},{"text":"? = .default) -> ","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","text":"AnySchedulerOf","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"animation","content":[{"inlineContent":[{"text":"An animation to be performed.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, if you load some asynchronous data in an ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" and then"},{"text":" ","type":"text"},{"type":"text","text":"pipe its output into a "},{"code":"@Published","type":"codeVoice"},{"type":"text","text":" field, you may be tempted to use the "},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" "},{"type":"text","text":"operator:"}]},{"type":"codeListing","syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"]},{"inlineContent":[{"type":"text","text":"However, this prevents you from wrapping the "},{"code":"articles","type":"codeVoice"},{"text":" mutation in ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"text":" since","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is hidden from you in the "},{"code":".assign(to:)","type":"codeVoice"},{"type":"text","text":" operator. In this situation you can simply"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":".animation"},{"text":" operator on ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"text":" to transform ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" into a"},{"text":" ","type":"text"},{"type":"text","text":"scheduler that performs its work inside "},{"type":"codeVoice","code":"withAnimation"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Another common use case is when you have a Combine publisher made up of many publishers","type":"text"},{"type":"text","text":" "},{"text":"that have been merged or concatenated. You may want to animate the outputs of each of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"those publishers differently:"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/composablearchitecture\/testscheduler\/scheduler-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/animation(_:)":{"title":"animation(_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler\/animation(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"animation"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"type":"text","text":" "},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/animation(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"title":"TestScheduler","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler","navigatorTitle":[{"text":"TestScheduler","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]}}}