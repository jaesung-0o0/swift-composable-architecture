{"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"]]},"abstract":[{"text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/timer(interval:tolerance:options:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/testscheduler\/timer(interval:tolerance:options:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":">","kind":"text"}],"role":"symbol","modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"title":"timer(interval:tolerance:options:)","roleHeading":"Instance Method","symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE5timer8interval9tolerance7optionsScSy0B8TimeTypeQzGAI_6StrideQZ_AM0B7OptionsQzSgtF::SYNTHESIZED::s:17CombineSchedulers13TestSchedulerC","extendedModule":"Combine"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"timer","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":" = .zero, "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"? = nil) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":">"}]}]},{"parameters":[{"name":"interval","content":[{"type":"paragraph","inlineContent":[{"text":"The time interval on which to sleep between yielding the current instant in","type":"text"},{"type":"text","text":" "},{"text":"time. For example, a value of ","type":"text"},{"code":"0.5","type":"codeVoice"},{"text":" yields an instant approximately every half-second.","type":"text"}]}]},{"name":"tolerance","content":[{"inlineContent":[{"type":"text","text":"The allowed timing variance when emitting events. Defaults to "},{"code":"zero","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"options","content":[{"inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A stream that repeatedly yields the current time."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"If the task is cancelled, the sequence will terminate.","type":"text"}],"type":"paragraph"},{"code":["for await instant in scheduler.timer(interval: .seconds(1)) {","  print(\"now:\", instant)","}"],"syntax":null,"type":"codeListing"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/timer(interval:tolerance:options:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/timer(interval:tolerance:options:)","role":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler\/timer(interval:tolerance:options:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"timer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"interval","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval.","type":"text"}],"type":"topic","kind":"symbol","title":"timer(interval:tolerance:options:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"title":"TestScheduler","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler","navigatorTitle":[{"text":"TestScheduler","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/composablearchitecture\/testscheduler\/scheduler-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}