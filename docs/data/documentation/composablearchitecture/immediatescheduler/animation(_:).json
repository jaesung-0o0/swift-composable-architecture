{"sections":[],"metadata":{"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","title":"animation(_:)","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers18ImmediateSchedulerV","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"Combine","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/immediatescheduler\/animation(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/animation(_:)","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"animation","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation","kind":"typeIdentifier"},{"text":"? = .default) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An animation to be performed.","type":"text"}]}],"name":"animation"}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}],"type":"paragraph"}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you load some asynchronous data in an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" and then"},{"type":"text","text":" "},{"text":"pipe its output into a ","type":"text"},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" field, you may be tempted to use the "},{"code":".assign(to:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator:"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However, this prevents you from wrapping the ","type":"text"},{"type":"codeVoice","code":"articles"},{"type":"text","text":" mutation in "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" since"},{"text":" ","type":"text"},{"text":"that is hidden from you in the ","type":"text"},{"code":".assign(to:)","type":"codeVoice"},{"text":" operator. In this situation you can simply","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":".animation"},{"text":" operator on ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" to transform "},{"code":"DispatchQueue.main","type":"codeVoice"},{"type":"text","text":" into a"},{"type":"text","text":" "},{"type":"text","text":"scheduler that performs its work inside "},{"type":"codeVoice","code":"withAnimation"},{"text":":","type":"text"}]},{"syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another common use case is when you have a Combine publisher made up of many publishers"},{"type":"text","text":" "},{"type":"text","text":"that have been merged or concatenated. You may want to animate the outputs of each of"},{"type":"text","text":" "},{"text":"those publishers differently:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"]}],"kind":"content"}],"abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"code":"withAnimation","type":"codeVoice"},{"text":" block.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/animation(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"type":"text","text":" "},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"role":"symbol","title":"animation(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/immediatescheduler\/animation(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/animation(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","kind":"typeIdentifier","text":"Animation"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier","text":"AnySchedulerOf"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler":{"navigatorTitle":[{"text":"ImmediateScheduler","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/immediatescheduler","type":"topic","role":"symbol","abstract":[{"text":"A scheduler for performing synchronous actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler","title":"ImmediateScheduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ImmediateScheduler","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/immediatescheduler\/scheduler-implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]}}}