{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations"]]},"kind":"symbol","metadata":{"modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE5sleep3for9tolerance7optionsy0B8TimeType_6StrideQZ_AK0B7OptionsQzSgtYaKF::SYNTHESIZED::s:17CombineSchedulers18ImmediateSchedulerV","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sleep","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","extendedModule":"Combine","title":"sleep(for:tolerance:options:)"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/sleep(for:tolerance:options:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/immediatescheduler\/sleep(for:tolerance:options:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"duration"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":" = .zero, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"? = nil) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"languages":["swift"],"platforms":["iOS"]}]},{"parameters":[{"name":"duration","content":[{"type":"paragraph","inlineContent":[{"text":"The time interval on which to sleep between yielding.","type":"text"}]}]},{"name":"tolerance","content":[{"inlineContent":[{"text":"The allowed timing variance when emitting events. Defaults to ","type":"text"},{"type":"codeVoice","code":"zero"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"options","content":[{"type":"paragraph","inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"If the task is cancelled before the time ends, this function throws "},{"type":"codeVoice","code":"CancellationError"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function doesnâ€™t block the scheduler."}]},{"syntax":null,"code":["try await in scheduler.sleep(for: .seconds(1))"],"type":"codeListing"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Suspends the current task for at least the given duration."}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/immediatescheduler\/scheduler-implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler":{"navigatorTitle":[{"text":"ImmediateScheduler","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/immediatescheduler","type":"topic","role":"symbol","abstract":[{"text":"A scheduler for performing synchronous actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler","title":"ImmediateScheduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ImmediateScheduler","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/sleep(for:tolerance:options:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sleep","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"for"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/immediatescheduler\/sleep(for:tolerance:options:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/sleep(for:tolerance:options:)","abstract":[{"type":"text","text":"Suspends the current task for at least the given duration."}],"kind":"symbol","title":"sleep(for:tolerance:options:)","type":"topic"}}}