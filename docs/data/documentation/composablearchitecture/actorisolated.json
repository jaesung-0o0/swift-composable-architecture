{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"},"metadata":{"role":"symbol","title":"ActorIsolated","navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ActorIsolated","kind":"identifier"}],"externalID":"s:17ConcurrencyExtras13ActorIsolatedC","roleHeading":"Class","symbolKind":"class","modules":[{"name":"ComposableArchitecture"}]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/ScA","doc:\/\/ComposableArchitecture\/12_Concurrency8AnyActorP"],"type":"conformsTo"}],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/value"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-28kvq","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-2pf03"]},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/Actor-Implementations"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ActorIsolated","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">"}]}]},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is most useful when writing tests for when you want to inspect what happens inside an"},{"type":"text","text":" "},{"type":"text","text":"async operation."}]},{"inlineContent":[{"type":"text","text":"For example, suppose you have a feature such that when a button is tapped you track some"},{"text":" ","type":"text"},{"type":"text","text":"analytics:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct AnalyticsClient {","  var track: (String) async -> Void","}","","class FeatureModel: ObservableObject {","  let analytics: AnalyticsClient","  \/\/ ...","  func buttonTapped() {","    \/\/ ...","    await self.analytics.track(\"Button tapped\")","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Then, in tests we can construct an analytics client that appends events to a mutable array","type":"text"},{"text":" ","type":"text"},{"text":"rather than actually sending events to an analytics server. However, in order to do this in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"safe way we should use an actor, and "},{"code":"ActorIsolated","type":"codeVoice"},{"type":"text","text":" makes this easy:"}]},{"syntax":"swift","type":"codeListing","code":["func testAnalytics() async {","  let events = ActorIsolated<[String]>([])","  let analytics = AnalyticsClient(","    track: { event in await events.withValue { $0.append(event) } }","  )","  let model = FeatureModel(analytics: analytics)","  model.buttonTapped()","  await events.withValue {","    XCTAssertEqual($0, [\"Button tapped\"])","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To synchronously isolate a value, see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/LockIsolated","isActive":true},{"text":".","type":"text"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/actorisolated"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/value":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"The actor-isolated value."}],"url":"\/documentation\/composablearchitecture\/actorisolated\/value","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/value","title":"value","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/withValue(_:)-28kvq":{"title":"withValue(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-28kvq","type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/actorisolated\/withvalue(_:)-28kvq","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withValue","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/withValue(_:)-2pf03":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/withValue(_:)-2pf03","url":"\/documentation\/composablearchitecture\/actorisolated\/withvalue(_:)-2pf03","type":"topic","role":"symbol","title":"withValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withValue","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"kind":"symbol"},"doc://ComposableArchitecture/ScA":{"identifier":"doc:\/\/ComposableArchitecture\/ScA","type":"unresolvable","title":"_Concurrency.Actor"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/init(_:)":{"role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"kind":"symbol","title":"init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/init(_:)","url":"\/documentation\/composablearchitecture\/actorisolated\/init(_:)","abstract":[{"text":"Initializes actor-isolated state around a value.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"url":"\/documentation\/composablearchitecture\/actorisolated","role":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"title":"ActorIsolated","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/LockIsolated":{"url":"\/documentation\/composablearchitecture\/lockisolated","role":"symbol","abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value with a lock."}],"navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}],"title":"LockIsolated","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/LockIsolated","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"LockIsolated","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/Actor-Implementations":{"title":"Actor Implementations","url":"\/documentation\/composablearchitecture\/actorisolated\/actor-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/Actor-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated/setValue(_:)":{"title":"setValue(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"setValue","kind":"identifier"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/actorisolated\/setvalue(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated\/setValue(_:)","abstract":[{"text":"Overwrite the isolated value with a new value.","type":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/12_Concurrency8AnyActorP":{"identifier":"doc:\/\/ComposableArchitecture\/12_Concurrency8AnyActorP","type":"unresolvable","title":"_Concurrency.AnyActor"}}}