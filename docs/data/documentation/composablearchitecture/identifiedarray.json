{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"metadata":{"roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IdentifiedArray","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"modules":[{"name":"ComposableArchitecture"}],"title":"IdentifiedArray","symbolKind":"struct","role":"symbol","externalID":"s:21IdentifiedCollections0A5ArrayV"},"abstract":[{"type":"text","text":"An ordered collection of identifiable elements."}],"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/SK","doc:\/\/ComposableArchitecture\/Sl","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/s23CustomStringConvertibleP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/s25ExpressibleByArrayLiteralP","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/SM","doc:\/\/ComposableArchitecture\/Sk","doc:\/\/ComposableArchitecture\/Sm","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/ST"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedArray","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"text":", ","kind":"text"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to the standard "},{"type":"codeVoice","code":"Array"},{"text":", identified arrays maintain their elements in a particular","type":"text"},{"type":"text","text":" "},{"text":"user-specified order, and they support efficient random access traversal of their members.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, unlike "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", identified arrays introduce the ability to uniquely identify elements,"},{"type":"text","text":" "},{"text":"using a hash table to ensure that no two elements have the same identity, and to efficiently","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"look up elements corresponding to specific identifiers."}]},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","type":"reference"},{"type":"text","text":" is a useful alternative to "},{"type":"codeVoice","code":"Array"},{"text":" when you need to be able to efficiently","type":"text"},{"type":"text","text":" "},{"type":"text","text":"access unique elements by a stable identifier. It is also a useful alternative to "},{"code":"OrderedSet","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"where the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" requirement may be too strict.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can create an identified array with any element type that conforms to the ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"protocol."}]},{"code":["struct User: Identifiable { var id: String }","var users: IdentifiedArray = [User(id: \"u_42\"), User(id: \"u_1729\")]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or you can provide a key path that describes an element‚Äôs identity:","type":"text"}]},{"code":["var numbers = IdentifiedArray(id: \\Int.self)"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Motivation","anchor":"Motivation","level":1},{"type":"paragraph","inlineContent":[{"text":"When modeling a collection of elements in your application‚Äôs state, it is easy to reach for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"standard "},{"type":"codeVoice","code":"Array"},{"text":". However, as your application becomes more complex, this approach can break","type":"text"},{"type":"text","text":" "},{"text":"down in many ways, including accidentally making mutations to the wrong elements or even","type":"text"},{"type":"text","text":" "},{"text":"crashing. üò¨","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you were building a ‚ÄúTodos‚Äù application in SwiftUI, you might model an"},{"type":"text","text":" "},{"text":"individual todo in an identifiable value type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Todo: Identifiable {","  var description = \"\"","  let id: UUID","  var isComplete = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And you would hold an array of these todos as a published field in your app‚Äôs view model:"}]},{"type":"codeListing","code":["class TodosViewModel: ObservableObject {","  @Published var todos: [Todo] = []","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A view can render a list of these todos quite simply, and because they are identifiable we can"},{"text":" ","type":"text"},{"type":"text","text":"even omit the "},{"type":"codeVoice","code":"id"},{"text":" parameter of ","type":"text"},{"code":"List","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["struct TodosView: View {","  @ObservedObject var viewModel: TodosViewModel","","  var body: some View {","    List(self.viewModel.todos) { todo in","      ...","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If your deployment target is set to the latest version of SwiftUI, you may be tempted to pass","type":"text"},{"text":" ","type":"text"},{"text":"along a binding to the list so that each row is given mutable access to its todo. This will work","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for simple cases, but as soon as you introduce side effects, like API clients or analytics, or"},{"type":"text","text":" "},{"type":"text","text":"want to write unit tests, you must push this logic into a view model, instead. And that means"},{"type":"text","text":" "},{"type":"text","text":"each row must be able to communicate its actions back to the view model."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You could do so by introducing some endpoints on the view model, like when a row‚Äôs completed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"toggle is changed:"}]},{"type":"codeListing","code":["class TodosViewModel: ObservableObject {","  ...","  func todoCheckboxToggled(at id: Todo.ID) {","    guard let index = self.todos.firstIndex(where: { $0.id == id })","    else { return }","","    self.todos[index].isComplete.toggle()","    \/\/ TODO: Update todo on backend using an API client","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code is simple enough, but it can require a full traversal of the array to do its job."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Perhaps it would be more performant for a row to communicate its index back to the view model"},{"text":" ","type":"text"},{"type":"text","text":"instead, and then it could mutate the todo directly via its index subscript. But this makes the"},{"text":" ","type":"text"},{"text":"view more complicated:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["List(self.viewModel.todos.enumerated(), id: \\.element.id) { index, todo in","  ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This isn‚Äôt so bad, but at the moment it doesn‚Äôt even compile. An"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0312-indexed-and-enumerated-zip-collections.md"},{"text":" ","type":"text"},{"text":"may change that soon, but in the meantime ","type":"text"},{"type":"codeVoice","code":"List"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" must be passed a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":", which is perhaps most simply achieved by constructing another array:"}]},{"syntax":"swift","type":"codeListing","code":["List(Array(self.viewModel.todos.enumerated()), id: \\.element.id) { index, todo in","  ...","}"]},{"type":"paragraph","inlineContent":[{"text":"This compiles, but we‚Äôve just moved the performance problem to the view: every time this body is","type":"text"},{"type":"text","text":" "},{"text":"evaluated there‚Äôs the possibility a whole new array is being allocated.","type":"text"}]},{"inlineContent":[{"type":"text","text":"But even if it were possible to pass an enumerated collection directly to these views,"},{"type":"text","text":" "},{"type":"text","text":"identifying an element of mutable state by an index introduces a number of other problems."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"While it‚Äôs true that we can greatly simplify and improve the performance of any view model","type":"text"},{"type":"text","text":" "},{"type":"text","text":"methods that mutate an element through its index subscript:"}]},{"type":"codeListing","code":["class TodosViewModel: ObservableObject {","  ...","  func todoCheckboxToggled(at index: Int) {","    self.todos[index].isComplete.toggle()","    \/\/ TODO: sync with API","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Any asynchronous work that we add to this endpoint must take great care in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" using this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"index later on. An index is not a stable identifier: todos can be moved and removed at any time,"},{"type":"text","text":" "},{"type":"text","text":"and an index identifying ‚ÄúBuy lettuce‚Äù at one moment may identify ‚ÄúCall Mom‚Äù the next, or worse,"},{"type":"text","text":" "},{"text":"may be a completely invalid index and crash your application!","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class TodosViewModel: ObservableObject {","  ...","  func todoCheckboxToggled(at index: Int) async {","    self.todos[index].isComplete.toggle()","","    do {","      \/\/ ‚ùå Could update the wrong todo, or crash!","      self.todos[index] = try await self.apiClient.updateTodo(self.todos[index])","    } catch {","      \/\/ Handle error","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Whenever you need to access a particular todo after performing some asynchronous work, you","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"text":" do the work of traversing the array:","type":"text"}],"type":"paragraph"},{"code":["class TodosViewModel: ObservableObject {","  ...","  func todoCheckboxToggled(at index: Int) async {","    self.todos[index].isComplete.toggle()","","    \/\/ 1Ô∏è‚É£ Get a reference to the todo's id before kicking off the async work","    let id = self.todos[index].id","","    do {","      \/\/ 2Ô∏è‚É£ Update the todo on the backend","      let updatedTodo = try await self.apiClient.updateTodo(self.todos[index])","","      \/\/ 3Ô∏è‚É£ Find the updated index of the todo after the async work is done","      let updatedIndex = self.todos.firstIndex(where: { $0.id == id })!","","      \/\/ 4Ô∏è‚É£ Update the correct todo","      self.todos[updatedIndex] = updatedTodo","    } catch {","      \/\/ Handle error","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Identified collections are designed to solve all of these problems by providing data structures"},{"text":" ","type":"text"},{"text":"for working with collections of identifiable elements in an ergonomic, performant way.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Most of the time, you can simply swap an "},{"code":"Array","type":"codeVoice"},{"text":" out for an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import IdentifiedCollections","","class TodosViewModel: ObservableObject {","  @Published var todos: IdentifiedArrayOf<Todo> = []","  ...","}"]},{"inlineContent":[{"text":"Here we use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArrayOf","type":"reference"},{"text":" generic over ","type":"text"},{"code":"Todo","type":"codeVoice"},{"text":" as a shorthand for","type":"text"},{"type":"text","text":" "},{"code":"IdentifiedArray<Todo.ID, Todo>","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then you can mutate an element directly via its id-based subscript, no traversals needed,"},{"type":"text","text":" "},{"text":"even after asynchronous work is performed:","type":"text"}]},{"type":"codeListing","code":["class TodosViewModel: ObservableObject {","  ...","  func todoCheckboxToggled(at id: Todo.ID) async {","    self.todos[id: id]?.isComplete.toggle()","","    do {","      \/\/ 1Ô∏è‚É£ Update todo on backend and mutate it in the todos identified array.","      self.todos[id: id] = try await self.apiClient.updateTodo(self.todos[id: id]!)","    } catch {","      \/\/ Handle error","    }","","    \/\/ No step 2Ô∏è‚É£ üòÜ","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also simply pass the identified array to views like "},{"type":"codeVoice","code":"List"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ForEach"},{"text":" without any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"complications:"}]},{"syntax":"swift","code":["List(self.viewModel.todos) { todo in","  ...","}"],"type":"codeListing"},{"text":"Sequence and Collection Operations","anchor":"Sequence-and-Collection-Operations","level":1,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Identified arrays are random-access collections. Members are assigned integer indices, with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"first element always being at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Because ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","type":"reference","isActive":true},{"type":"text","text":" needs to keep its members unique, it cannot conform to the full"},{"type":"text","text":" "},{"code":"MutableCollection","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" protocols. Operations such as"},{"text":" ","type":"text"},{"code":"MutableCollection","type":"codeVoice"},{"type":"text","text":"‚Äôs subscript setter or "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":"‚Äôs "},{"type":"codeVoice","code":"replaceSubrange"},{"text":" ","type":"text"},{"text":"assume the ability to insert\/replace arbitrary elements in the collection, but allowing that","type":"text"},{"text":" ","type":"text"},{"text":"could lead to duplicate values.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"},{"type":"text","text":" is able to partially implement these two protocols; namely, there"},{"text":" ","type":"text"},{"type":"text","text":"is no issue with mutation operations that merely change the order of elements, or just remove"},{"type":"text","text":" "},{"text":"some subset of existing members:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Permutation operations from MutableCollection:","func swapAt(_ i: Int, _ j: Int)","func partition(by predicate: (Element) throws -> Bool) -> rethrows Int","func sort() where Element: Comparable","func sort(by predicate: (Element, Element) throws -> Bool) rethrows","func shuffle()","func shuffle<T: RandomNumberGenerator>(using generator: inout T)","func reverse()","","\/\/ Removal operations from RangeReplaceableCollection:","func removeAll(keepingCapacity: Bool = false)","func remove(at index: Int) -> Element","func removeSubrange(_ bounds: Range<Int>)","func removeLast() -> Element","func removeLast(_ n: Int)","func removeFirst() -> Element","func removeFirst(_ n: Int)","func removeAll(where shouldBeRemoved: (Element) throws -> Bool) rethrows"]},{"inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","isActive":true,"type":"reference"},{"text":" also implements ","type":"text"},{"type":"codeVoice","code":"reserveCapacity(_)"},{"type":"text","text":" from "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":", to","type":"text"},{"type":"text","text":" "},{"text":"allow for efficient insertion of a known number of elements. (However, unlike ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" and ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderedSet"},{"type":"text","text":" does not provide a "},{"code":"capacity","type":"codeVoice"},{"text":" property.)","type":"text"}],"type":"paragraph"},{"anchor":"Performance","text":"Performance","type":"heading","level":1},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type, the performance of hashing operations in"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"},{"text":" is highly sensitive to the quality of hashing implemented by the ","type":"text"},{"code":"ID","type":"codeVoice"},{"type":"text","text":" "},{"text":"type. Failing to correctly implement hashing can easily lead to unacceptable performance, with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the severity of the effect increasing with the size of the underlying hash table."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, if a certain set of elements all produce the same hash value, then hash table"},{"type":"text","text":" "},{"text":"lookups regress to searching an element in an unsorted array, i.e., a linear operation. To","type":"text"},{"type":"text","text":" "},{"text":"ensure hashed collection types exhibit their target performance, it is important to ensure that","type":"text"},{"type":"text","text":" "},{"text":"such collisions cannot be induced merely by adding a particular list of members to the set.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The easiest way to achieve this is to make sure ","type":"text"},{"type":"codeVoice","code":"ID"},{"type":"text","text":" implements hashing following "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"‚Äôs"},{"text":" ","type":"text"},{"type":"text","text":"documented best practices. The conformance must implement the "},{"code":"hash(into:)","type":"codeVoice"},{"text":" requirement, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"every bit of information that is compared in "},{"type":"codeVoice","code":"=="},{"text":" needs to be combined into the supplied","type":"text"},{"type":"text","text":" "},{"code":"Hasher","type":"codeVoice"},{"type":"text","text":" value. When used correctly, "},{"type":"codeVoice","code":"Hasher"},{"text":" produces high-quality, randomly seeded hash values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that prevent repeatable hash collisions."}]},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"ID"},{"type":"text","text":" implements "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" correctly, testing for membership in an ordered set is expected"},{"type":"text","text":" "},{"type":"text","text":"to take O(1) equality checks on average. Hash collisions can still occur organically, so the"},{"type":"text","text":" "},{"type":"text","text":"worst-case lookup performance is technically still O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":") (where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the size of the set);","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"however, long lookup chains are unlikely to occur in practice."}],"type":"paragraph"},{"anchor":"Implementation-Details","type":"heading","text":"Implementation Details","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An identified array consists of an ordered dictionary of id-element pairs. An element‚Äôs id"},{"type":"text","text":" "},{"type":"text","text":"should not be mutated in place, as it will drift from its associated dictionary key. Identified"},{"type":"text","text":" "},{"text":"array is designed to avoid this invariant, with the exception of its ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"id-based","type":"text"}]},{"text":" subscript.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Mutating an element‚Äôs id will result in a runtime error."}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/identifiedarray"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:)-4lqng","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:)-5jn74","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:uniquingIDsWith:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:uniquingIDsWith:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(id:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uncheckedUniqueElements:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uncheckedUniqueElements:id:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uniqueElements:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uniqueElements:id:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/elements","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/id","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/ids"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/append(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/contains(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/filter(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/index(id:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/insert(_:at:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/move(fromOffsets:toOffset:)-2dyjy","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(atOffsets:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(id:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeLast()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeLast(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeSubrange(_:)-7lj8j","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/reverse()-7810r","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/shuffle()-9lt83","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/shuffle(using:)-n7ld","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort()-36wqp","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort(by:)-36swl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/update(_:at:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/updateOrAppend(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/updateOrInsert(_:at:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/subscript(id:)"],"title":"Subscripts"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/BidirectionalCollection-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Collection-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Hashable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/MutableCollection-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/RandomAccessCollection-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/RangeReplaceableCollection-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Sequence-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible","type":"unresolvable"},"doc://ComposableArchitecture/SQ":{"identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Collection-Implementations":{"type":"topic","abstract":[],"title":"Collection Implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Collection-Implementations","url":"\/documentation\/composablearchitecture\/identifiedarray\/collection-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/filter(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/filter(_:)","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/filter(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"filter"},{"text":"((","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns a new array containing the elements of the array that satisfy the given predicate.","type":"text"}],"type":"topic","kind":"symbol","title":"filter(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/remove(id:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(id:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/remove(id:)","title":"remove(id:)","role":"symbol","abstract":[{"type":"text","text":"Removes the element identified by the given id from the array."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"https://github.com/apple/swift-evolution/blob/main/proposals/0312-indexed-and-enumerated-zip-collections.md":{"url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0312-indexed-and-enumerated-zip-collections.md","type":"link","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0312-indexed-and-enumerated-zip-collections.md","title":"evolution proposal","titleInlineContent":[{"text":"evolution proposal","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Sequence-Implementations":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Sequence-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/identifiedarray\/sequence-implementations","kind":"article","role":"collectionGroup","title":"Sequence Implementations"},"doc://ComposableArchitecture/Sm":{"title":"Swift.RangeReplaceableCollection","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/Sm"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:id:uniquingIDsWith:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:uniquingIDsWith:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:id:uniquingidswith:)","title":"init(_:id:uniquingIDsWith:)","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence, using a combining closure to"},{"text":" ","type":"text"},{"type":"text","text":"determine the element for any elements with duplicate identity."}],"kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"text":">, ","kind":"text"},{"text":"uniquingIDsWith","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/remove(atOffsets:)":{"url":"\/documentation\/composablearchitecture\/identifiedarray\/remove(atoffsets:)","role":"symbol","abstract":[{"text":"Removes all the elements at the specified offsets from the collection.","type":"text"}],"title":"remove(atOffsets:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(atOffsets:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"text":"(","kind":"text"},{"text":"atOffsets","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation8IndexSetV","text":"IndexSet","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/ST":{"identifier":"doc:\/\/ComposableArchitecture\/ST","type":"unresolvable","title":"Swift.Sequence"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/elements":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/elements","url":"\/documentation\/composablearchitecture\/identifiedarray\/elements","title":"elements","role":"symbol","abstract":[{"type":"text","text":"A read-only collection view for the elements contained in this array, as an "},{"type":"codeVoice","code":"Array"},{"text":".","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"elements"},{"text":": [","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(uniqueElements:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uniqueElements:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(uniqueelements:)","title":"init(uniqueElements:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"text":" is ","type":"text"},{"code":"Element.ID","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence."}],"kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"uniqueElements","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/reverse()-7810r":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/reverse()-7810r","url":"\/documentation\/composablearchitecture\/identifiedarray\/reverse()-7810r","title":"reverse()","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Reverses the elements of the array in place."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reverse","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/SK":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SK","title":"Swift.BidirectionalCollection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(uncheckedUniqueElements:id:)":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ID","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"title":"init(uncheckedUniqueElements:id:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(uncheckeduniqueelements:id:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"uncheckedUniqueElements"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence, which must not contain duplicate"},{"type":"text","text":" "},{"type":"text","text":"ids."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uncheckedUniqueElements:id:)"},"doc://ComposableArchitecture/Sk":{"type":"unresolvable","title":"Swift.RandomAccessCollection","identifier":"doc:\/\/ComposableArchitecture\/Sk"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Hashable-Implementations":{"title":"Hashable Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/hashable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Hashable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Equatable-Implementations":{"title":"Equatable Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/equatable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Equatable-Implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/s23CustomStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomStringConvertible","identifier":"doc:\/\/ComposableArchitecture\/s23CustomStringConvertibleP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","abstract":[{"type":"text","text":"An ordered collection of identifiable elements."}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"url":"\/documentation\/composablearchitecture\/identifiedarray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArray"}],"kind":"symbol","role":"symbol","title":"IdentifiedArray"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(uniqueElements:id:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"title":"init(uniqueElements:id:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(uniqueelements:id:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"uniqueElements","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":">)"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uniqueElements:id:)","abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/CustomReflectable-Implementations":{"title":"CustomReflectable Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/customreflectable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomReflectable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/ExpressibleByArrayLiteral-Implementations":{"title":"ExpressibleByArrayLiteral Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/expressiblebyarrayliteral-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/ExpressibleByArrayLiteral-Implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Encodable-Implementations":{"title":"Encodable Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/encodable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Encodable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/BidirectionalCollection-Implementations":{"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/BidirectionalCollection-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:)-5jn74":{"conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"init(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:)-5jn74","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:)-5jn74","abstract":[{"type":"text","text":"Creates a new array from an existing array. This is functionally the same as copying the value"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"elements"},{"type":"text","text":" into a new variable."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/RandomAccessCollection-Implementations":{"title":"RandomAccessCollection Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/identifiedarray\/randomaccesscollection-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/RandomAccessCollection-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/shuffle()-9lt83":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"ID","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"shuffle()","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/shuffle()-9lt83","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shuffle","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/shuffle()-9lt83","abstract":[{"text":"Shuffles the collection in place.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/index(id:)":{"title":"index(id:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/index(id:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"index","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Returns the index for the given id."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/index(id:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/removeLast(_:)":{"abstract":[{"type":"text","text":"Removes the last "},{"type":"codeVoice","code":"n"},{"type":"text","text":" element of the set."}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","url":"\/documentation\/composablearchitecture\/identifiedarray\/removelast(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"removeLast","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"removeLast(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeLast(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArrayOf":{"abstract":[{"type":"text","text":"A convenience type alias that specifies an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","isActive":true},{"type":"text","text":" by an element conforming to the"},{"text":" ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":" protocol."}],"url":"\/documentation\/composablearchitecture\/identifiedarrayof","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArrayOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedArrayOf","kind":"identifier"}],"title":"IdentifiedArrayOf","navigatorTitle":[{"text":"IdentifiedArrayOf","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:uniquingIDsWith:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"uniquingIDsWith","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:uniquingIDsWith:)","title":"init(_:uniquingIDsWith:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:uniquingidswith:)","role":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Element.ID"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","abstract":[{"text":"Creates a new array from the elements in the given sequence, using a combining closure to","type":"text"},{"text":" ","type":"text"},{"text":"determine the element for any elements with duplicate ids.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/move(fromOffsets:toOffset:)-2dyjy":{"role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/move(fromoffsets:tooffset:)-2dyjy","title":"move(fromOffsets:toOffset:)","abstract":[{"text":"Moves all the elements at the specified offsets to the specified destination offset,","type":"text"},{"text":" ","type":"text"},{"text":"preserving ordering.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"move","kind":"identifier"},{"kind":"text","text":"("},{"text":"fromOffsets","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"IndexSet","preciseIdentifier":"s:10Foundation8IndexSetV"},{"text":", ","kind":"text"},{"text":"toOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/move(fromOffsets:toOffset:)-2dyjy"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/removeSubrange(_:)-7lj8j":{"role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/removesubrange(_:)-7lj8j","title":"removeSubrange(_:)","kind":"symbol","abstract":[{"text":"Removes the specified subrange of elements from the collection.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"removeSubrange","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"R"},{"text":")","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeSubrange(_:)-7lj8j"},"doc://ComposableArchitecture/s25ExpressibleByArrayLiteralP":{"title":"Swift.ExpressibleByArrayLiteral","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s25ExpressibleByArrayLiteralP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/sort(by:)-36swl":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort(by:)-36swl","title":"sort(by:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/sort(by:)-36swl","role":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","abstract":[{"text":"Sorts the collection in place, using the given predicate as the comparison between elements.","type":"text"}]},"doc://ComposableArchitecture/SM":{"type":"unresolvable","title":"Swift.MutableCollection","identifier":"doc:\/\/ComposableArchitecture\/SM"},"doc://ComposableArchitecture/Sl":{"type":"unresolvable","title":"Swift.Collection","identifier":"doc:\/\/ComposableArchitecture\/Sl"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/updateOrInsert(_:at:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/updateOrInsert(_:at:)","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/updateorinsert(_:at:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"updateOrInsert"},{"kind":"text","text":"("},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> (originalMember"},{"text":": ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?, index"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Adds the given element into the set unconditionally, either inserting it at the specified"},{"text":" ","type":"text"},{"type":"text","text":"index, or replacing an existing value if it‚Äôs already present."}],"type":"topic","kind":"symbol","title":"updateOrInsert(_:at:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/id":{"title":"id","role":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/id","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"id","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/id"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(id:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(id:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/init(id:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":">)","kind":"text"}],"abstract":[{"type":"text","text":"Creates an empty array."}],"type":"topic","kind":"symbol","title":"init(id:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/update(_:at:)":{"role":"symbol","abstract":[{"type":"text","text":"Replace the member at the given index with a new value of the same identity."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/update(_:at:)","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ID","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/update(_:at:)","title":"update(_:at:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"update","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"}],"type":"topic"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/SE":{"title":"Swift.Encodable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SE"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/subscript(id:)":{"role":"symbol","abstract":[{"type":"text","text":"Accesses the value associated with the given id for reading and writing."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/subscript(id:)","title":"subscript(id:)","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomDebugStringConvertible-Implementations","url":"\/documentation\/composablearchitecture\/identifiedarray\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/Decodable-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/Decodable-Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/identifiedarray\/decodable-implementations","title":"Decodable Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/MutableCollection-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/MutableCollection-Implementations","url":"\/documentation\/composablearchitecture\/identifiedarray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"topic"},"doc://ComposableArchitecture/s17CustomReflectableP":{"title":"Swift.CustomReflectable","identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","type":"unresolvable"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/append(_:)":{"role":"symbol","abstract":[{"text":"Append a new member to the end of the array, if the array doesn‚Äôt already contain it.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/append(_:)","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/append(_:)","title":"append(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"append"},{"kind":"text","text":"("},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") -> (inserted"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", index"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/Se":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/Se","title":"Swift.Decodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/remove(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Removes the given element from the array."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/remove(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/remove(_:)","title":"remove(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remove"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/RangeReplaceableCollection-Implementations","url":"\/documentation\/composablearchitecture\/identifiedarray\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/updateOrAppend(_:)":{"role":"symbol","abstract":[{"text":"Adds the given element to the array unconditionally, either appending it to the array, or","type":"text"},{"text":" ","type":"text"},{"text":"replacing an existing value if it‚Äôs already present.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/updateOrAppend(_:)","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/updateorappend(_:)","title":"updateOrAppend(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"updateOrAppend","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/shuffle(using:)-n7ld":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/identifiedarray\/shuffle(using:)-n7ld","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shuffle"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"using"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ID","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"title":"shuffle(using:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/shuffle(using:)-n7ld","role":"symbol","abstract":[{"type":"text","text":"Shuffles the collection in place, using the given generator as a source for randomness."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/ids":{"url":"\/documentation\/composablearchitecture\/identifiedarray\/ids","type":"topic","abstract":[{"type":"text","text":"A read-only collection view for the ids contained in this array, as an "},{"type":"codeVoice","code":"OrderedSet"},{"type":"text","text":"."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/ids","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"ids"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:18OrderedCollections0A3SetV","text":"OrderedSet","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"ids"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/contains(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/contains(_:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/contains(_:)","abstract":[],"kind":"symbol","title":"contains(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"contains"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:id:)":{"role":"symbol","abstract":[],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:)","conformance":{"constraints":[{"code":"ID","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:id:)","title":"init(_:id:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":">)"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/removeLast()":{"role":"symbol","abstract":[{"type":"text","text":"Removes the last element of a non-empty array."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/removeLast()","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/removelast()","title":"removeLast()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"removeLast"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/sort()-36wqp":{"role":"symbol","abstract":[{"text":"Sorts the set in place.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort()-36wqp","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"ID","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/sort()-36wqp","title":"sort()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"text":"()","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/CustomStringConvertible-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/CustomStringConvertible-Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/identifiedarray\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/insert(_:at:)":{"role":"symbol","abstract":[{"type":"text","text":"Insert a new member to this array at the specified index, if the array doesn‚Äôt already contain"},{"type":"text","text":" "},{"type":"text","text":"it."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/insert(_:at:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/insert(_:at:)","title":"insert(_:at:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"insert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":") -> (inserted","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", index","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(uncheckedUniqueElements:)":{"role":"symbol","abstract":[{"text":"Creates a new array from the elements in the given sequence, which must not contain duplicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ids."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(uncheckedUniqueElements:)","kind":"symbol","conformance":{"constraints":[{"code":"ID","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Element.ID","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/init(uncheckeduniqueelements:)","title":"init(uncheckedUniqueElements:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"uncheckedUniqueElements"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"text":")","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:)-4lqng":{"role":"symbol","abstract":[{"text":"Creates a new set from an existing slice of another dictionary.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:)-4lqng","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:)-4lqng","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV11SubSequencea"},{"kind":"text","text":")"}],"type":"topic"}}}