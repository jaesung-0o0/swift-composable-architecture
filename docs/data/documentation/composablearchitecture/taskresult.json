{"metadata":{"title":"TaskResult","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskResult","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"role":"symbol","roleHeading":"Enumeration","externalID":"s:22ComposableArchitecture10TaskResultO","symbolKind":"enum","modules":[{"name":"ComposableArchitecture"}]},"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"platforms":["iOS"]}]},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This type is needed because Swift’s concurrency tools can only express untyped errors, such as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"async"},{"text":" functions and ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"type":"text","text":" "},{"code":"Result<_, Error>","type":"codeVoice"},{"text":". However, ","type":"text"},{"code":"Result<_, Error>","type":"codeVoice"},{"type":"text","text":" is never "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" since "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"text":", and equatability is very important for testing in the Composable Architecture. By","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defining our own type we get the ability to recover equatability in most situations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If someday Swift gets typed ","type":"text"},{"type":"codeVoice","code":"throws"},{"type":"text","text":", then we can eliminate this type and rely solely on"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"You typically use this type as the payload of an action which receives a response from an"},{"type":"text","text":" "},{"text":"effect:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"]},{"inlineContent":[{"text":"Then you can model your dependency as using simple ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" and ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" functionality:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"]},{"inlineContent":[{"type":"text","text":"And finally you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","isActive":true},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"type":"text","text":"effect in the reducer that invokes the "},{"type":"codeVoice","code":"numberFact"},{"text":" endpoint and wraps its response in a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" by using its catching initializer, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"text":"Equality","anchor":"Equality","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The biggest downside to using an untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" in a result type is that the result will not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"text":" ","type":"text"},{"text":"that use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" in their actions with the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":"."}]},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" does extra work to try to maintain equatability when possible. If the underlying","type":"text"},{"text":" ","type":"text"},{"text":"type masked by the ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", then it will use that "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance"},{"type":"text","text":" "},{"type":"text","text":"on two failures. Luckily, most errors thrown by Apple’s frameworks are already equatable, and"},{"type":"text","text":" "},{"type":"text","text":"because errors are typically simple value types, it is usually possible to have the compiler"},{"text":" ","type":"text"},{"type":"text","text":"synthesize a conformance for you."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you are testing the unhappy path of a feature that feeds a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" back into the"},{"text":" ","type":"text"},{"type":"text","text":"system, be sure to conform the error to equatable, or the test will fail:"}]},{"code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ 🛑","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ 🛑 'RefreshFailure' is not equatable"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get a passing test, explicitly conform your custom error to the "},{"type":"codeVoice","code":"Equatable"},{"text":" protocol:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ 👈","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ✅","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","interfaceLanguage":"swift"},"topicSections":[{"title":"Representing a task result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"title":"Converting a throwing expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"title":"Accessing a result’s value"},{"title":"Transforming results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"seeAlsoSections":[{"title":"Creating an effect","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"title":"TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"url":"\/documentation\/composablearchitecture\/effect\/none","kind":"symbol","abstract":[{"text":"아무것도 하지않고 즉각 종료하는 ","type":"text"},{"type":"codeVoice","code":"Effect"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"kind":"text","text":": `Self`"}],"title":"none","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"title":"init(catching:)","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"text":" ","type":"text"},{"type":"text","text":"value as a success, or any thrown error as a failure."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"catching","kind":"externalParam"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp","kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"abstract":[{"type":"text","text":"A success, storing a "},{"type":"codeVoice","code":"Success"},{"type":"text","text":" value."}],"url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","title":"TaskResult.success(_:)","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"success"},{"text":"(","kind":"text"},{"text":"Success","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"abstract":[{"type":"text","text":"Returns the success value as a throwing property."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","title":"value","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Success","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp"}],"url":"\/documentation\/composablearchitecture\/taskresult\/value"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","title":"flatMap(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation and"},{"text":" ","type":"text"},{"type":"text","text":"unwrapping the produced result."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewSuccess"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp","text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier","text":"TaskResult"},{"text":"<","kind":"text"},{"text":"NewSuccess","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7flatMapyACyqd__GAExXEs8SendableRd__lF10NewSuccessL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewSuccess","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7flatMapyACyqd__GAExXEs8SendableRd__lF10NewSuccessL_qd__mfp"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","title":"map(_:)","abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"kind":"text","text":"<"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp","kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO3mapyACyqd__Gqd__xXEs8SendableRd__lF10NewSuccessL_qd__mfp","text":"NewSuccess","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO3mapyACyqd__Gqd__xXEs8SendableRd__lF10NewSuccessL_qd__mfp"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","title":"init(_:)","abstract":[{"text":"Transforms a ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":", erasing its "},{"type":"codeVoice","code":"Failure"},{"text":" to ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Failure","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO7Successxmfp","kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"text":"Failure","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultOyACyxGs0D0Oyxqd__Gcs5ErrorRd__lufc7FailureL_qd__mfp"},{"kind":"text","text":">)"}]},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"type":"topic","title":"Equatable Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"abstract":[{"type":"text","text":"A failure, storing an error."}],"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","title":"TaskResult.failure(_:)","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"failure","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","type":"topic","role":"collectionGroup","title":"Hashable Implementations","abstract":[],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"abstract":[{"text":"들어온 액션을 즉각 방출하는 ","type":"text"},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"send(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"abstract":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" 만 가지고 더 간단하게 "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" 객체를 생성하기 위한 "},{"code":"typealias","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/composablearchitecture\/effectof","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectOf"}],"title":"EffectOf","navigatorTitle":[{"text":"EffectOf","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"abstract":[{"type":"text","text":"비동기의 단위 작업을 감싼 "},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"title":"run(priority:operation:catch:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"send"},{"kind":"text","text":": "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"send","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","kind":"symbol"},"doc://ComposableArchitecture/SH":{"identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"}}}