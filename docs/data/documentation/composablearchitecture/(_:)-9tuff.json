{"variants":[{"paths":["\/documentation\/composablearchitecture\/\/(_:)-9tuff"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns a function that can attempt to extract associated values from the given enum case"},{"type":"text","text":" "},{"type":"text","text":"initializer."}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"\/"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"internalParam","text":"embed"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> (","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}]},{"parameters":[{"name":"embed","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An enum case initializer."}]}]}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A function that can attempt to extract associated values from an enum.","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this operator to create new transform functions to pass to higher-order methods like"},{"type":"text","text":" "},{"code":"compactMap","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["[Result<Int, Error>.success(42), .failure(MyError()]","  .compactMap(\/Result.success)","\/\/ [42]"],"type":"codeListing","syntax":"swift"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This operator is only intended to be used with enum case initializers. Its behavior is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"otherwise undefined."}]}],"style":"note","type":"aside"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-9tuff","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Operator","title":"\/(_:)","symbolKind":"op","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:9CasePaths1dopyq_Sgxcxq_cr0_lF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"Root","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Value","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> (","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture//(_:)-9tuff":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/\/(_:)-9tuff","url":"\/documentation\/composablearchitecture\/\/(_:)-9tuff","title":"\/(_:)","role":"symbol","abstract":[{"text":"Returns a function that can attempt to extract associated values from the given enum case","type":"text"},{"text":" ","type":"text"},{"text":"initializer.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"\/","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"Root","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"text":"Root","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":"?","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}