{"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"generated":true,"title":"Integrations"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Adopting Swift concurrency"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"text":" ","type":"text"},{"text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"text":" ","type":"text"},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}]},{"inlineContent":[{"text":"There primary way to create an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" in the library is via"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","isActive":true},{"type":"text","text":". It takes a "},{"code":"@Sendable","type":"codeVoice"},{"text":", asynchronous closure,","type":"text"},{"type":"text","text":" "},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only capture "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" variables that are bound with "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"text":"types are simply not allowed to be passed to ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}],"type":"paragraph"},{"inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"type":"text","text":" "},{"text":"within an effect.","type":"text"}],"type":"paragraph"},{"anchor":"Accessing-state-in-an-effect","type":"heading","text":"Accessing state in an effect","level":3},{"inlineContent":[{"text":"Reducers are executed with a mutable, ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" state variable, and such variables cannot be accessed","type":"text"},{"type":"text","text":" "},{"text":"from within ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .buttonTapped:","      return .run { send in","        try await Task.sleep(for: .seconds(1))","        await send(.delayed(state.count))","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","        \/\/    not allowed in concurrently-executing code","      }","","      \/\/ ...","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To work around this you must explicitly capture the state as an immutable value for the scope of the","type":"text"},{"text":" ","type":"text"},{"text":"closure:","type":"text"}]},{"code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"type":"text","text":" "},{"type":"text","text":"variable name for the capture:"}],"type":"paragraph"},{"code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  return .delayed(count)  \/\/ ✅","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Accessing-dependencies-in-an-effect","type":"heading","level":3,"text":"Accessing dependencies in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"text":" ","type":"text"},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"text":"asynchronous and concurrent contexts, and so must be ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"type":"text","text":" "},{"text":"library. In particular, when extending ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"text":" to provide the computed property:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If "},{"code":"FactClient","type":"codeVoice"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"text":", for whatever reason, you will get a warning in the ","type":"text"},{"type":"codeVoice","code":"get"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"set"},{"text":" lines:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":". This usually just means making sure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"text":" ","type":"text"},{"text":"endpoints should be annotated as ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"text":"This will restrict the kinds of closures that can be used when constructing ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"text":" values, thus","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"code":"FactClient","type":"codeVoice"},{"type":"text","text":" sendable itself."}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","type":"topic","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","role":"collectionGroup","title":"UIKit Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"abstract":[{"type":"text","text":"비동기의 단위 작업을 감싼 "},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"title":"run(priority:operation:catch:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"send"},{"kind":"text","text":": "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"send","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"}}}