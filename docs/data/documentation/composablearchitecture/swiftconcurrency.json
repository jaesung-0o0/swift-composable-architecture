{"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"Adopting Swift concurrency","roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There primary way to create an "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"type":"text","text":" in the library is via"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"text":", asynchronous closure,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which restricts the types of closures you can use for your effects. In particular, the closure can"},{"type":"text","text":" "},{"type":"text","text":"only capture "},{"type":"codeVoice","code":"Sendable"},{"text":" variables that are bound with ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":". Mutable variables and non-"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" "},{"text":"types are simply not allowed to be passed to ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closures.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"type":"text","text":" "},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within an effect."}]},{"level":3,"type":"heading","text":"Accessing state in an effect","anchor":"Accessing-state-in-an-effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"code":"inout","type":"codeVoice"},{"text":" state variable, and such variables cannot be accessed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures:"}]},{"code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .buttonTapped:","      return .run { send in","        try await Task.sleep(for: .seconds(1))","        await send(.delayed(state.count))","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","        \/\/    not allowed in concurrently-executing code","      }","","      \/\/ ...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"text":"closure:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"]},{"inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"text":" ","type":"text"},{"text":"variable name for the capture:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  return .delayed(count)  \/\/ ✅","}"],"type":"codeListing"},{"type":"heading","anchor":"Accessing-dependencies-in-an-effect","text":"Accessing dependencies in an effect","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"text":" ","type":"text"},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"text":"asynchronous and concurrent contexts, and so must be ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"text":" ","type":"text"},{"type":"text","text":"library. In particular, when extending "},{"code":"DependencyValues","type":"codeVoice"},{"text":" to provide the computed property:","type":"text"}],"type":"paragraph"},{"code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"text":", for whatever reason, you will get a warning in the ","type":"text"},{"code":"get","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"set","type":"codeVoice"},{"text":" lines:","type":"text"}]},{"syntax":null,"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"type":"text","text":" "},{"text":"that the interface type only holds onto ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" data, and in particular, any closure-based","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}]},{"code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"text":" values, thus","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"generated":true}],"kind":"article","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"title":"run(priority:operation:catch:fileID:line:)","type":"topic","abstract":[{"text":"비동기의 단위 작업을 감싼 ","type":"text"},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","kind":"typeIdentifier","text":"TaskPriority"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","kind":"article","type":"topic","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"title":"UIKit Integration","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"type":"topic"}}}