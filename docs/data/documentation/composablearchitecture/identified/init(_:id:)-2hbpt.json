{"abstract":[{"type":"text","text":"Initializes an identified value from a given value and a function that can return a hashable"},{"type":"text","text":" "},{"type":"text","text":"identifier from the value."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ID","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"value","content":[{"inlineContent":[{"text":"A value.","type":"text"}],"type":"paragraph"}]},{"name":"id","content":[{"inlineContent":[{"type":"text","text":"A key path from the value to a hashable identifier."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"code":[" Identified(uuid, id: \\.self)"],"type":"codeListing","syntax":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/identified\/init(_:id:)-2hbpt"]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":">)","kind":"text"}],"roleHeading":"Initializer","externalID":"s:21IdentifiedCollections0A0V_2idACyxq_Gq__s7KeyPathCyq_xGtcfc","title":"init(_:id:)","role":"symbol","symbolKind":"init"},"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified\/init(_:id:)-2hbpt","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Identified":{"navigatorTitle":[{"kind":"identifier","text":"Identified"}],"title":"Identified","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Identified","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/identified","abstract":[{"text":"A wrapper around a value and a hashable identifier that conforms to identifiable.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Identified/init(_:id:)-2hbpt":{"abstract":[{"type":"text","text":"Initializes an identified value from a given value and a function that can return a hashable"},{"text":" ","type":"text"},{"type":"text","text":"identifier from the value."}],"url":"\/documentation\/composablearchitecture\/identified\/init(_:id:)-2hbpt","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Identified\/init(_:id:)-2hbpt","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":">)"}],"title":"init(_:id:)"}}}