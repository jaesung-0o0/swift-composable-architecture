{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"topicSections":[{"title":"Creating a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:file:line:)-3zio1"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor"],"title":"Configuring a test store"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-6m8t6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-7md3m","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"],"title":"Testing a reducer"},{"title":"Methods for skipping actions and effects","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)"]},{"title":"Accessing state","abstract":[{"type":"text","text":"While the most common way of interacting with a test store’s state is via its"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso"},{"type":"text","text":" methods, you may"},{"type":"text","text":" "},{"text":"also access it directly throughout a test.","type":"text"}],"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)"]},{"title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This object aids in writing expressive and exhaustive tests for features built in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each step"},{"type":"text","text":" "},{"text":"of the way you must assert exactly how state changed, and how effect emissions were fed back","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the dedicated "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","isActive":true},{"text":" article for detailed information on testing.","type":"text"}]},{"level":2,"type":"heading","text":"Exhaustive testing","anchor":"Exhaustive-testing"},{"type":"paragraph","inlineContent":[{"text":"By default, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" requires you to exhaustively prove how your feature evolves from"},{"text":" ","type":"text"},{"text":"sending use actions and receiving actions from effects. There are multiple ways the test store","type":"text"},{"text":" ","type":"text"},{"text":"forces you to do this:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"After each action is sent you must describe precisely how the state changed from before the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action was sent to after it was sent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If even the smallest piece of data differs the test will fail. This guarantees that you are"},{"type":"text","text":" "},{"type":"text","text":"proving you know precisely how the state of the system changes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect sends an"},{"type":"text","text":" "},{"type":"text","text":"action back into the system, you "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" explicitly assert that you expect to receive that"},{"text":" ","type":"text"},{"type":"text","text":"action from the effect, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" you must assert how state changed as a result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect actions, the test will"},{"type":"text","text":" "},{"text":"fail. This guarantees that you do not accidentally forget about an effect action, and that","type":"text"},{"text":" ","type":"text"},{"text":"the sequence of steps you are describing will mimic how the application behaves in reality.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"All effects must complete by the time the test case has finished running, and all effect","type":"text"},{"type":"text","text":" "},{"text":"actions must be asserted on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If at the end of the assertion there is still an in-flight effect running or an unreceived","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action, the assertion will fail. This helps exhaustively prove that you know what effects"},{"text":" ","type":"text"},{"text":"are in flight and forces you to prove that effects will not cause any future changes to your","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]}]}]},{"inlineContent":[{"text":"For example, given a simple counter reducer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Counter: Reducer {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"One can assert against its behavior over time:","type":"text"}]},{"syntax":"swift","code":["@MainActor","class CounterTests: XCTestCase {","  func testCounter() async {","    let store = TestStore(","      \/\/ Given: a counter state of 0","      initialState: Counter.State(count: 0),","    ) {","      Counter()","    }","","    \/\/ When: the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then: the count should be 1","      $0.count = 1","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the trailing closure of "},{"code":".send(.incrementButtonTapped)","type":"codeVoice"},{"text":" we are given a single","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value to"},{"text":" ","type":"text"},{"text":"match the state after the action was sent. In this case the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" field changes to "},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the change made in the closure does not reflect reality, you will get a test failure with a","type":"text"},{"text":" ","type":"text"},{"text":"nicely formatted failure message letting you know exactly what went wrong:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["await store.send(.incrementButtonTapped) {","  $0.count = 42","}"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}]},{"code":[" TestStoreFailureTests.State(","-   count: 42","+   count: 1"," )"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}]}],"name":"❌ Failure","type":"aside","style":"note"},{"inlineContent":[{"text":"For a more complex example, consider the following bare-bones search feature that uses a clock","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and cancel token to debounce requests:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Search: Reducer {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action: Equatable {","    case queryChanged(String)","    case searchResponse(TaskResult<[String]>)","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.continuousClock) var clock","  private enum CancelID { case search }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let .queryChanged(query):","      state.query = query","      return .run { send in","        try await self.clock.sleep(for: 0.5)","","        guard let results = try? await self.apiClient.search(query)","        else { return }","","        await send(.response(results))","      }","      .cancellable(id: CancelID.search, cancelInFlight: true)","","    case let .searchResponse(.success(results)):","      state.results = results","      return .none","","    case .searchResponse(.failure):","      \/\/ Do error handling here.","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by overriding the "},{"code":"apiClient","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continuousClock"},{"type":"text","text":" dependencies with"},{"type":"text","text":" "},{"text":"values that are fully controlled and deterministic:","type":"text"}]},{"syntax":"swift","code":["\/\/ Create a test clock to control the timing of effects","let clock = TestClock()","","let store = TestStore(initialState: Search.State()) {","  Search()","} withDependencies: {","  \/\/ Override the clock dependency with the test clock","  $0.continuousClock = clock","","  \/\/ Simulate a search response with one item","  $0.apiClient.search = { _ in","    [\"Composable Architecture\"]","  }",")","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the clock by enough to get past the debounce","await clock.advance(by: 0.5)","","\/\/ Assert that the expected response is received","await store.receive(.searchResponse(.success([\"Composable Architecture\"]))) {","  $0.results = [\"Composable Architecture\"]","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This test is proving that when the search query changes some search responses are delivered and","type":"text"},{"text":" ","type":"text"},{"text":"state updates accordingly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If we did not assert that the ","type":"text"},{"code":"searchResponse","type":"codeVoice"},{"text":" action was received, we would get the following","type":"text"},{"type":"text","text":" "},{"text":"test failure:","type":"text"}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The store received 1 unexpected action after this one: …"}],"type":"paragraph"},{"syntax":null,"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"type":"codeListing"}],"name":"❌ Failure"},{"inlineContent":[{"text":"This helpfully lets us know that we have no asserted on everything that happened in the feature,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which could be hiding a bug from us."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if we had sent another action before handling the effect’s action we would have also gotten"},{"text":" ","type":"text"},{"type":"text","text":"a test failure:"}]},{"type":"aside","style":"note","name":"❌ Failure","content":[{"type":"paragraph","inlineContent":[{"text":"Must handle 1 received action before sending an action: …","type":"text"}]},{"syntax":null,"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"type":"codeListing"}]},{"inlineContent":[{"text":"All of these types of failures help you prove that you know exactly how your feature evolves as","type":"text"},{"type":"text","text":" "},{"text":"actions are sent into the system. If the library did not produce a test failure in these","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"situations it could be hiding subtle bugs in your code. For example, when the user clears the"},{"type":"text","text":" "},{"text":"search query you probably expect that the results are cleared and no search request is executed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"since there is no query. This can be done like so:"}],"type":"paragraph"},{"type":"codeListing","code":["await store.send(.queryChanged(\"\")) {","  $0.query = \"\"","  $0.results = []","}","","\/\/ No need to perform `store.receive` since we do not expect a search","\/\/ effect to execute."],"syntax":"swift"},{"inlineContent":[{"text":"But, if in the future a bug is introduced causing a search request to be executed even when the","type":"text"},{"text":" ","type":"text"},{"text":"query is empty, you will get a test failure because a new effect is being created that is not","type":"text"},{"type":"text","text":" "},{"text":"being asserted on. This is the power of exhaustive testing.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Non-exhaustive testing","anchor":"Non-exhaustive-testing","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While exhaustive testing can be powerful, it can also be a nuisance, especially when testing how"},{"text":" ","type":"text"},{"type":"text","text":"many features integrate together. This is why sometimes you may want to selectively test in a"},{"text":" ","type":"text"},{"type":"text","text":"non-exhaustive style."}]},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"The concept of “non-exhaustive test store” was first introduced by","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/www.merowing.info","type":"reference"},{"type":"text","text":" in a "},{"type":"reference","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","isActive":true},{"text":" and","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/vimeo.com\/751173570","type":"reference"},{"text":", and then later became integrated into the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"core library."}]}],"style":"tip","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Test stores are exhaustive by default, which means you must assert on every state change, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how ever effect feeds data back into the system, and you must make sure that all effects"},{"text":" ","type":"text"},{"text":"complete before the test is finished. To turn off exhaustivity you can set ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","isActive":true},{"text":". When that is done the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":"’s behavior changes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The trailing closures of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true},{"type":"text","text":" no longer need to assert on all state"},{"type":"text","text":" "},{"type":"text","text":"changes. They can assert on any subset of changes, and only if they make an incorrect"},{"type":"text","text":" "},{"text":"mutation will a test failure be reported.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"methods are allowed to be called even when actions have been received from effects that have"},{"text":" ","type":"text"},{"text":"not been asserted on yet. Any pending actions will be cleared.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Tests are allowed to finish with unasserted, received actions and in-flight effects. No test","type":"text"},{"type":"text","text":" "},{"text":"failures will be reported.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Non-exhaustive stores can be configured to report skipped assertions by configuring","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"text":". When set to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" the test store will have the"},{"type":"text","text":" "},{"text":"added behavior that any unasserted change causes a grey, informational box to appear next to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each assertion detailing the changes that were not asserted against. This allows you to see what"},{"text":" ","type":"text"},{"type":"text","text":"information you are choosing to ignore without causing a test failure. It can be useful in"},{"type":"text","text":" "},{"type":"text","text":"tracking down bugs that happen in production but that aren’t currently detected in tests."}]},{"type":"paragraph","inlineContent":[{"text":"This style of testing is most useful for testing the integration of multiple features where you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"want to focus on just a certain slice of the behavior. Exhaustive testing can still be important"},{"type":"text","text":" "},{"type":"text","text":"to use for leaf node features, where you truly do want to assert on everything happening inside"},{"type":"text","text":" "},{"type":"text","text":"the feature."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The","type":"text"},{"type":"text","text":" "},{"text":"user can fill in some data on the screen, then tap the “Submit” button, and then a series of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"events happens to  log the user in. Once the user is logged in, the 3rd tab switches from a"},{"text":" ","type":"text"},{"type":"text","text":"login screen to a profile screen, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" the selected tab switches to the first tab, which is an"},{"text":" ","type":"text"},{"text":"activity screen.","type":"text"}]},{"inlineContent":[{"text":"When writing tests for the login feature we will want to do that in the exhaustive style so that","type":"text"},{"type":"text","text":" "},{"text":"we can prove exactly how the feature would behave in production. But, suppose we wanted to write","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an integration test that proves after the user taps the “Login” button that ultimately the"},{"type":"text","text":" "},{"type":"text","text":"selected tab switches to the first tab."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to test such a complex flow we must test the integration of multiple features, which","type":"text"},{"text":" ","type":"text"},{"text":"means dealing with complex, nested state and effects. We can emulate this flow in a test by","type":"text"},{"type":"text","text":" "},{"text":"sending actions that mimic the user logging in, and then eventually assert that the selected","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tab switched to activity:"}]},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","","\/\/ 1️⃣ Emulate user tapping on submit button.","await store.send(.login(.submitButtonTapped)) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  …","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(.login(.loginResponse(.success))) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  …","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(.login(.delegate(.didLogin))) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  …","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"We need to be intimately knowledgeable in how the login feature works so that we can assert","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on how its state changes and how its effects feed data back into the system."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the login feature were to change its logic we may get test failures here even though the"},{"type":"text","text":" "},{"type":"text","text":"logic we are actually trying to test doesn’t really care about those changes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"This test is very long, and so if there are other similar but slightly different flows we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"want to test we will be tempted to copy-and-paste the whole thing, leading to lots of"},{"type":"text","text":" "},{"type":"text","text":"duplicated, fragile tests."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"login causing the selected tab to switch to activity, without having to worry about what is"},{"type":"text","text":" "},{"type":"text","text":"happening inside the login feature. To do this, we can turn off "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":" in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the test store, and then just assert on what we are interested in:"}]},{"syntax":"swift","code":["let store = TestStore(App.State()) {","  App()","}","store.exhaustivity = .off \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .activity","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed","type":"text"},{"text":" ","type":"text"},{"text":"data back into the system. We just assert that when the “Submit” button is tapped that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"eventually we get the "},{"type":"codeVoice","code":"didLogin"},{"text":" delegate action and that causes the selected tab to flip to","type":"text"},{"type":"text","text":" "},{"text":"activity. Now the login feature is free to make any change it wants to make without affecting","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this integration test."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off"},{"type":"text","text":" for "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference"},{"text":" causes all un-asserted changes to pass","type":"text"},{"text":" ","type":"text"},{"text":"without any notification. If you would like to see what test failures are being suppressed","type":"text"},{"type":"text","text":" "},{"text":"without actually causing a failure, you can use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"text":":","type":"text"}]},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","store.exhaustivity = .off(showSkippedAssertions: true) \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .profile","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When this is run you will get grey, informational boxes on each assertion where some change"},{"text":" ","type":"text"},{"type":"text","text":"wasn’t fully asserted on:"}]},{"name":"◽️ Expected failure","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}]},{"type":"codeListing","syntax":"diff","code":["  App.State(","    authenticatedTab: .loggedOut(","      Login.State(","-       isLoading: false","+       isLoading: true,","        …","      )","    )","  )"]},{"type":"paragraph","inlineContent":[{"text":"Skipped receiving .login(.loginResponse(.success))","type":"text"}]},{"inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":["  App.State(","-   authenticatedTab: .loggedOut(…)","+   authenticatedTab: .loggedIn(","+     Profile.State(…)","+   ),","    …","  )"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"The test still passes, and none of these notifications are test failures. They just let you know","type":"text"},{"type":"text","text":" "},{"text":"what things you are not explicitly asserting against, and can be useful to see when tracking","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"down bugs that happen in production but that aren’t currently detected in tests."}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/teststore"]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"role":"symbol","title":"TestStore","externalID":"s:22ComposableArchitecture9TestStoreC","symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Class"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:withDependencies:file:line:)-3zio1":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:file:line:)-3zio1","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:withdependencies:file:line:)-3zio1","role":"symbol","type":"topic","abstract":[{"text":"Creates a test store with an initial state and a reducer powering its runtime.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"initialState","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"reducer","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":", ","kind":"text"},{"text":"withDependencies","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"title":"init(initialState:reducer:withDependencies:file:line:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"https://vimeo.com/751173570":{"url":"https:\/\/vimeo.com\/751173570","title":"conference talk","titleInlineContent":[{"type":"text","text":"conference talk"}],"identifier":"https:\/\/vimeo.com\/751173570","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipInFlightEffects(strict:file:line:)":{"title":"skipInFlightEffects(strict:file:line:)","abstract":[{"type":"text","text":"Cancels any currently in-flight effects."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)","url":"\/documentation\/composablearchitecture\/teststore\/skipinflighteffects(strict:file:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"skipInFlightEffects"},{"kind":"text","text":"("},{"text":"strict","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:file:line:)":{"kind":"symbol","abstract":[{"type":"text","text":"Clears the queue of received actions from effects."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:file:line:)","title":"skipReceivedActions(strict:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"skipReceivedActions","kind":"identifier"},{"kind":"text","text":"("},{"text":"strict","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-7md3m":{"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-7md3m","title":"receive(_:timeout:assert:file:line:)","type":"topic","kind":"symbol","abstract":[{"text":"Asserts an action was received from an effect that matches a predicate, and asserts how the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state changes."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV","text":"Duration"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-7md3m"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"abstract":[{"text":"Non-exhaustive assertions.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","text":"Exhaustivity"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","url":"\/documentation\/composablearchitecture\/exhaustivity\/off","title":"off","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","url":"\/documentation\/composablearchitecture\/testing"},"https://www.merowing.info":{"title":"Krzysztof Zabłocki","titleInlineContent":[{"text":"Krzysztof Zabłocki","type":"text"}],"url":"https:\/\/www.merowing.info","identifier":"https:\/\/www.merowing.info","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"timeout","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V","text":"UInt64"}],"role":"symbol","abstract":[{"type":"text","text":"The default timeout used in all methods that take an optional timeout."}],"title":"timeout","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/timeout","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:file:line:)-53gi5":{"title":"finish(timeout:file:line:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:file:line:)-53gi5","role":"symbol","abstract":[{"type":"text","text":"Suspends until all in-flight effects have finished, or until it times out."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"finish","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststoretask","abstract":[{"type":"text","text":"The type returned from "},{"type":"codeVoice","code":"TestStore\/send(_:assert:file:line:)-1ax61"},{"type":"text","text":" that represents the"},{"type":"text","text":" "},{"type":"text","text":"lifecycle of the effect started from sending an action."}],"navigatorTitle":[{"text":"TestStoreTask","kind":"identifier"}],"title":"TestStoreTask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStoreTask","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"title":"Exhaustivity.off(showSkippedAssertions:)","type":"topic","abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"off","kind":"identifier"},{"text":"(","kind":"text"},{"text":"showSkippedAssertions","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings(action:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"bindings","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ViewAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"BindingViewStore","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/bindings(action:)","abstract":[{"type":"text","text":"Returns a binding view store for this store."}],"title":"bindings(action:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/state","abstract":[{"type":"text","text":"The current state of the test store."}],"title":"state","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"bindings","kind":"identifier"},{"kind":"text","text":": "},{"text":"BindingViewStore","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/bindings","abstract":[{"type":"text","text":"Returns a binding view store for this store."}],"title":"bindings","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Action.State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BindableAction"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/useMainSerialExecutor":{"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/usemainserialexecutor","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor","title":"useMainSerialExecutor","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"useMainSerialExecutor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Serializes all async work to the main thread for the lifetime of the test store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-6m8t6":{"title":"receive(_:timeout:assert:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-6m8t6","abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-6m8t6","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"title":"dependencies","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The current dependencies of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/dependencies","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependencies","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:file:line:)":{"title":"assert(_:file:line:)","kind":"symbol","abstract":[{"type":"text","text":"Assert against the current state of the store."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"assert","kind":"identifier"},{"text":"((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/assert(_:file:line:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","role":"collectionGroup","title":"Deprecations","url":"\/documentation\/composablearchitecture\/teststoredeprecations","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"https://www.merowing.info/exhaustive-testing-in-tca/":{"url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","title":"blog post","titleInlineContent":[{"type":"text","text":"blog post"}],"identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:file:line:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"text":"TestStoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"title":"send(_:assert:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:file:line:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"title":"exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","abstract":[{"text":"Asserts an action was received from an effect and asserts how the state changes.","type":"text"}],"title":"receive(_:timeout:assert:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]}}}