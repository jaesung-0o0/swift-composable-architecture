{"metadata":{"navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"roleHeading":"Class","externalID":"s:22ComposableArchitecture9TestStoreC","title":"TestStore","role":"symbol","symbolKind":"class"},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:file:line:)-3zio1"],"title":"Creating a test store"},{"title":"Configuring a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-6m8t6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-7md3m","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"],"title":"Testing a reducer"},{"title":"Methods for skipping actions and effects","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)"],"title":"Accessing state","abstract":[{"type":"text","text":"While the most common way of interacting with a test store’s state is via its"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","type":"reference"},{"text":" methods, you may","type":"text"},{"type":"text","text":" "},{"text":"also access it directly throughout a test.","type":"text"}]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"],"title":"Deprecations"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This object aids in writing expressive and exhaustive tests for features built in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each step"},{"type":"text","text":" "},{"type":"text","text":"of the way you must assert exactly how state changed, and how effect emissions were fed back"},{"type":"text","text":" "},{"type":"text","text":"into the system."}]},{"inlineContent":[{"text":"See the dedicated ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","type":"reference"},{"text":" article for detailed information on testing.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Exhaustive-testing","level":2,"text":"Exhaustive testing"},{"type":"paragraph","inlineContent":[{"text":"By default, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires you to exhaustively prove how your feature evolves from"},{"text":" ","type":"text"},{"text":"sending use actions and receiving actions from effects. There are multiple ways the test store","type":"text"},{"type":"text","text":" "},{"type":"text","text":"forces you to do this:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After each action is sent you must describe precisely how the state changed from before the"},{"type":"text","text":" "},{"type":"text","text":"action was sent to after it was sent."}]},{"type":"paragraph","inlineContent":[{"text":"If even the smallest piece of data differs the test will fail. This guarantees that you are","type":"text"},{"type":"text","text":" "},{"text":"proving you know precisely how the state of the system changes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect sends an"},{"type":"text","text":" "},{"type":"text","text":"action back into the system, you "},{"type":"strong","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" explicitly assert that you expect to receive that"},{"type":"text","text":" "},{"type":"text","text":"action from the effect, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" you must assert how state changed as a result.","type":"text"}]},{"inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect actions, the test will"},{"type":"text","text":" "},{"type":"text","text":"fail. This guarantees that you do not accidentally forget about an effect action, and that"},{"text":" ","type":"text"},{"type":"text","text":"the sequence of steps you are describing will mimic how the application behaves in reality."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All effects must complete by the time the test case has finished running, and all effect"},{"type":"text","text":" "},{"text":"actions must be asserted on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If at the end of the assertion there is still an in-flight effect running or an unreceived"},{"type":"text","text":" "},{"type":"text","text":"action, the assertion will fail. This helps exhaustively prove that you know what effects"},{"text":" ","type":"text"},{"text":"are in flight and forces you to prove that effects will not cause any future changes to your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For example, given a simple counter reducer:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Counter: Reducer {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"type":"codeListing","code":["@MainActor","class CounterTests: XCTestCase {","  func testCounter() async {","    let store = TestStore(","      \/\/ Given: a counter state of 0","      initialState: Counter.State(count: 0),","    ) {","      Counter()","    }","","    \/\/ When: the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then: the count should be 1","      $0.count = 1","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that in the trailing closure of ","type":"text"},{"code":".send(.incrementButtonTapped)","type":"codeVoice"},{"type":"text","text":" we are given a single"},{"text":" ","type":"text"},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value to"},{"text":" ","type":"text"},{"text":"match the state after the action was sent. In this case the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" field changes to ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the change made in the closure does not reflect reality, you will get a test failure with a"},{"type":"text","text":" "},{"text":"nicely formatted failure message letting you know exactly what went wrong:","type":"text"}]},{"syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 42","}"],"type":"codeListing"},{"type":"aside","style":"note","name":"❌ Failure","content":[{"inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}],"type":"paragraph"},{"code":[" TestStoreFailureTests.State(","-   count: 42","+   count: 1"," )"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}],"type":"paragraph"}]},{"inlineContent":[{"text":"For a more complex example, consider the following bare-bones search feature that uses a clock","type":"text"},{"type":"text","text":" "},{"text":"and cancel token to debounce requests:","type":"text"}],"type":"paragraph"},{"code":["struct Search: Reducer {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action: Equatable {","    case queryChanged(String)","    case searchResponse(TaskResult<[String]>)","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.continuousClock) var clock","  private enum CancelID { case search }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action> {","    switch action {","    case let .queryChanged(query):","      state.query = query","      return .run { send in","        try await self.clock.sleep(for: 0.5)","","        guard let results = try? await self.apiClient.search(query)","        else { return }","","        await send(.response(results))","      }","      .cancellable(id: CancelID.search, cancelInFlight: true)","","    case let .searchResponse(.success(results)):","      state.results = results","      return .none","","    case .searchResponse(.failure):","      \/\/ Do error handling here.","      return .none","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by overriding the "},{"type":"codeVoice","code":"apiClient"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continuousClock"},{"type":"text","text":" dependencies with"},{"type":"text","text":" "},{"type":"text","text":"values that are fully controlled and deterministic:"}]},{"type":"codeListing","code":["\/\/ Create a test clock to control the timing of effects","let clock = TestClock()","","let store = TestStore(initialState: Search.State()) {","  Search()","} withDependencies: {","  \/\/ Override the clock dependency with the test clock","  $0.continuousClock = clock","","  \/\/ Simulate a search response with one item","  $0.apiClient.search = { _ in","    [\"Composable Architecture\"]","  }",")","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the clock by enough to get past the debounce","await clock.advance(by: 0.5)","","\/\/ Assert that the expected response is received","await store.receive(.searchResponse(.success([\"Composable Architecture\"]))) {","  $0.results = [\"Composable Architecture\"]","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test is proving that when the search query changes some search responses are delivered and"},{"type":"text","text":" "},{"type":"text","text":"state updates accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we did not assert that the "},{"code":"searchResponse","type":"codeVoice"},{"type":"text","text":" action was received, we would get the following"},{"text":" ","type":"text"},{"type":"text","text":"test failure:"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The store received 1 unexpected action after this one: …"}]},{"syntax":null,"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"type":"codeListing"}],"type":"aside","style":"note","name":"❌ Failure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This helpfully lets us know that we have no asserted on everything that happened in the feature,"},{"text":" ","type":"text"},{"text":"which could be hiding a bug from us.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if we had sent another action before handling the effect’s action we would have also gotten"},{"type":"text","text":" "},{"type":"text","text":"a test failure:"}]},{"style":"note","type":"aside","name":"❌ Failure","content":[{"type":"paragraph","inlineContent":[{"text":"Must handle 1 received action before sending an action: …","type":"text"}]},{"type":"codeListing","code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"syntax":null}]},{"inlineContent":[{"type":"text","text":"All of these types of failures help you prove that you know exactly how your feature evolves as"},{"text":" ","type":"text"},{"type":"text","text":"actions are sent into the system. If the library did not produce a test failure in these"},{"type":"text","text":" "},{"type":"text","text":"situations it could be hiding subtle bugs in your code. For example, when the user clears the"},{"text":" ","type":"text"},{"text":"search query you probably expect that the results are cleared and no search request is executed","type":"text"},{"text":" ","type":"text"},{"text":"since there is no query. This can be done like so:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(.queryChanged(\"\")) {","  $0.query = \"\"","  $0.results = []","}","","\/\/ No need to perform `store.receive` since we do not expect a search","\/\/ effect to execute."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, if in the future a bug is introduced causing a search request to be executed even when the"},{"type":"text","text":" "},{"type":"text","text":"query is empty, you will get a test failure because a new effect is being created that is not"},{"text":" ","type":"text"},{"type":"text","text":"being asserted on. This is the power of exhaustive testing."}]},{"text":"Non-exhaustive testing","level":2,"anchor":"Non-exhaustive-testing","type":"heading"},{"inlineContent":[{"type":"text","text":"While exhaustive testing can be powerful, it can also be a nuisance, especially when testing how"},{"type":"text","text":" "},{"type":"text","text":"many features integrate together. This is why sometimes you may want to selectively test in a"},{"text":" ","type":"text"},{"type":"text","text":"non-exhaustive style."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The concept of “non-exhaustive test store” was first introduced by"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/www.merowing.info","isActive":true},{"text":" in a ","type":"text"},{"identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","type":"reference","isActive":true},{"text":" and","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/vimeo.com\/751173570"},{"text":", and then later became integrated into the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"core library."}]}],"style":"tip","name":"Tip"},{"inlineContent":[{"text":"Test stores are exhaustive by default, which means you must assert on every state change, and","type":"text"},{"text":" ","type":"text"},{"text":"how ever effect feeds data back into the system, and you must make sure that all effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"complete before the test is finished. To turn off exhaustivity you can set "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","isActive":true,"type":"reference"},{"text":". When that is done the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":"’s behavior changes:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The trailing closures of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true,"type":"reference"},{"type":"text","text":" no longer need to assert on all state"},{"text":" ","type":"text"},{"type":"text","text":"changes. They can assert on any subset of changes, and only if they make an incorrect"},{"text":" ","type":"text"},{"type":"text","text":"mutation will a test failure be reported."}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)","type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"methods are allowed to be called even when actions have been received from effects that have","type":"text"},{"type":"text","text":" "},{"text":"not been asserted on yet. Any pending actions will be cleared.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Tests are allowed to finish with unasserted, received actions and in-flight effects. No test"},{"text":" ","type":"text"},{"type":"text","text":"failures will be reported."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Non-exhaustive stores can be configured to report skipped assertions by configuring","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","type":"reference","isActive":true},{"type":"text","text":". When set to "},{"code":"true","type":"codeVoice"},{"text":" the test store will have the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"added behavior that any unasserted change causes a grey, informational box to appear next to"},{"text":" ","type":"text"},{"type":"text","text":"each assertion detailing the changes that were not asserted against. This allows you to see what"},{"type":"text","text":" "},{"type":"text","text":"information you are choosing to ignore without causing a test failure. It can be useful in"},{"type":"text","text":" "},{"type":"text","text":"tracking down bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"},{"inlineContent":[{"text":"This style of testing is most useful for testing the integration of multiple features where you","type":"text"},{"text":" ","type":"text"},{"text":"want to focus on just a certain slice of the behavior. Exhaustive testing can still be important","type":"text"},{"text":" ","type":"text"},{"text":"to use for leaf node features, where you truly do want to assert on everything happening inside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the feature."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"user can fill in some data on the screen, then tap the “Submit” button, and then a series of"},{"type":"text","text":" "},{"text":"events happens to  log the user in. Once the user is logged in, the 3rd tab switches from a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"login screen to a profile screen, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" the selected tab switches to the first tab, which is an"},{"text":" ","type":"text"},{"text":"activity screen.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When writing tests for the login feature we will want to do that in the exhaustive style so that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we can prove exactly how the feature would behave in production. But, suppose we wanted to write"},{"text":" ","type":"text"},{"type":"text","text":"an integration test that proves after the user taps the “Login” button that ultimately the"},{"type":"text","text":" "},{"type":"text","text":"selected tab switches to the first tab."}]},{"inlineContent":[{"type":"text","text":"In order to test such a complex flow we must test the integration of multiple features, which"},{"type":"text","text":" "},{"type":"text","text":"means dealing with complex, nested state and effects. We can emulate this flow in a test by"},{"text":" ","type":"text"},{"text":"sending actions that mimic the user logging in, and then eventually assert that the selected","type":"text"},{"type":"text","text":" "},{"text":"tab switched to activity:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","","\/\/ 1️⃣ Emulate user tapping on submit button.","await store.send(.login(.submitButtonTapped)) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  …","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(.login(.loginResponse(.success))) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  …","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(.login(.delegate(.didLogin))) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  …","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to be intimately knowledgeable in how the login feature works so that we can assert"},{"text":" ","type":"text"},{"text":"on how its state changes and how its effects feed data back into the system.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the login feature were to change its logic we may get test failures here even though the","type":"text"},{"type":"text","text":" "},{"text":"logic we are actually trying to test doesn’t really care about those changes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This test is very long, and so if there are other similar but slightly different flows we"},{"type":"text","text":" "},{"text":"want to test we will be tempted to copy-and-paste the whole thing, leading to lots of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"duplicated, fragile tests."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of"},{"type":"text","text":" "},{"text":"login causing the selected tab to switch to activity, without having to worry about what is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"happening inside the login feature. To do this, we can turn off "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"type":"text","text":" in"},{"type":"text","text":" "},{"text":"the test store, and then just assert on what we are interested in:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let store = TestStore(App.State()) {","  App()","}","store.exhaustivity = .off \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .activity","}"]},{"type":"paragraph","inlineContent":[{"text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed","type":"text"},{"type":"text","text":" "},{"text":"data back into the system. We just assert that when the “Submit” button is tapped that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"eventually we get the "},{"type":"codeVoice","code":"didLogin"},{"type":"text","text":" delegate action and that causes the selected tab to flip to"},{"text":" ","type":"text"},{"type":"text","text":"activity. Now the login feature is free to make any change it wants to make without affecting"},{"text":" ","type":"text"},{"type":"text","text":"this integration test."}]},{"inlineContent":[{"type":"text","text":"Using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","type":"reference","isActive":true},{"type":"text","text":" for "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference","isActive":true},{"type":"text","text":" causes all un-asserted changes to pass"},{"type":"text","text":" "},{"text":"without any notification. If you would like to see what test failures are being suppressed","type":"text"},{"type":"text","text":" "},{"text":"without actually causing a failure, you can use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","store.exhaustivity = .off(showSkippedAssertions: true) \/\/ ⬅️","","await store.send(.login(.submitButtonTapped))","await store.receive(.login(.delegate(.didLogin))) {","  $0.selectedTab = .profile","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When this is run you will get grey, informational boxes on each assertion where some change","type":"text"},{"text":" ","type":"text"},{"text":"wasn’t fully asserted on:","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}]},{"code":["  App.State(","    authenticatedTab: .loggedOut(","      Login.State(","-       isLoading: false","+       isLoading: true,","        …","      )","    )","  )"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"text":"Skipped receiving .login(.loginResponse(.success))","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}]},{"type":"codeListing","code":["  App.State(","-   authenticatedTab: .loggedOut(…)","+   authenticatedTab: .loggedIn(","+     Profile.State(…)","+   ),","    …","  )"],"syntax":"diff"},{"inlineContent":[{"text":"(Expected: −, Actual: +)","type":"text"}],"type":"paragraph"}],"name":"◽️ Expected failure","style":"note"},{"inlineContent":[{"type":"text","text":"The test still passes, and none of these notifications are test failures. They just let you know"},{"type":"text","text":" "},{"type":"text","text":"what things you are not explicitly asserting against, and can be useful to see when tracking"},{"type":"text","text":" "},{"type":"text","text":"down bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"}]}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"url":"\/documentation\/composablearchitecture\/testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"role":"symbol","abstract":[{"type":"text","text":"The current dependencies of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/dependencies","title":"dependencies","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"dependencies","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings":{"title":"bindings","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"bindings","kind":"identifier"},{"text":": ","kind":"text"},{"text":"BindingViewStore","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAA5StateQy_RszAA14BindableActionR_rlEADxmfp"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/bindings","abstract":[{"type":"text","text":"Returns a binding view store for this store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" is "},{"code":"Action.State","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"BindableAction","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:file:line:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/assert(_:file:line:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"abstract":[{"text":"Assert against the current state of the store.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"assert"},{"kind":"text","text":"(("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE5Statexmfp","kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"title":"assert(_:file:line:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:file:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"type":"topic","abstract":[{"type":"text","text":"The default timeout used in all methods that take an optional timeout."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"timeout","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/timeout","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","title":"timeout"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-7md3m":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-7md3m","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"text":"((","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"action"},{"text":": ","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE6Actionq_mfp","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"state"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE5Statexmfp","kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-7md3m","title":"receive(_:timeout:assert:file:line:)","abstract":[{"type":"text","text":"Asserts an action was received from an effect that matches a predicate, and asserts how the"},{"text":" ","type":"text"},{"type":"text","text":"state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/useMainSerialExecutor":{"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/usemainserialexecutor","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"useMainSerialExecutor","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"useMainSerialExecutor","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor","abstract":[{"type":"text","text":"Serializes all async work to the main thread for the lifetime of the test store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"title":"Deprecations","url":"\/documentation\/composablearchitecture\/teststoredeprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}],"kind":"article"},"https://www.merowing.info/exhaustive-testing-in-tca/":{"title":"blog post","url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","titleInlineContent":[{"text":"blog post","type":"text"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE6Actionq_mfp"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE5Statexmfp","kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"receive(_:timeout:assert:file:line:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:file:line:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:file:line:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE6Actionq_mfp"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE5Statexmfp","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","text":"TestStoreTask","kind":"typeIdentifier"}],"title":"send(_:assert:file:line:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/bindings(action:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"bindings","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ViewAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC6Actionq_mfp","text":"Action"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC8bindings6actionAA011BindingViewD0VyxG9CasePaths0I4PathVyq_qd__G_t5StateQyd__RszAA14BindableActionRd__lF0hN0L_qd__mfp"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"BindingViewStore","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStoreV"},{"text":"<","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5Statexmfp","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns a binding view store for this store.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/bindings(action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/bindings(action:)","kind":"symbol","role":"symbol","type":"topic","title":"bindings(action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:withDependencies:file:line:)-3zio1":{"title":"init(initialState:reducer:withDependencies:file:line:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:withdependencies:file:line:)-3zio1","abstract":[{"type":"text","text":"Creates a test store with an initial state and a reducer powering its runtime."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:file:line:)-3zio1","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialState"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC12initialState7reducer16withDependencies4file4lineACyxq_GxyXK_qd__yXEy0I016DependencyValuesVzXEs12StaticStringVSutcSQRz0F0Qyd__Rsz6ActionQyd__Rs_AA7ReducerRd__lufc1RL_qd__mfp"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"reducer","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreC12initialState7reducer16withDependencies4file4lineACyxq_GxyXK_qd__yXEy0I016DependencyValuesVzXEs12StaticStringVSutcSQRz0F0Qyd__Rsz6ActionQyd__Rs_AA7ReducerRd__lufc1RL_qd__mfp","kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"withDependencies"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"title":"state","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5Statexmfp","text":"State","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/teststore\/state","abstract":[{"type":"text","text":"The current state of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipInFlightEffects(strict:file:line:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"skipInFlightEffects","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"strict"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/skipinflighteffects(strict:file:line:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:file:line:)","abstract":[{"text":"Cancels any currently in-flight effects.","type":"text"}],"kind":"symbol","title":"skipInFlightEffects(strict:file:line:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:file:line:)-53gi5":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)-53gi5","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:file:line:)-53gi5","abstract":[{"text":"Suspends until all in-flight effects have finished, or until it times out.","type":"text"}],"title":"finish(timeout:file:line:)"},"https://www.merowing.info":{"titleInlineContent":[{"text":"Krzysztof Zabłocki","type":"text"}],"title":"Krzysztof Zabłocki","type":"link","identifier":"https:\/\/www.merowing.info","url":"https:\/\/www.merowing.info"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"role":"symbol","url":"\/documentation\/composablearchitecture\/exhaustivity\/off","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"off","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"title":"off"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:file:line:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"skipReceivedActions","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"strict"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:file:line:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)","abstract":[{"text":"Clears the queue of received actions from effects.","type":"text"}],"title":"skipReceivedActions(strict:file:line:)","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","type":"topic","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","role":"symbol","title":"exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"url":"\/documentation\/composablearchitecture\/teststoretask","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStoreTask","kind":"identifier"}],"title":"TestStoreTask","type":"topic","abstract":[{"text":"The type returned from ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:file:line:)-1ax61"},{"text":" that represents the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lifecycle of the effect started from sending an action."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}]},"https://vimeo.com/751173570":{"title":"conference talk","url":"https:\/\/vimeo.com\/751173570","identifier":"https:\/\/vimeo.com\/751173570","titleInlineContent":[{"text":"conference talk","type":"text"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-6m8t6":{"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-6m8t6","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"receive","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE6Actionq_mfp","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE7receive_7timeout6assert4file4liney9CasePaths0J4PathVyq_qd__G_s8DurationVyxzKcSgs12StaticStringVSutYalF5ValueL_qd__mfp","text":"Value"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzrlE5Statexmfp"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-6m8t6","abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"title":"receive(_:timeout:assert:file:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":"(","kind":"text"},{"text":"showSkippedAssertions","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"text":"Non-exhaustive assertions.","type":"text"}],"title":"Exhaustivity.off(showSkippedAssertions:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","role":"symbol"}}}