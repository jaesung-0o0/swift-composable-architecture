{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ModelValue"},{"kind":"text","text":", "},{"text":"ViewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"modelValue","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"viewValue","kind":"internalParam"},{"kind":"text","text":": "},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ModelValue"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"_Bindable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewValue"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_Bindable"},{"kind":"text","text":", "},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"text":"ViewValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"text":"\n","kind":"text"}]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A binding from model state. "},{"inlineContent":[{"text":"E.g.","type":"text"}],"type":"emphasis"},{"type":"text","text":", a binding derived from a published field"},{"type":"text","text":" "},{"type":"text","text":"on an observable object."}],"type":"paragraph"}],"name":"modelValue"},{"name":"viewValue","content":[{"inlineContent":[{"type":"text","text":"A binding from view state. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"type":"text","text":", a focus binding."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI comes with many property wrappers that can be used in views to drive view state, like"},{"text":" ","type":"text"},{"type":"text","text":"field focus. Unfortunately, these property wrappers "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"text":" be used in views. It’s not possible","type":"text"},{"type":"text","text":" "},{"text":"to extract this logic to an observable object and integrate it with the rest of the model’s","type":"text"},{"type":"text","text":" "},{"text":"business logic, and be in a better position to test this state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can work around these limitations by introducing a published field to your observable"},{"type":"text","text":" "},{"text":"object and synchronizing it to view state with this view modifier.","type":"text"}]}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/bind(_:to:)"},"metadata":{"title":"bind(_:to:)","modules":[{"relatedModules":["SwiftUI"],"name":"ComposableArchitecture"}],"role":"symbol","symbolKind":"method","extendedModule":"SwiftUI","roleHeading":"Instance Method","externalID":"s:7SwiftUI4ViewP0A16UINavigationCoreE4bind_2toQrqd___qd_0_tAD9_BindableRd__AdGRd_0_SQ5ValueRpd__AHQyd_0_AIRSr0_lF","platforms":[{"deprecated":false,"introducedAt":"14.0","name":"iOS","beta":false,"unavailable":false},{"introducedAt":"11.0","name":"macOS","beta":false,"deprecated":false,"unavailable":false},{"deprecated":false,"unavailable":false,"name":"tvOS","introducedAt":"14.0","beta":false},{"deprecated":false,"introducedAt":"7.0","name":"watchOS","unavailable":false,"beta":false}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ModelValue","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewValue"},{"text":">(","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"sections":[],"abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/swiftui\/view\/bind(_:to:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View/bind(_:to:)":{"type":"topic","title":"bind(_:to:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ModelValue","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ViewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/bind(_:to:)","abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/view\/bind(_:to:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"url":"\/documentation\/composablearchitecture\/swiftui","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","abstract":[],"title":"SwiftUI","kind":"symbol","type":"topic","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View":{"role":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/view","title":"View","type":"topic","abstract":[],"kind":"symbol","fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View","navigatorTitle":[{"text":"View","kind":"identifier"}]}}}