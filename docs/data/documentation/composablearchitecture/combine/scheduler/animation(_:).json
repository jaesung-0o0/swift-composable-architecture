{"variants":[{"paths":["\/documentation\/composablearchitecture\/combine\/scheduler\/animation(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"text":" ","type":"text"},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"text":" block.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"animation"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"animation","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation"},{"kind":"text","text":"? = .default) -> "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier","text":"AnySchedulerOf"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["iOS"]}]},{"parameters":[{"name":"animation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An animation to be performed."}]}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"A scheduler that performs an animation when a scheduled action is run.","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you load some asynchronous data in an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" and then"},{"type":"text","text":" "},{"type":"text","text":"pipe its output into a "},{"code":"@Published","type":"codeVoice"},{"text":" field, you may be tempted to use the ","type":"text"},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" "},{"text":"operator:","type":"text"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"However, this prevents you from wrapping the ","type":"text"},{"type":"codeVoice","code":"articles"},{"text":" mutation in ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" since"},{"type":"text","text":" "},{"type":"text","text":"that is hidden from you in the "},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" operator. In this situation you can simply"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":".animation"},{"type":"text","text":" operator on "},{"code":"Scheduler","type":"codeVoice"},{"type":"text","text":" to transform "},{"type":"codeVoice","code":"DispatchQueue.main"},{"type":"text","text":" into a"},{"text":" ","type":"text"},{"type":"text","text":"scheduler that performs its work inside "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another common use case is when you have a Combine publisher made up of many publishers"},{"text":" ","type":"text"},{"type":"text","text":"that have been merged or concatenated. You may want to animate the outputs of each of"},{"type":"text","text":" "},{"type":"text","text":"those publishers differently:"}]},{"type":"codeListing","syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"]}]}],"kind":"symbol","metadata":{"title":"animation(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","kind":"typeIdentifier","text":"Animation"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier","text":"AnySchedulerOf"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","extendedModule":"Combine","symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF","role":"symbol"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler\/animation(_:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine/Scheduler":{"title":"Scheduler","role":"symbol","navigatorTitle":[{"text":"Scheduler","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/combine\/scheduler","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"kind":"identifier","preciseIdentifier":"s:7Combine9SchedulerP","text":"Scheduler"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine","role":"collection","url":"\/documentation\/composablearchitecture\/combine","abstract":[],"type":"topic","kind":"symbol","title":"Combine"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine/Scheduler/animation(_:)":{"kind":"symbol","title":"animation(_:)","role":"symbol","abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"type":"text","text":" "},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/combine\/scheduler\/animation(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler\/animation(_:)","type":"topic"}}}