{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sleep"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"kind":"text","text":" "},{"text":"duration","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":" = .zero, ","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"? = nil) ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"duration","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The time interval on which to sleep between yielding."}]}]},{"name":"tolerance","content":[{"type":"paragraph","inlineContent":[{"text":"The allowed timing variance when emitting events. Defaults to ","type":"text"},{"type":"codeVoice","code":"zero"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"options"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"If the task is cancelled before the time ends, this function throws "},{"code":"CancellationError","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"This function doesnâ€™t block the scheduler.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["try await in scheduler.sleep(for: .seconds(1))"],"type":"codeListing"}]}],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"role":"symbol","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"symbolKind":"method","extendedModule":"Combine","title":"sleep(for:tolerance:options:)","roleHeading":"Instance Method","externalID":"s:7Combine9SchedulerP0A10SchedulersE5sleep3for9tolerance7optionsy0B8TimeType_6StrideQZ_AK0B7OptionsQzSgtYaKF","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"kind":"text","text":"("},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}]},"sections":[],"abstract":[{"text":"Suspends the current task for at least the given duration.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler\/sleep(for:tolerance:options:)"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/combine\/scheduler\/sleep(for:tolerance:options:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine/Scheduler/sleep(for:tolerance:options:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/combine\/scheduler\/sleep(for:tolerance:options:)","kind":"symbol","abstract":[{"text":"Suspends the current task for at least the given duration.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler\/sleep(for:tolerance:options:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sleep","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"sleep(for:tolerance:options:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine/Scheduler":{"title":"Scheduler","role":"symbol","navigatorTitle":[{"text":"Scheduler","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/combine\/scheduler","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"kind":"identifier","preciseIdentifier":"s:7Combine9SchedulerP","text":"Scheduler"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine\/Scheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Combine":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Combine","role":"collection","url":"\/documentation\/composablearchitecture\/combine","abstract":[],"type":"topic","kind":"symbol","title":"Combine"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}