{"metadata":{"role":"symbol","externalID":"s:17CombineSchedulers15TestSchedulerOfa","symbolKind":"typealias","title":"TestSchedulerOf","roleHeading":"Type Alias","navigatorTitle":[{"text":"TestSchedulerOf","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"TestSchedulerOf","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestSchedulerOf","interfaceLanguage":"swift"},"abstract":[{"text":"A convenience type to specify a ","type":"text"},{"code":"TestScheduler","type":"codeVoice"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"type":"text","text":" "},{"text":"time type and options type.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestSchedulerOf"},{"text":"<","kind":"text"},{"text":"Scheduler","kind":"genericParameter"},{"text":"> = ","kind":"text"},{"text":"TestScheduler","preciseIdentifier":"s:17CombineSchedulers13TestSchedulerC","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler"},{"text":"<","kind":"text"},{"text":"Scheduler","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Scheduler","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scheduler","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Combine9SchedulerP","kind":"typeIdentifier","text":"Scheduler"}],"platforms":["iOS"],"languages":["swift"]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/testschedulerof"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"title":"TestScheduler","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler","navigatorTitle":[{"text":"TestScheduler","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestSchedulerOf":{"abstract":[{"type":"text","text":"A convenience type to specify a "},{"type":"codeVoice","code":"TestScheduler"},{"text":" by the scheduler it wraps rather than by the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"time type and options type."}],"type":"topic","url":"\/documentation\/composablearchitecture\/testschedulerof","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestSchedulerOf","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"TestSchedulerOf","kind":"identifier"}],"title":"TestSchedulerOf","navigatorTitle":[{"text":"TestSchedulerOf","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}