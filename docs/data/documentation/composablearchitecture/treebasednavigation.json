{"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/treebasednavigation"]}],"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"],"title":"Tree-based navigation"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"type":"text","text":" "},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Tree-based navigation is the process of modeling navigation using optional and enum state. This"},{"type":"text","text":" "},{"text":"style of navigation allows you to deep-link into any state of your application by simply","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constructing a deeply nested piece of state, handing it off to SwiftUI, and letting it take care of"},{"type":"text","text":" "},{"type":"text","text":"the rest."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Basics"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Enum-state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Integration","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Dismissal","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Testing","type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"anchor":"Basics","text":"Basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tools for this style of navigation include the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" property wrapper,","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":", the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)","isActive":true,"type":"reference"},{"type":"text","text":" operator, and a bunch of"},{"type":"text","text":" "},{"text":"APIs that mimic SwiftUI’s regular tools, such as ","type":"text"},{"type":"codeVoice","code":".sheet"},{"type":"text","text":", "},{"type":"codeVoice","code":".popover"},{"type":"text","text":", etc., but tuned specifically"},{"text":" ","type":"text"},{"text":"for the Composable Architecture.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The process of integrating two features together for navigation largely consists of 2 steps:","type":"text"},{"type":"text","text":" "},{"text":"integrating the features’ domains together and integrating the features’ views together. One","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"typically starts by integrating the features’ domains together. This consists of adding the child’s"},{"type":"text","text":" "},{"type":"text","text":"state and actions to the parent, and then utilizing a reducer operator to compose the child reducer"},{"text":" ","type":"text"},{"type":"text","text":"into the parent."}]},{"inlineContent":[{"text":"For example, suppose you have a list of items and you want to be able to show a sheet to display a","type":"text"},{"text":" ","type":"text"},{"text":"form for adding a new item. We can integrate state and actions together by utilizing the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" types:"}],"type":"paragraph"},{"syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addItem: ItemFormFeature.State?","    var items: IdentifiedArrayOf<Item> = []","    \/\/ ...","  }","","  enum Action: Equatable {","    case addItem(PresentationAction<ItemFormFeature.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"addItem","type":"codeVoice"},{"text":" state is held as an optional. A non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value represents that feature is"},{"type":"text","text":" "},{"type":"text","text":"being presented, and "},{"code":"nil","type":"codeVoice"},{"text":" presents the feature is dismissed.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next you can integrate the reducers of the parent and child features by using the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)","isActive":true,"type":"reference"},{"text":" reducer operator, as well as having an action in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent domain for populating the child’s state to drive navigation:"}]},{"syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action: Equatable { \/* ... *\/ }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      switch action {","      case .addButtonTapped:","        \/\/ Populating this state performs the navigation","        state.addItem = ItemFormFeature.State()","        return .none","","      \/\/ ...","      }","    }","    .ifLet(\\.$addItem, action: \/Action.addItem) {","      ItemFormFeature()","    }","  }","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The key path used with ","type":"text"},{"type":"codeVoice","code":"ifLet"},{"text":" focuses on the ","type":"text"},{"code":"@PresentationState","type":"codeVoice"},{"type":"text","text":" projected value since it"},{"type":"text","text":" "},{"text":"uses the ","type":"text"},{"code":"$","type":"codeVoice"},{"text":" syntax. Also note that the action uses a","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference"},{"type":"text","text":", which is analogous to key paths but"},{"text":" ","type":"text"},{"text":"tuned for enums, and uses the forward slash syntax.","type":"text"}]}],"style":"note","type":"aside","name":"Note"},{"inlineContent":[{"text":"That’s all that it takes to integrate the domains and logic of the parent and child features. Next","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need to integrate the features’ views. This is done using view modifiers that look similar to"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s, but are tuned specifically to work with the Composable Architecture."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to show a sheet from the "},{"type":"codeVoice","code":"addItem"},{"text":" state in the ","type":"text"},{"type":"codeVoice","code":"InventoryFeature"},{"text":", we can use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" modifier that takes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" as an argument that is focused on presentation","type":"text"},{"text":" ","type":"text"},{"text":"state and actions:","type":"text"}]},{"code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$addItem, action: { .addItem($0) })","    ) { store in","      ItemFormView(store: store)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We again must specify a key path to the "},{"code":"@PresentationState","type":"codeVoice"},{"text":" projected value, ","type":"text"},{"inlineContent":[{"type":"text","text":"i.e."}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\.$addItem"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"With those few steps completed the domains and views of the parent and child features are now","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integrated together, and when the "},{"code":"addItem","type":"codeVoice"},{"text":" state flips to a non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value the sheet will be","type":"text"},{"type":"text","text":" "},{"text":"presented, and when it is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"’d out it will be dismissed.","type":"text"}]},{"inlineContent":[{"text":"In this example we are using the ","type":"text"},{"type":"codeVoice","code":".sheet"},{"text":" view modifier, but the library ships with overloads for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all of SwiftUI’s navigation APIs that take stores of presentation domain, including:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"alert(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"confirmationDialog(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"sheet(store:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"popover(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fullScreenCover(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"navigationDestination(store:)","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","isActive":true,"type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This should make it possible to use optional state to drive any kind of navigation in a SwiftUI"},{"text":" ","type":"text"},{"text":"application.","type":"text"}]},{"level":2,"anchor":"Enum-state","type":"heading","text":"Enum state"},{"inlineContent":[{"type":"text","text":"While driving navigation with optional state can be powerful, it can also lead to less-than-ideal"},{"type":"text","text":" "},{"type":"text","text":"modeled domains. In particular, if a feature can navigate to multiple screens then you may be"},{"type":"text","text":" "},{"text":"tempted to model that with multiple optional values:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct State {","  @PresentationState var detailItem: DetailFeature.State?","  @PresentationState var editItem: EditFeature.State?","  @PresentationState var addItem: AddFeature.State?","  \/\/ ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, this can lead to invalid states, such as 2 or more states being non-nil at the same time,","type":"text"},{"type":"text","text":" "},{"text":"and that can cause a lot of problems. First of all, SwiftUI does not support presenting multiple","type":"text"},{"text":" ","type":"text"},{"text":"views at the same time from a single view, and so by allowing this in our state we run the risk of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"putting our application into an inconsistent state with respect to SwiftUI."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, it becomes more difficult for us to determine what feature is actually being presented. We"},{"type":"text","text":" "},{"type":"text","text":"must check multiple optionals to figure out which one is non-"},{"code":"nil","type":"codeVoice"},{"text":", and then we must figure out how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to interpret when multiple pieces of state are non-"},{"code":"nil","type":"codeVoice"},{"text":" at the same time.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And the number of invalid states increases exponentially with respect to the number of features that"},{"text":" ","type":"text"},{"text":"can be navigated to. For example, 3 optionals leads to 4 invalid states, 4 optionals leads to 11","type":"text"},{"type":"text","text":" "},{"text":"invalid states, and 5 optionals leads to 26 invalid states.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For these reasons, and more, it can be better to model multiple destinations in a feature as a"},{"text":" ","type":"text"},{"type":"text","text":"single enum rather than multiple optionals. So the example of above, with 3 optionals, can be"},{"type":"text","text":" "},{"text":"refactored as an enum:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum State {","  case addItem(AddFeature.State)","  case detailItem(DetailFeature.State)","  case editItem(EditFeature.State)","  \/\/ ...","}"]},{"inlineContent":[{"text":"This gives us compile-time proof that only one single destination can be active at a time.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to utilize this style of domain modeling you must take a few extra steps. First you model a","type":"text"},{"type":"text","text":" "},{"text":"“destination” reducer that encapsulates the domains and behavior of all of the features that you can","type":"text"},{"type":"text","text":" "},{"text":"navigate to. And typically it’s best to nest this reducer inside the feature that can perform the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigation:"}]},{"code":["struct InventoryFeature: Reducer {","  \/\/ ...","","  struct Destination: Reducer {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"Both the "},{"code":"State","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" types nested in the reducer are enums, with a case for each"},{"text":" ","type":"text"},{"type":"text","text":"screen that can be navigated to. Further, the "},{"type":"codeVoice","code":"body"},{"text":" computed property has a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer for"},{"type":"text","text":" "},{"type":"text","text":"each feature, and uses case paths for focusing in on the specific case of the state and action"},{"text":" ","type":"text"},{"type":"text","text":"enums."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"With that done we can now hold onto a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"single","type":"text"}]},{"text":" piece of optional state in our feature, using the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" property wrapper, and we hold onto the destination actions using the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" type:","type":"text"}]},{"code":["struct InventoryFeature: Reducer {","  struct State { ","    @PresentationState var destination: Destination.State?","    \/\/ ...","  }","  enum Action {","    case destination(PresentationAction<Destination.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And then we must make use of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" operator to"},{"type":"text","text":" "},{"text":"integrate the domain of the destination with the domain of the parent feature:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryFeature: Reducer {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ ...","    }","    .ifLet(\\.$destination, action: \/Action.destination) { ","      Destination()","    }","  }","}"]},{"inlineContent":[{"text":"That completes the steps for integrating the child and parent features together.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now when we want to present a particular feature we can simply populate the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state"},{"text":" ","type":"text"},{"type":"text","text":"with a case of the enum:"}],"type":"paragraph"},{"code":["case addButtonTapped:","  state.destination = .addItem(AddFeature.State())","  return .none"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And at any time we can figure out exactly what feature is being presented by switching or otherwise","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"destructuring the single piece of "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state rather than checking multiple optional values."}]},{"type":"paragraph","inlineContent":[{"text":"The final step is to make use of the special view modifiers that come with this library that mimic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s APIs, but are tuned specifically for enum state. In particular, you provide a store that"},{"text":" ","type":"text"},{"type":"text","text":"is focused in on the "},{"type":"codeVoice","code":"Destination"},{"text":" domain, and then provide transformations for isolating a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"particular case of the state and action enums."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose the “add” screen is presented as a sheet, the “edit” screen is presented","type":"text"},{"type":"text","text":" "},{"text":"by a popover, and the “detail” screen is presented in a drill-down. Then we can use the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":".sheet(store:state:action:)"},{"text":", ","type":"text"},{"code":".popover(store:state:action:)","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".navigationDestination(store:state:action:)"},{"type":"text","text":" view modifiers to have each of those styles of"},{"type":"text","text":" "},{"text":"presentation powered by the respective case of the destination enum:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.addItem,","      action: InventoryFeature.Destination.Action.addItem","    ) { store in ","      AddFeatureView(store: store)","    }","    .popover(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.editItem,","      action: InventoryFeature.Destination.Action.editItem","    ) { store in ","      EditFeatureView(store: store)","    }","    .navigationDestination(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.detailItem,","      action: InventoryFeature.Destination.Action.detailItem","    ) { store in ","      DetailFeatureView(store: store)","    }","  }","}"]},{"inlineContent":[{"text":"With those steps completed you can be sure that your domains are modeled as concisely as possible.","type":"text"},{"text":" ","type":"text"},{"text":"If the “add” item sheet was presented, and you decided to mutate the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" state to point","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"codeVoice","code":".detailItem"},{"type":"text","text":" case, then you can be certain that the sheet will be dismissed and the"},{"type":"text","text":" "},{"text":"drill-down will occur immediately.","type":"text"}],"type":"paragraph"},{"level":4,"anchor":"API-Unification","text":"API Unification","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"One of the best features of tree-based navigation is that it unifies all forms of navigation with a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"single style of API. First of all, regardless of the type of navigation you plan on performing,"},{"text":" ","type":"text"},{"type":"text","text":"integrating the parent and child features together can be done with the single"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","isActive":true},{"type":"text","text":" operator. This one single API services all"},{"text":" ","type":"text"},{"type":"text","text":"forms of optional-driven navigation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view, whether you are wanting to perform a drill-down, show a sheet, display"},{"text":" ","type":"text"},{"text":"an alert, or even show a custom navigation component, all you need to do is invoke an API that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is provided a store focused on some "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":". If you do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that, then the API can handle the rest, making sure to present the child view when the state"},{"type":"text","text":" "},{"type":"text","text":"becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and dismissing when it goes back to "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that theoretically you could have a single view that needs to be able to show a sheet,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"popover, drill-down, alert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" confirmation dialog, and all of the work to display the various"},{"type":"text","text":" "},{"type":"text","text":"forms of navigation could be as simple as this:"}]},{"code":[".sheet(","  store: self.store.scope(state: \\.addItem, action: { .addItem($0) })",") { store in ","  AddFeatureView(store: store)","}",".popover(","  store: self.store.scope(state: \\.editItem, action: { .editItem($0) })",") { store in ","  EditFeatureView(store: store)","}",".navigationDestination(","  store: self.store.scope(state: \\.detailItem, action: { .detailItem($0) })",") { store in ","  DetailFeatureView(store: store)","}",".alert(","  store: self.store.scope(state: \\.alert, action: { .alert($0) })",")",".confirmationDialog(","  store: self.store.scope(state: \\.confirmationDialog, action: { .confirmationDialog($0) })",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In each case we provide a store scoped to the presentation domain, and a view that will be presented","type":"text"},{"text":" ","type":"text"},{"text":"when its corresponding state flips to non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". It is incredibly powerful to see that so many"},{"text":" ","type":"text"},{"type":"text","text":"seemingly disparate forms of navigation can be unified under a single style of API."}]},{"anchor":"Integration","type":"heading","level":2,"text":"Integration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"text":" ","type":"text"},{"type":"text","text":"access to everything happening inside the child feature. You can use this as a means to integrate"},{"type":"text","text":" "},{"type":"text","text":"the logic of child and parent features. For example, if you want to detect when the “Save” button"},{"type":"text","text":" "},{"type":"text","text":"inside the edit feature is tapped, you can simply destructure on that action. This consists of"},{"type":"text","text":" "},{"text":"pattern matching on the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", then the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"text":"then the feature you are interested in, and finally the action you are interested in:","type":"text"}]},{"code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  \/\/ ..."],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"text":" ","type":"text"},{"text":"additional logic, such as closing the “edit” feature and saving the edited item to the database:","type":"text"}]},{"type":"codeListing","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = self.destination","  else { return .none }","","  state.destination = nil","  return .run { _ in","    self.database.save(editItemState.item)","  }"],"syntax":"swift"},{"anchor":"Dismissal","level":2,"type":"heading","text":"Dismissal"},{"inlineContent":[{"text":"Dismissing a presented feature is as simple as ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-ing out the state that represents the"},{"type":"text","text":" "},{"text":"presented feature:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.destination = nil","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the presenting state you must have access to that state, and usually only the"},{"type":"text","text":" "},{"type":"text","text":"parent has access, but often we would like to encapsulate the logic of dismissing a feature to be"},{"type":"text","text":" "},{"text":"inside the child feature without needing explicit communication with the parent.","type":"text"}]},{"inlineContent":[{"text":"SwiftUI provides a wonderful tool for allowing child ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"views","type":"text"}]},{"type":"text","text":" to dismiss themselves from the parent,"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"type":"codeVoice","code":"dismiss"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and it can be used like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view with a presentation, and"},{"type":"text","text":" "},{"text":"causes it to dismiss by writing ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" to the binding that drives the presentation. This","type":"text"},{"text":" ","type":"text"},{"text":"can be incredibly useful, but it is also relegated to the view layer. It is not possible to use","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"text":" ","type":"text"},{"text":"for dismissal such as validation or async work.","type":"text"}]},{"inlineContent":[{"text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,","type":"text"},{"type":"text","text":" "},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dependency management system (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"reference","isActive":true},{"type":"text","text":") using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .closeButtonTapped:","      return .run { _ in await self.dismiss() }","    } ","  }","}"],"syntax":"swift"},{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"type":"text","text":" function is async which means it cannot be invoked directly inside a"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Instead it must be called from "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"self.dismiss()","type":"codeVoice"},{"text":" is invoked it will ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the state responsible for presenting the feature"},{"text":" ","type":"text"},{"type":"text","text":"by sending a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true,"type":"reference"},{"type":"text","text":" action back into the system, causing the feature to be"},{"text":" ","type":"text"},{"text":"dismissed. This allows you to encapsulate the logic for dismissing a child feature entirely inside","type":"text"},{"text":" ","type":"text"},{"text":"the child domain without explicitly communicating with the parent.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"]},{"type":"paragraph","inlineContent":[{"text":"To do so would be to send an action for a feature while its state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", and that will cause","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a runtime warning in Xcode and a test failure when running tests."}]}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":" and the Composable Architecture’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"code":"@Dependency(\\.dismiss)","type":"codeVoice"},{"text":" serve similar purposes, but are completely different","type":"text"},{"type":"text","text":" "},{"text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s","type":"text"},{"type":"text","text":" "},{"text":"dependency value can only be used inside reducers.","type":"text"}],"type":"paragraph"}],"style":"warning","name":"Warning"},{"anchor":"Testing","type":"heading","level":2,"text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of properly modeling your domains for navigation is that testing becomes quite easy."},{"text":" ","type":"text"},{"text":"Further, using “non-exhaustive testing” (see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","type":"reference"},{"type":"text","text":") can be very"},{"type":"text","text":" "},{"text":"useful for testing navigation since you often only want to assert on a few high level details and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not all state mutations and effects."}]},{"inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .run { _ in await self.dismiss() }","        : .none","    }","  }","}"]},{"inlineContent":[{"text":"And then let’s embed that feature into a parent feature using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Feature: Reducer {","  struct State: Equatable {","    @PresentationState var counter: CounterFeature.State?","  }","  enum Action: Equatable {","    case counter(PresentationAction<CounterFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .ifLet(\\.$counter, action: \/Action.counter) {","      CounterFeature()","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"text":" reducer that proves that when the child counter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"text":" that starts in a state with the count already set to 3:","type":"text"}],"type":"paragraph"},{"code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then we can send the "},{"type":"codeVoice","code":".incrementButtonTapped"},{"type":"text","text":" action in the counter child feature to confirm"},{"text":" ","type":"text"},{"text":"that the count goes up by one:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we can send it one more time to see that the count goes up to 5:"}]},{"syntax":"swift","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 5","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And then we finally expect that the child dismisses itself, which manifests itself as the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true,"type":"reference"},{"type":"text","text":" action being sent to "},{"type":"codeVoice","code":"nil"},{"text":" out the ","type":"text"},{"type":"codeVoice","code":"counter"},{"text":" state, which we can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"assert using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true,"type":"reference"},{"type":"text","text":" method on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.counter(.dismiss)) {","  $0.counter = nil","}"]},{"inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"type":"text","text":" "},{"text":"other.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"text":" ","type":"text"},{"type":"text","text":"By default, "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"text":" ","type":"text"},{"text":"sure that all effects finish by the end of the test (see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","type":"reference","isActive":true},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"text":") then we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"type":"text","text":" "},{"type":"text","text":"a dismiss action:"}]},{"code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.receive(.counter(.dismiss)) ","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"text":" ","type":"text"},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"inlineContent":[{"text":"That is the basics of testing, but things get a little more complicated when you leverage the","type":"text"},{"text":" ","type":"text"},{"text":"concepts outlined in ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","type":"reference","isActive":true},{"type":"text","text":" in which you model multiple destinations"},{"type":"text","text":" "},{"text":"as an enum instead of multiple optionals. In order to assert on state changes when using enum","type":"text"},{"type":"text","text":" "},{"text":"state you must be able to extract the associated state from the enum, make a mutation, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"embed the new state back into the enum."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The library provides a tool to perform these steps in a single step, and it is called "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["await store.send(.destination(.presented(.counter(.incrementButtonTapped)))) {","  XCTModify(&$0.destination, case: \/Feature.Destination.State.counter) { ","    $0.count = 4","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" function takes an "},{"type":"codeVoice","code":"inout"},{"text":" piece of enum state as its first argument and a case","type":"text"},{"type":"text","text":" "},{"text":"path for its second argument, and then uses the case path to extract the payload in that case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"type":"text","text":" "},{"type":"text","text":"above, we are wanting to mutate the "},{"type":"codeVoice","code":"$0.destination"},{"text":" enum by isolating the ","type":"text"},{"type":"codeVoice","code":".counter"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and mutating the "},{"code":"count","type":"codeVoice"},{"text":" to be 4 since it incremented by one. Further, if the case of","type":"text"},{"type":"text","text":" "},{"code":"$0.destination","type":"codeVoice"},{"text":" didn’t match the case path, then a test failure would be emitted.","type":"text"}],"type":"paragraph"}]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Tree-based navigation"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","title":"PresentationAction.dismiss","abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"dismiss","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationO0L_qd__mfp","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationR0L_qd_0_mfp","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"text":"Destination","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_PresentationReducerV","kind":"typeIdentifier","text":"_PresentationReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Destination","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action11destination6fileID4lineAA013_PresentationC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","role":"symbol","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"type":"topic","title":"PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"#Basics":{"type":"link","title":"Basics","url":"#Basics","titleInlineContent":[{"text":"Basics","type":"text"}],"identifier":"#Basics"},"#Dismissal":{"type":"link","title":"Dismissal","url":"#Dismissal","identifier":"#Dismissal","titleInlineContent":[{"text":"Dismissal","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","type":"topic","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","role":"symbol","title":"exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"#Testing":{"title":"Testing","type":"link","url":"#Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"identifier":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"title":"DismissEffect","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"abstract":[{"type":"text","text":"비동기의 단위 작업을 감싼 "},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"title":"run(priority:operation:catch:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"send"},{"kind":"text","text":": "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"send","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"type":"topic","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:line:)":{"title":"ifLet(_:action:then:fileID:line:)","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"WrappedState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"WrappedAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"WrappedState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action4then6fileID4lineAA03_IfeC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzqd__SgG_9CasePaths0pN0Vy6ActionQzqd_0_Gqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AUQyd_1_Rsd_0_AaBRd_1_r1_lF07WrappedO0L_qd__mfp"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"text":"WrappedAction","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action4then6fileID4lineAA03_IfeC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzqd__SgG_9CasePaths0pN0Vy6ActionQzqd_0_Gqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AUQyd_1_Rsd_0_AaBRd_1_r1_lF07WrappedR0L_qd_0_mfp","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": () -> ","kind":"text"},{"text":"Wrapped","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action4then6fileID4lineAA03_IfeC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzqd__SgG_9CasePaths0pN0Vy6ActionQzqd_0_Gqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AUQyd_1_Rsd_0_AaBRd_1_r1_lF7WrappedL_qd_1_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"_IfLetReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13_IfLetReducerV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE5ifLet_6action4then6fileID4lineAA03_IfeC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzqd__SgG_9CasePaths0pN0Vy6ActionQzqd_0_Gqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AUQyd_1_Rsd_0_AaBRd_1_r1_lF7WrappedL_qd_1_mfp","text":"Wrapped"},{"text":">","kind":"text"}],"abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"#Integration":{"type":"link","title":"Integration","url":"#Integration","identifier":"#Integration","titleInlineContent":[{"type":"text","text":"Integration"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","kind":"section","title":"Non-exhaustive testing","type":"topic","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/scope","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"title":"Scope","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"url":"\/documentation\/composablearchitecture\/testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},"#Enum-state":{"title":"Enum state","type":"link","url":"#Enum-state","titleInlineContent":[{"type":"text","text":"Enum state"}],"identifier":"#Enum-state"},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","title":"case path","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"type":"text","text":"case path"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"type":"topic","kind":"article","title":"Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"title":"NavigationLinkStore","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/navigationlinkstore","abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","role":"article","title":"Dependencies","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","title":"PresentationAction.presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO0D0xmfp","text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE6Actionq_mfp"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE5Statexmfp","kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"receive(_:timeout:assert:file:line:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"type":"topic","title":"Enum state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","abstract":[],"kind":"section"}}}