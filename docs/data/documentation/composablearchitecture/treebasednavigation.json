{"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree-based navigation is the process of modeling navigation using optional and enum state. This"},{"text":" ","type":"text"},{"type":"text","text":"style of navigation allows you to deep-link into any state of your application by simply"},{"type":"text","text":" "},{"text":"constructing a deeply nested piece of state, handing it off to SwiftUI, and letting it take care of","type":"text"},{"type":"text","text":" "},{"text":"the rest.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Basics","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Enum-state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Integration","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Dismissal","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Testing","type":"reference"}],"type":"paragraph"}]}]},{"level":2,"text":"Basics","anchor":"Basics","type":"heading"},{"inlineContent":[{"text":"The tools for this style of navigation include the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" property wrapper,"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)","isActive":true,"type":"reference"},{"text":" operator, and a bunch of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"APIs that mimic SwiftUI’s regular tools, such as "},{"type":"codeVoice","code":".sheet"},{"type":"text","text":", "},{"type":"codeVoice","code":".popover"},{"type":"text","text":", etc., but tuned specifically"},{"type":"text","text":" "},{"text":"for the Composable Architecture.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The process of integrating two features together for navigation largely consists of 2 steps:"},{"type":"text","text":" "},{"text":"integrating the features’ domains together and integrating the features’ views together. One","type":"text"},{"type":"text","text":" "},{"text":"typically starts by integrating the features’ domains together. This consists of adding the child’s","type":"text"},{"type":"text","text":" "},{"text":"state and actions to the parent, and then utilizing a reducer operator to compose the child reducer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into the parent."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a list of items and you want to be able to show a sheet to display a"},{"text":" ","type":"text"},{"type":"text","text":"form for adding a new item. We can integrate state and actions together by utilizing the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" types:","type":"text"}]},{"type":"codeListing","code":["struct InventoryFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addItem: ItemFormFeature.State?","    var items: IdentifiedArrayOf<Item> = []","    \/\/ ...","  }","","  enum Action: Equatable {","    case addItem(PresentationAction<ItemFormFeature.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addItem"},{"text":" state is held as an optional. A non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value represents that feature is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"being presented, and "},{"type":"codeVoice","code":"nil"},{"text":" presents the feature is dismissed.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"Next you can integrate the reducers of the parent and child features by using the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)","type":"reference","isActive":true},{"type":"text","text":" reducer operator, as well as having an action in the"},{"type":"text","text":" "},{"type":"text","text":"parent domain for populating the child’s state to drive navigation:"}]},{"code":["struct InventoryFeature: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action: Equatable { \/* ... *\/ }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      switch action {","      case .addButtonTapped:","        \/\/ Populating this state performs the navigation","        state.addItem = ItemFormFeature.State()","        return .none","","      \/\/ ...","      }","    }","    .ifLet(\\.$addItem, action: \/Action.addItem) {","      ItemFormFeature()","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The key path used with ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":" focuses on the ","type":"text"},{"code":"@PresentationState","type":"codeVoice"},{"text":" projected value since it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"type":"codeVoice","code":"$"},{"text":" syntax. Also note that the action uses a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"text":", which is analogous to key paths but","type":"text"},{"type":"text","text":" "},{"text":"tuned for enums, and uses the forward slash syntax.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all that it takes to integrate the domains and logic of the parent and child features. Next"},{"type":"text","text":" "},{"type":"text","text":"we need to integrate the features’ views. This is done using view modifiers that look similar to"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s, but are tuned specifically to work with the Composable Architecture."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to show a sheet from the "},{"code":"addItem","type":"codeVoice"},{"text":" state in the ","type":"text"},{"type":"codeVoice","code":"InventoryFeature"},{"type":"text","text":", we can use"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"sheet(store:)","type":"codeVoice"},{"text":" modifier that takes a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" as an argument that is focused on presentation"},{"type":"text","text":" "},{"type":"text","text":"state and actions:"}]},{"code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$addItem, action: { .addItem($0) })","    ) { store in","      ItemFormView(store: store)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"We again must specify a key path to the ","type":"text"},{"type":"codeVoice","code":"@PresentationState"},{"text":" projected value, ","type":"text"},{"inlineContent":[{"type":"text","text":"i.e."}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"\\.$addItem","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"text":"With those few steps completed the domains and views of the parent and child features are now","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integrated together, and when the "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state flips to a non-"},{"type":"codeVoice","code":"nil"},{"text":" value the sheet will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"presented, and when it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’d out it will be dismissed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this example we are using the "},{"code":".sheet","type":"codeVoice"},{"type":"text","text":" view modifier, but the library ships with overloads for"},{"text":" ","type":"text"},{"type":"text","text":"all of SwiftUI’s navigation APIs that take stores of presentation domain, including:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"alert(store:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"confirmationDialog(store:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sheet(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"popover(store:)"}]}]},{"content":[{"inlineContent":[{"code":"fullScreenCover(store:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"navigationDestination(store:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This should make it possible to use optional state to drive any kind of navigation in a SwiftUI","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application."}]},{"text":"Enum state","anchor":"Enum-state","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"While driving navigation with optional state can be powerful, it can also lead to less-than-ideal"},{"type":"text","text":" "},{"type":"text","text":"modeled domains. In particular, if a feature can navigate to multiple screens then you may be"},{"type":"text","text":" "},{"type":"text","text":"tempted to model that with multiple optional values:"}],"type":"paragraph"},{"type":"codeListing","code":["struct State {","  @PresentationState var detailItem: DetailFeature.State?","  @PresentationState var editItem: EditFeature.State?","  @PresentationState var addItem: AddFeature.State?","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, this can lead to invalid states, such as 2 or more states being non-nil at the same time,"},{"text":" ","type":"text"},{"type":"text","text":"and that can cause a lot of problems. First of all, SwiftUI does not support presenting multiple"},{"text":" ","type":"text"},{"text":"views at the same time from a single view, and so by allowing this in our state we run the risk of","type":"text"},{"type":"text","text":" "},{"text":"putting our application into an inconsistent state with respect to SwiftUI.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Second, it becomes more difficult for us to determine what feature is actually being presented. We","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must check multiple optionals to figure out which one is non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", and then we must figure out how"},{"text":" ","type":"text"},{"type":"text","text":"to interpret when multiple pieces of state are non-"},{"type":"codeVoice","code":"nil"},{"text":" at the same time.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And the number of invalid states increases exponentially with respect to the number of features that"},{"text":" ","type":"text"},{"type":"text","text":"can be navigated to. For example, 3 optionals leads to 4 invalid states, 4 optionals leads to 11"},{"text":" ","type":"text"},{"type":"text","text":"invalid states, and 5 optionals leads to 26 invalid states."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For these reasons, and more, it can be better to model multiple destinations in a feature as a"},{"type":"text","text":" "},{"type":"text","text":"single enum rather than multiple optionals. So the example of above, with 3 optionals, can be"},{"text":" ","type":"text"},{"text":"refactored as an enum:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum State {","  case addItem(AddFeature.State)","  case detailItem(DetailFeature.State)","  case editItem(EditFeature.State)","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives us compile-time proof that only one single destination can be active at a time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to utilize this style of domain modeling you must take a few extra steps. First you model a"},{"text":" ","type":"text"},{"text":"“destination” reducer that encapsulates the domains and behavior of all of the features that you can","type":"text"},{"text":" ","type":"text"},{"text":"navigate to. And typically it’s best to nest this reducer inside the feature that can perform the","type":"text"},{"type":"text","text":" "},{"text":"navigation:","type":"text"}]},{"code":["struct InventoryFeature: Reducer {","  \/\/ ...","","  struct Destination: Reducer {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"text":"Both the ","type":"text"},{"code":"State","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" types nested in the reducer are enums, with a case for each"},{"text":" ","type":"text"},{"type":"text","text":"screen that can be navigated to. Further, the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" computed property has a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true},{"text":" reducer for","type":"text"},{"type":"text","text":" "},{"text":"each feature, and uses case paths for focusing in on the specific case of the state and action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enums."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"With that done we can now hold onto a ","type":"text"},{"inlineContent":[{"text":"single","type":"text"}],"type":"emphasis"},{"text":" piece of optional state in our feature, using the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper, and we hold onto the destination actions using the"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"text":" type:","type":"text"}]},{"syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State { ","    @PresentationState var destination: Destination.State?","    \/\/ ...","  }","  enum Action {","    case destination(PresentationAction<Destination.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we must make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","isActive":true,"type":"reference"},{"text":" operator to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integrate the domain of the destination with the domain of the parent feature:"}]},{"code":["struct InventoryFeature: Reducer {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ ...","    }","    .ifLet(\\.$destination, action: \/Action.destination) { ","      Destination()","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"That completes the steps for integrating the child and parent features together."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Now when we want to present a particular feature we can simply populate the ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state"},{"text":" ","type":"text"},{"type":"text","text":"with a case of the enum:"}]},{"type":"codeListing","syntax":"swift","code":["case addButtonTapped:","  state.destination = .addItem(AddFeature.State())","  return .none"]},{"inlineContent":[{"text":"And at any time we can figure out exactly what feature is being presented by switching or otherwise","type":"text"},{"text":" ","type":"text"},{"text":"destructuring the single piece of ","type":"text"},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state rather than checking multiple optional values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The final step is to make use of the special view modifiers that come with this library that mimic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s APIs, but are tuned specifically for enum state. In particular, you provide a store that"},{"text":" ","type":"text"},{"text":"is focused in on the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" domain, and then provide transformations for isolating a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"particular case of the state and action enums."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose the “add” screen is presented as a sheet, the “edit” screen is presented","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a popover, and the “detail” screen is presented in a drill-down. Then we can use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":".sheet(store:state:action:)"},{"text":", ","type":"text"},{"code":".popover(store:state:action:)","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"code":".navigationDestination(store:state:action:)","type":"codeVoice"},{"text":" view modifiers to have each of those styles of","type":"text"},{"text":" ","type":"text"},{"text":"presentation powered by the respective case of the destination enum:","type":"text"}]},{"syntax":"swift","code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.addItem,","      action: InventoryFeature.Destination.Action.addItem","    ) { store in ","      AddFeatureView(store: store)","    }","    .popover(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.editItem,","      action: InventoryFeature.Destination.Action.editItem","    ) { store in ","      EditFeatureView(store: store)","    }","    .navigationDestination(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.detailItem,","      action: InventoryFeature.Destination.Action.detailItem","    ) { store in ","      DetailFeatureView(store: store)","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those steps completed you can be sure that your domains are modeled as concisely as possible."},{"text":" ","type":"text"},{"type":"text","text":"If the “add” item sheet was presented, and you decided to mutate the "},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state to point"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"code":".detailItem","type":"codeVoice"},{"type":"text","text":" case, then you can be certain that the sheet will be dismissed and the"},{"text":" ","type":"text"},{"type":"text","text":"drill-down will occur immediately."}]},{"text":"API Unification","type":"heading","level":4,"anchor":"API-Unification"},{"inlineContent":[{"text":"One of the best features of tree-based navigation is that it unifies all forms of navigation with a","type":"text"},{"text":" ","type":"text"},{"text":"single style of API. First of all, regardless of the type of navigation you plan on performing,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integrating the parent and child features together can be done with the single"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","isActive":true},{"text":" operator. This one single API services all","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"forms of optional-driven navigation."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And then in the view, whether you are wanting to perform a drill-down, show a sheet, display","type":"text"},{"type":"text","text":" "},{"text":"an alert, or even show a custom navigation component, all you need to do is invoke an API that","type":"text"},{"text":" ","type":"text"},{"text":"is provided a store focused on some ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":". If you do"},{"text":" ","type":"text"},{"type":"text","text":"that, then the API can handle the rest, making sure to present the child view when the state"},{"text":" ","type":"text"},{"text":"becomes non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" and dismissing when it goes back to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that theoretically you could have a single view that needs to be able to show a sheet,","type":"text"},{"type":"text","text":" "},{"text":"popover, drill-down, alert ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"type":"text","text":" confirmation dialog, and all of the work to display the various"},{"type":"text","text":" "},{"text":"forms of navigation could be as simple as this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".sheet(","  store: self.store.scope(state: \\.addItem, action: { .addItem($0) })",") { store in ","  AddFeatureView(store: store)","}",".popover(","  store: self.store.scope(state: \\.editItem, action: { .editItem($0) })",") { store in ","  EditFeatureView(store: store)","}",".navigationDestination(","  store: self.store.scope(state: \\.detailItem, action: { .detailItem($0) })",") { store in ","  DetailFeatureView(store: store)","}",".alert(","  store: self.store.scope(state: \\.alert, action: { .alert($0) })",")",".confirmationDialog(","  store: self.store.scope(state: \\.confirmationDialog, action: { .confirmationDialog($0) })",")"]},{"inlineContent":[{"type":"text","text":"In each case we provide a store scoped to the presentation domain, and a view that will be presented"},{"text":" ","type":"text"},{"type":"text","text":"when its corresponding state flips to non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". It is incredibly powerful to see that so many"},{"type":"text","text":" "},{"text":"seemingly disparate forms of navigation can be unified under a single style of API.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Integration","anchor":"Integration"},{"inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"type":"text","text":" "},{"text":"access to everything happening inside the child feature. You can use this as a means to integrate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the logic of child and parent features. For example, if you want to detect when the “Save” button"},{"text":" ","type":"text"},{"type":"text","text":"inside the edit feature is tapped, you can simply destructure on that action. This consists of"},{"text":" ","type":"text"},{"text":"pattern matching on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"type":"text","text":", then the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference","isActive":true},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the feature you are interested in, and finally the action you are interested in:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  \/\/ ..."]},{"inlineContent":[{"text":"Once inside that case you can then try extracting out the feature state so that you can perform","type":"text"},{"type":"text","text":" "},{"text":"additional logic, such as closing the “edit” feature and saving the edited item to the database:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = self.destination","  else { return .none }","","  state.destination = nil","  return .run { _ in","    self.database.save(editItemState.item)","  }"]},{"level":2,"anchor":"Dismissal","type":"heading","text":"Dismissal"},{"inlineContent":[{"type":"text","text":"Dismissing a presented feature is as simple as "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"-ing out the state that represents the"},{"type":"text","text":" "},{"type":"text","text":"presented feature:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.destination = nil","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the presenting state you must have access to that state, and usually only the"},{"text":" ","type":"text"},{"text":"parent has access, but often we would like to encapsulate the logic of dismissing a feature to be","type":"text"},{"type":"text","text":" "},{"text":"inside the child feature without needing explicit communication with the parent.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"inlineContent":[{"type":"text","text":"views"}],"type":"emphasis"},{"type":"text","text":" to dismiss themselves from the parent,"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it can be used like so:"}]},{"syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"self.dismiss()","type":"codeVoice"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view with a presentation, and"},{"type":"text","text":" "},{"text":"causes it to dismiss by writing ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"text":" to the binding that drives the presentation. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"text":" ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"text":" elsewhere, like in an observable object, which would allow you to have nuanced logic","type":"text"},{"text":" ","type":"text"},{"text":"for dismissal such as validation or async work.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s"},{"text":" ","type":"text"},{"type":"text","text":"dependency management system (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","isActive":true},{"text":") using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":":","type":"text"}]},{"code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .closeButtonTapped:","      return .run { _ in await self.dismiss() }","    } ","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"type":"text","text":" "},{"text":"reducer. Instead it must be called from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will "},{"type":"codeVoice","code":"nil"},{"text":" out the state responsible for presenting the feature","type":"text"},{"type":"text","text":" "},{"text":"by sending a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"reference","isActive":true},{"type":"text","text":" action back into the system, causing the feature to be"},{"text":" ","type":"text"},{"text":"dismissed. This allows you to encapsulate the logic for dismissing a child feature entirely inside","type":"text"},{"text":" ","type":"text"},{"text":"the child domain without explicitly communicating with the parent.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Because dismissal is handled by sending an action, it is not valid to ever send an action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"code":"dismiss()","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"]},{"type":"paragraph","inlineContent":[{"text":"To do so would be to send an action for a feature while its state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", and that will cause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a runtime warning in Xcode and a test failure when running tests."}]}],"style":"note","name":"Note","type":"aside"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"text":" and the Composable Architecture’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"text":" serve similar purposes, but are completely different","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"text":" ","type":"text"},{"type":"text","text":"dependency value can only be used inside reducers."}],"type":"paragraph"}],"name":"Warning","style":"warning"},{"level":2,"anchor":"Testing","text":"Testing","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of properly modeling your domains for navigation is that testing becomes quite easy."},{"type":"text","text":" "},{"type":"text","text":"Further, using “non-exhaustive testing” (see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can be very"},{"text":" ","type":"text"},{"text":"useful for testing navigation since you often only want to assert on a few high level details and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not all state mutations and effects."}]},{"inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"text":"count is greater than or equal to 5:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .run { _ in await self.dismiss() }","        : .none","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And then let’s embed that feature into a parent feature using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","isActive":true},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: Reducer {","  struct State: Equatable {","    @PresentationState var counter: CounterFeature.State?","  }","  enum Action: Equatable {","    case counter(PresentationAction<CounterFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .ifLet(\\.$counter, action: \/Action.counter) {","      CounterFeature()","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"text":" reducer that proves that when the child counter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" for ","type":"text"},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" that starts in a state with the count already set to 3:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Then we can send the ","type":"text"},{"code":".incrementButtonTapped","type":"codeVoice"},{"type":"text","text":" action in the counter child feature to confirm"},{"type":"text","text":" "},{"text":"that the count goes up by one:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we can send it one more time to see that the count goes up to 5:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 5","}"]},{"inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"text":" action being sent to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the "},{"code":"counter","type":"codeVoice"},{"type":"text","text":" state, which we can"},{"text":" ","type":"text"},{"text":"assert using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso"},{"text":" method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.receive(.counter(.dismiss)) {","  $0.counter = nil","}"]},{"type":"paragraph","inlineContent":[{"text":"This shows how we can write very nuanced tests on how parent and child features interact with each","type":"text"},{"type":"text","text":" "},{"text":"other.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"type":"text","text":" "},{"text":"By default, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"text":" ","type":"text"},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","isActive":true},{"type":"text","text":" for more info)."}]},{"inlineContent":[{"text":"But ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" also supports a form of testing known as “non-exhaustive testing” that allows you"},{"text":" ","type":"text"},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if we turn off exhaustivity on the test store (see ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"type":"text","text":") then we"},{"type":"text","text":" "},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"type":"text","text":" "},{"type":"text","text":"a dismiss action:"}]},{"code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.receive(.counter(.dismiss)) ","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"type":"text","text":" "},{"type":"text","text":"lines and is more resilient to future changes in the features that we don’t necessarily care about."}]},{"inlineContent":[{"text":"That is the basics of testing, but things get a little more complicated when you leverage the","type":"text"},{"text":" ","type":"text"},{"text":"concepts outlined in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"text":" in which you model multiple destinations","type":"text"},{"type":"text","text":" "},{"text":"as an enum instead of multiple optionals. In order to assert on state changes when using enum","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state you must be able to extract the associated state from the enum, make a mutation, and then"},{"type":"text","text":" "},{"text":"embed the new state back into the enum.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The library provides a tool to perform these steps in a single step, and it is called ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["await store.send(.destination(.presented(.counter(.incrementButtonTapped)))) {","  XCTModify(&$0.destination, case: \/Feature.Destination.State.counter) { ","    $0.count = 4","  }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" function takes an "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" piece of enum state as its first argument and a case"},{"type":"text","text":" "},{"text":"path for its second argument, and then uses the case path to extract the payload in that case,","type":"text"},{"type":"text","text":" "},{"text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"above, we are wanting to mutate the "},{"type":"codeVoice","code":"$0.destination"},{"type":"text","text":" enum by isolating the "},{"type":"codeVoice","code":".counter"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"text":"and mutating the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" to be 4 since it incremented by one. Further, if the case of"},{"text":" ","type":"text"},{"code":"$0.destination","type":"codeVoice"},{"text":" didn’t match the case path, then a test failure would be emitted.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/treebasednavigation"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"title":"Tree-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"],"generated":true}],"metadata":{"roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Tree-based navigation"},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"text":" ","type":"text"},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"references":{"#Integration":{"type":"link","identifier":"#Integration","title":"Integration","url":"#Integration","titleInlineContent":[{"text":"Integration","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","role":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","kind":"symbol","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"title":"run(priority:operation:catch:fileID:line:)","type":"topic","abstract":[{"text":"비동기의 단위 작업을 감싼 ","type":"text"},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","kind":"typeIdentifier","text":"TaskPriority"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:line:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"WrappedState"},{"text":", ","kind":"text"},{"text":"WrappedAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"WrappedState","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"WrappedAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"then","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"_IfLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"ifLet(_:action:then:fileID:line:)","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:line:)","kind":"symbol","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"#Dismissal":{"title":"Dismissal","titleInlineContent":[{"text":"Dismissal","type":"text"}],"url":"#Dismissal","identifier":"#Dismissal","type":"link"},"#Testing":{"type":"link","identifier":"#Testing","title":"Testing","url":"#Testing","titleInlineContent":[{"type":"text","text":"Testing"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"type":"topic","title":"Navigation","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/navigation","kind":"article","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"title":"PresentationState","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},"http://github.com/pointfreeco/swift-case-paths":{"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","title":"case path","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"type":"text","text":"case path"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"presented","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"type":"codeVoice","code":"nil"},{"text":" presentation state.","type":"text"}],"type":"topic","title":"PresentationAction.presented(_:)","role":"symbol"},"#Enum-state":{"titleInlineContent":[{"text":"Enum state","type":"text"}],"url":"#Enum-state","type":"link","identifier":"#Enum-state","title":"Enum state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","abstract":[{"text":"Asserts an action was received from an effect and asserts how the state changes.","type":"text"}],"title":"receive(_:timeout:assert:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"deprecated":true,"navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","url":"\/documentation\/composablearchitecture\/navigationlinkstore","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"title":"NavigationLinkStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationLinkStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/scope","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","title":"Scope","abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"navigatorTitle":[{"kind":"identifier","text":"Scope"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","url":"\/documentation\/composablearchitecture\/testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"title":"exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","kind":"section","type":"topic","abstract":[],"title":"Non-exhaustive testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"#Basics":{"type":"link","titleInlineContent":[{"type":"text","text":"Basics"}],"url":"#Basics","identifier":"#Basics","title":"Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","type":"topic","title":"ifLet(_:action:destination:fileID:line:)","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"dismiss","kind":"identifier"}],"title":"PresentationAction.dismiss","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","abstract":[{"text":"An action sent to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","title":"Enum state"}}}