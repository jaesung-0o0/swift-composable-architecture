{"abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for a dispatch queue."}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-27peg","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"prefix"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"text":"<","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"inlineContent":[{"text":"A string that identifies this scheduler and will prefix all failure","type":"text"},{"text":" ","type":"text"},{"text":"messages.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An unimplemented scheduler.","type":"text"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-27peg"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:17CombineSchedulers12AnySchedulerVAASo17OS_dispatch_queueC8DispatchE0D8TimeTypeVRszAeFE0D7OptionsVRs_rlE13unimplementedyACyAhJGSSFZ","title":"unimplemented(_:)","symbolKind":"method","modules":[{"name":"ComposableArchitecture","relatedModules":["CombineSchedulers"]}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Type Method","extendedModule":"CombineSchedulers","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"text":".","type":"text"}]}},"sections":[],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented(_:)-27peg":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-27peg","abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for a dispatch queue."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-27peg","title":"unimplemented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}