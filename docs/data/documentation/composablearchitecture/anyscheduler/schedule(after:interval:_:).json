{"metadata":{"role":"symbol","externalID":"s:7Combine9SchedulerPAAE8schedule5after8interval_AA11Cancellable_p0B8TimeTypeQz_AH_6StrideQZyyctF::SYNTHESIZED::s:17CombineSchedulers12AnySchedulerV","platforms":[{"name":"iOS","unavailable":false,"introducedAt":"13.0","beta":false,"deprecated":false},{"name":"macOS","introducedAt":"10.15","unavailable":false,"beta":false,"deprecated":false},{"beta":false,"introducedAt":"13.0","unavailable":false,"deprecated":false,"name":"tvOS"},{"unavailable":false,"beta":false,"introducedAt":"6.0","deprecated":false,"name":"watchOS"}],"extendedModule":"Combine","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"text":"(","kind":"text"},{"text":"after","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}],"symbolKind":"method","title":"schedule(after:interval:_:)","roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:interval:_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"after"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"date"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"interval","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"action","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"languages":["swift"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:interval:_:)"]}],"sections":[],"abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"Scheduler.schedule(after:interval:_:)"},{"type":"text","text":"."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/schedule(after:interval:_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"after"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable","kind":"typeIdentifier"}],"title":"schedule(after:interval:_:)","url":"\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:interval:_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:interval:_:)","type":"topic","role":"symbol","kind":"symbol","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/anyscheduler\/scheduler-implementations","title":"Scheduler Implementations","type":"topic","role":"collectionGroup"}}}