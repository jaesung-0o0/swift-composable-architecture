{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"animation","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"text":"? = .default) -> ","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An animation to be performed."}],"type":"paragraph"}],"name":"animation"}]},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you load some asynchronous data in an "},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" and then"},{"text":" ","type":"text"},{"type":"text","text":"pipe its output into a "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" field, you may be tempted to use the "},{"code":".assign(to:)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"operator:"}]},{"syntax":"swift","type":"codeListing","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, this prevents you from wrapping the ","type":"text"},{"code":"articles","type":"codeVoice"},{"type":"text","text":" mutation in "},{"code":"withAnimation","type":"codeVoice"},{"type":"text","text":" since"},{"type":"text","text":" "},{"type":"text","text":"that is hidden from you in the "},{"type":"codeVoice","code":".assign(to:)"},{"type":"text","text":" operator. In this situation you can simply"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"code":".animation","type":"codeVoice"},{"text":" operator on ","type":"text"},{"code":"Scheduler","type":"codeVoice"},{"text":" to transform ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.main"},{"text":" into a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"scheduler that performs its work inside "},{"code":"withAnimation","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Another common use case is when you have a Combine publisher made up of many publishers"},{"type":"text","text":" "},{"type":"text","text":"that have been merged or concatenated. You may want to animate the outputs of each of"},{"text":" ","type":"text"},{"text":"those publishers differently:","type":"text"}],"type":"paragraph"},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"metadata":{"title":"animation(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"kind":"text","text":"?) -> "},{"text":"AnySchedulerOf","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","extendedModule":"Combine","modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"symbolKind":"method","role":"symbol","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers12AnySchedulerV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/animation(_:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations"]]},"abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"text":" block.","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/anyscheduler\/animation(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/animation(_:)":{"url":"\/documentation\/composablearchitecture\/anyscheduler\/animation(_:)","abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"type":"text","text":" "},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"text":" block.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/animation(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"kind":"text","text":"("},{"text":"Animation","preciseIdentifier":"s:7SwiftUI9AnimationV","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"animation(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/anyscheduler\/scheduler-implementations","title":"Scheduler Implementations","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]}}}