{"metadata":{"symbolKind":"method","role":"symbol","title":"unimplemented(_:)","externalID":"s:17CombineSchedulers12AnySchedulerVAASo9NSRunLoopC10FoundationE0D8TimeTypeVRszAeFE0D7OptionsVRs_rlE13unimplementedyACyAhJGSSFZ","extendedModule":"CombineSchedulers","modules":[{"relatedModules":["CombineSchedulers"],"name":"ComposableArchitecture"}],"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"code":"RunLoop.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"text":"<","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}],"roleHeading":"Type Method"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-37rcm"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-37rcm"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for a run loop."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"prefix"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A string that identifies this scheduler and will prefix all failure"},{"type":"text","text":" "},{"type":"text","text":"messages."}]}]}]},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"An unimplemented scheduler.","type":"text"}]}],"kind":"content"}],"sections":[],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented(_:)-37rcm":{"url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-37rcm","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"text":".","type":"text"}]},"type":"topic","title":"unimplemented(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-37rcm","kind":"symbol","abstract":[{"text":"An unimplemented scheduler that can substitute itself for a run loop.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}