{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations"]]},"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"timer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":">"}],"extendedModule":"Combine","title":"timer(interval:tolerance:options:)","roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"role":"symbol","externalID":"s:7Combine9SchedulerP0A10SchedulersE5timer8interval9tolerance7optionsScSy0B8TimeTypeQzGAI_6StrideQZ_AM0B7OptionsQzSgtF::SYNTHESIZED::s:17CombineSchedulers12AnySchedulerV","symbolKind":"method"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"timer","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":" = .zero, "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"? = nil) -> "},{"text":"AsyncStream","kind":"typeIdentifier","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"name":"interval","content":[{"inlineContent":[{"text":"The time interval on which to sleep between yielding the current instant in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"time. For example, a value of "},{"code":"0.5","type":"codeVoice"},{"type":"text","text":" yields an instant approximately every half-second."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The allowed timing variance when emitting events. Defaults to ","type":"text"},{"type":"codeVoice","code":"zero"},{"text":".","type":"text"}]}],"name":"tolerance"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"options"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A stream that repeatedly yields the current time."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the task is cancelled, the sequence will terminate."}]},{"syntax":null,"type":"codeListing","code":["for await instant in scheduler.timer(interval: .seconds(1)) {","  print(\"now:\", instant)","}"]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/timer(interval:tolerance:options:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyscheduler\/timer(interval:tolerance:options:)"]}],"abstract":[{"type":"text","text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/timer(interval:tolerance:options:)":{"url":"\/documentation\/composablearchitecture\/anyscheduler\/timer(interval:tolerance:options:)","abstract":[{"type":"text","text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"timer","kind":"identifier"},{"kind":"text","text":"("},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AsyncStream","preciseIdentifier":"s:ScS"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"timer(interval:tolerance:options:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/timer(interval:tolerance:options:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/anyscheduler\/scheduler-implementations","title":"Scheduler Implementations","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}