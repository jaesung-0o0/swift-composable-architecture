{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:tolerance:options:_:)"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?, () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"symbolKind":"method","roleHeading":"Instance Method","title":"schedule(after:tolerance:options:_:)","externalID":"s:17CombineSchedulers12AnySchedulerV8schedule5after9tolerance7options_yx_6StrideQzq_SgyyctF","role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:tolerance:options:_:)"},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Inherited from "},{"code":"Scheduler.schedule(after:tolerance:options:_:)","type":"codeVoice"},{"text":".","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"schedule","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"text":" ","kind":"text"},{"text":"date","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")"}],"platforms":["iOS"],"languages":["swift"]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:tolerance:options:_:)","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"kind":"text","text":"("},{"text":"after","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:tolerance:options:_:)","title":"schedule(after:tolerance:options:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]}}}