{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"scheduler"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" == "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":", ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Scheduler","kind":"typeIdentifier","preciseIdentifier":"s:7Combine9SchedulerP"}]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A scheduler to wrap with a type-eraser."}],"type":"paragraph"}],"name":"scheduler"}],"kind":"parameters"}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Creates a type-erasing scheduler to wrap the provided scheduler."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/anyscheduler\/init(_:)"]}],"metadata":{"symbolKind":"init","modules":[{"name":"ComposableArchitecture"}],"role":"symbol","roleHeading":"Initializer","title":"init(_:)","externalID":"s:17CombineSchedulers12AnySchedulerVyACyxq_Gqd__c0D8TimeTypeQyd__Rsz0D7OptionsQyd__Rs_0A00D0Rd__lufc","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/init(_:)":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"Creates a type-erasing scheduler to wrap the provided scheduler.","type":"text"}],"title":"init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}