{"metadata":{"title":"Performance","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As your features and application grow you may run into performance problems, such as reducers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"becoming slow to execute, SwiftUI view bodies executing more often than expected, and more. This"},{"type":"text","text":" "},{"text":"article outlines a few common pitfalls when developing features in the library, and how to fix","type":"text"},{"type":"text","text":" "},{"type":"text","text":"them."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#View-stores"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Sharing-logic-with-actions","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#CPU-intensive-calculations"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#High-frequency-actions","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Compiler-performance"}]}]}]},{"level":3,"text":"View stores","anchor":"View-stores","type":"heading"},{"inlineContent":[{"type":"text","text":"A common performance pitfall when using the library comes from constructing "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":"s, which"},{"text":" ","type":"text"},{"text":"is the object that observes changes to your feature’s state. When constructed naively, using either","type":"text"},{"type":"text","text":" "},{"type":"text","text":"view store’s initializer "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","isActive":true},{"type":"text","text":" or the SwiftUI helper"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"type":"text","text":", it  will observe every change to state in the store:"}],"type":"paragraph"},{"code":["WithViewStore(self.store, observe: { $0 }) { viewStore in ","  \/\/ This is executed for every action sent into the system ","  \/\/ that causes self.store.state to change. ","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Most of the time this observes far too much state. A typical feature in the Composable Architecture","type":"text"},{"type":"text","text":" "},{"text":"holds onto not only the state the view needs to present UI, but also state that the feature only","type":"text"},{"text":" ","type":"text"},{"text":"needs internally, as well as state of child features embedded in the feature. Changes to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"internal and child state should not cause the view’s body to re-compute since that state is not"},{"text":" ","type":"text"},{"type":"text","text":"needed in the view."}]},{"inlineContent":[{"text":"For example, if the root of our application was a tab view, then we could model that in state as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"struct that holds each tab’s state as a property:"}],"type":"paragraph"},{"syntax":"swift","code":["struct AppFeature: Reducer {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the view only needs to construct the views for each tab, then no view store is even needed"},{"text":" ","type":"text"},{"text":"because we can pass scoped stores to each child feature view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: { .activity($0) })","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: { .search($0) })","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: { .profile($0) })","      )","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" does not actually need to observe any state changes. This view will only be"},{"text":" ","type":"text"},{"text":"created a single time, whereas if we observed the store then it would re-compute every time a single","type":"text"},{"type":"text","text":" "},{"type":"text","text":"thing changed in either the activity, search or profile child features."}]},{"inlineContent":[{"text":"If sometime in the future we do actually need some state from the store, we can start to observe","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that"},{"type":"text","text":" "},{"type":"text","text":"we need access to the currently selected tab in state:"}],"type":"paragraph"},{"syntax":"swift","code":["struct AppFeature: Reducer {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then we can observe this state so that we can construct a binding to ","type":"text"},{"type":"codeVoice","code":"selectedTab"},{"text":" for the tab view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: { .activity($0) })","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: { .search($0) })","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: { .profile($0) })","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, this style of state observation is terribly inefficient since ","type":"text"},{"inlineContent":[{"text":"every","type":"text"}],"type":"emphasis"},{"type":"text","text":" change to"},{"type":"text","text":" "},{"code":"AppFeature.State","type":"codeVoice"},{"text":" will cause the view to re-compute even though the only piece of state we actually","type":"text"},{"type":"text","text":" "},{"text":"care about is the ","type":"text"},{"code":"selectedTab","type":"codeVoice"},{"type":"text","text":". The reason we are observing too much state is because we use"},{"text":" ","type":"text"},{"type":"codeVoice","code":"observe: { $0 }"},{"text":" in the construction of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", which means the view store will"},{"text":" ","type":"text"},{"text":"observe all of state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To chisel away at the observed state you can provide a closure for that argument that plucks out"},{"text":" ","type":"text"},{"text":"the state the view needs. In this case the view only needs a single field:","type":"text"}]},{"code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In the future, the view may need access to more state. For example, suppose ","type":"text"},{"type":"codeVoice","code":"Activity.State"},{"text":" holds","type":"text"},{"type":"text","text":" "},{"text":"onto an ","type":"text"},{"code":"unreadCount","type":"codeVoice"},{"text":" integer to represent how many new activities you have. There’s no need to","type":"text"},{"text":" ","type":"text"},{"text":"observe ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" of "},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" to get access to this one field. You can observe just the one"},{"text":" ","type":"text"},{"type":"text","text":"field."}]},{"inlineContent":[{"text":"Technically you can do this by mapping your state into a tuple, but because tuples are not","type":"text"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"text":" you will need to provide an explicit ","type":"text"},{"code":"removeDuplicates","type":"codeVoice"},{"text":" argument:","type":"text"}],"type":"paragraph"},{"code":["WithViewStore(","  self.store, ","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in ","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: { .activity($0) })","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Alternatively, and recommended, you can introduce a lightweight, equatable "},{"code":"ViewState","type":"codeVoice"},{"text":" struct","type":"text"},{"type":"text","text":" "},{"text":"nested inside your view whose purpose is to transform the ","type":"text"},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"type":"text","text":" "},{"type":"text","text":"essentials of what the view needs:"}],"type":"paragraph"},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in ","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: { .activity($0) })","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives you maximum flexibility in the future for adding new fields to "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" without making"},{"type":"text","text":" "},{"text":"your view convoluted.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This technique for reducing view re-computations is most effective towards the root of your app","type":"text"},{"type":"text","text":" "},{"text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold lots","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of state that its view does not need, such as child features, and leaf features tend to only hold"},{"text":" ","type":"text"},{"text":"what’s necessary. If you are going to employ this technique you will get the most benefit by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"applying it to views closer to the root. At leaf features and views that need access to most"},{"text":" ","type":"text"},{"text":"of the state, it is fine to continue using ","type":"text"},{"code":"observe: { $0 }","type":"codeVoice"},{"type":"text","text":" to observe all of the state in the"},{"type":"text","text":" "},{"type":"text","text":"store."}]},{"text":"Sharing logic with actions","anchor":"Sharing-logic-with-actions","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a common pattern of using actions to share logic across multiple parts of a reducer."},{"type":"text","text":" "},{"type":"text","text":"This is an inefficient way to share logic. Sending actions is not as lightweight of an operation"},{"type":"text","text":" "},{"text":"as, say, calling a method on a class. Actions travel through multiple layers of an application, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at each layer a reducer can intercept and reinterpret the action."}]},{"inlineContent":[{"type":"text","text":"It is far better to share logic via simple methods on your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" conformance.","type":"text"},{"text":" ","type":"text"},{"text":"The helper methods can take ","type":"text"},{"type":"codeVoice","code":"inout State"},{"text":" as an argument if it needs to make mutations, and it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can return an "},{"type":"codeVoice","code":"Effect<Action>"},{"type":"text","text":". This allows you to share logic without incurring the cost"},{"type":"text","text":" "},{"text":"of sending needless actions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose that there are 3 UI components in your feature such that when any is changed"},{"type":"text","text":" "},{"text":"you want to update the corresponding field of state, but then you also want to make some mutations","type":"text"},{"type":"text","text":" "},{"text":"and execute an effect. That common mutation and effect could be put into its own action and then","type":"text"},{"type":"text","text":" "},{"text":"each user action can return an effect that immediately emits that shared action:","type":"text"}]},{"code":["struct Feature: Reducer {","  struct State {","    \/\/ ...","  }","  enum Action {","    \/\/ ...","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .buttonTapped:","      state.count += 1","      return .send(.sharedComputation)","","    case .toggleChanged:","      state.isEnabled.toggle()","      return .send(.sharedComputation)","","    case let .textFieldChanged(text):","      state.description = text","      return .send(.sharedComputation)","","    case .sharedComputation:","      \/\/ Some shared work to compute something.","      return .run { send in","        \/\/ A shared effect to compute something","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This is one way of sharing the logic and effect, but we are now incurring the cost of two actions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though the user performed a single action. That is not going to be as efficient as it would"},{"type":"text","text":" "},{"type":"text","text":"be if only a single action was sent."}],"type":"paragraph"},{"inlineContent":[{"text":"Besides just performance concerns, there are two other reasons why you should not follow this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pattern. First, this style of sharing logic is not very flexible. Because the shared logic is"},{"type":"text","text":" "},{"text":"relegated to a separate action it must always be run after the initial logic. But what if","type":"text"},{"type":"text","text":" "},{"text":"instead you need to run some shared logic ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"type":"text","text":" the core logic? This style cannot accommodate that."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Second, this style of sharing logic also muddies tests. When you send a user action you have to"},{"text":" ","type":"text"},{"type":"text","text":"further assert on receiving the shared action and assert on how state changed. This bloats tests"},{"text":" ","type":"text"},{"text":"with unnecessary internal details, and the test no longer reads as a script from top-to-bottom of","type":"text"},{"text":" ","type":"text"},{"text":"actions the user is taking in the feature:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","}","store.receive(.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","}","store.receive(.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\") {","  $0.description = \"Hello\"","}","store.receive(.sharedComputation) {","  \/\/ Assert on shared logic","}"],"type":"codeListing"},{"inlineContent":[{"text":"So, we do not recommend sharing logic in a reducer by having dedicated actions for the logic","type":"text"},{"text":" ","type":"text"},{"text":"and executing synchronous effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Instead, we recommend sharing logic with methods defined in your feature’s reducer. The method has"},{"text":" ","type":"text"},{"type":"text","text":"full access to all dependencies, it can take an "},{"type":"codeVoice","code":"inout State"},{"text":" if it needs to make mutations to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state, and it can return an "},{"code":"Effect<Action>","type":"codeVoice"},{"text":" if it needs to execute effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The above example can be refactored like so:","type":"text"}],"type":"paragraph"},{"code":["struct Feature: Reducer {","  struct State {","    \/\/ ...","  }","  enum Action {","    \/\/ ...","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .buttonTapped:","      state.count += 1","      return self.sharedComputation(state: &state)","","    case .toggleChanged:","      state.isEnabled.toggle()","      return self.sharedComputation(state: &state)","","    case let .textFieldChanged(text):","      state.description = text","      return self.sharedComputation(state: &state)","    }","  }","","  func sharedComputation(state: inout State) -> Effect<Action> {","    \/\/ Some shared work to compute something.","    return .run { send in","      \/\/ A shared effect to compute something","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This effectively works the same as before, but now when a user action is sent all logic is executed"},{"type":"text","text":" "},{"text":"at once without sending an additional action. This also fixes the other problems we mentioned above.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you need to execute the shared logic "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" the core logic, you can do so easily:"}]},{"type":"codeListing","syntax":"swift","code":["case .buttonTapped:","  let sharedEffect = self.sharedComputation(state: &state)","  state.count += 1","  return sharedEffect"]},{"inlineContent":[{"type":"text","text":"You have complete flexibility to decide how, when and where you want to execute the shared logic."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Further, tests become more streamlined since you do not have to assert on internal details of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared actions being sent around. The test reads  like a user script of what the user is doing"},{"text":" ","type":"text"},{"type":"text","text":"in the feature:"}]},{"syntax":"swift","code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\") {","  $0.description = \"Hello\"","  \/\/ Assert on shared logic","}"],"type":"codeListing"},{"type":"heading","level":3,"anchor":"CPU-intensive-calculations","text":"CPU intensive calculations"},{"inlineContent":[{"type":"text","text":"Reducers are run on the main thread and so they are not appropriate for performing intense CPU"},{"type":"text","text":" "},{"type":"text","text":"work. If you need to perform lots of CPU-bound work, then it is more appropriate to use an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":", which will operate in the cooperative thread pool, and then send actions back into"},{"text":" ","type":"text"},{"text":"the system. You should also make sure to perform your CPU intensive work in a cooperative manner by","type":"text"},{"type":"text","text":" "},{"text":"periodically suspending with ","type":"text"},{"code":"Task.yield()","type":"codeVoice"},{"type":"text","text":" so that you do not block a thread in the cooperative"},{"type":"text","text":" "},{"text":"pool for too long.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"So, instead of performing intense work like this in your reducer:","type":"text"}]},{"code":["case .buttonTapped:","  var result = \/\/ ...","  for value in someLargeCollection {","    \/\/ Some intense computation with value","  }","  state.result = result"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you should return an effect to perform that work, sprinkling in some yields every once in awhile,"},{"type":"text","text":" "},{"text":"and then delivering the result in an action:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["case .buttonTapped:","  return .run { send in","    var result = \/\/ ...","    for (index, value) in someLargeCollection.enumerated() {","      \/\/ Some intense computation with value","","      \/\/ Yield every once in awhile to cooperate in the thread pool.","      if index.isMultiple(of: 1_000) {","        await Task.yield()","      }","    }","    await send(.computationResponse(result))","  }","","case let .computationResponse(result):","  state.result = result"]},{"inlineContent":[{"type":"text","text":"This will keep CPU intense work from being performed in the reducer, and hence not on the main"},{"text":" ","type":"text"},{"type":"text","text":"thread."}],"type":"paragraph"},{"anchor":"High-frequency-actions","text":"High-frequency actions","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending actions in a Composable Architecture application should not be thought as simple method"},{"type":"text","text":" "},{"type":"text","text":"calls that one does with classes, such as "},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" conformances. When an action is sent"},{"type":"text","text":" "},{"type":"text","text":"into the system there are multiple layers of features that can intercept and interpret it, and"},{"type":"text","text":" "},{"text":"the resulting state changes can reverberate throughout the entire application.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because of this, sending actions does come with a cost. You should aim to only send “significant”"},{"text":" ","type":"text"},{"type":"text","text":"actions into the system, that is, actions that cause the execution of important logic and effects"},{"type":"text","text":" "},{"type":"text","text":"for your application. High-frequency actions, such as sending dozens of actions per second,"},{"type":"text","text":" "},{"type":"text","text":"should be avoided unless your application truly needs that volume of actions in order to implement"},{"type":"text","text":" "},{"type":"text","text":"its logic."}],"type":"paragraph"},{"inlineContent":[{"text":"However, there are often times that actions are sent at a high frequency but the reducer doesn’t","type":"text"},{"type":"text","text":" "},{"text":"actually need that volume of information. For example, say you were constructing an effect that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"wanted to report its progress back to the system for each step of its work. You could choose to send"},{"type":"text","text":" "},{"text":"the progress for literally every step:","type":"text"}],"type":"paragraph"},{"code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      send(.progress(Double(count) \/ Double(max)))","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, what if the effect required 10,000 steps to finish? Or 100,000? Or more? It would be"},{"text":" ","type":"text"},{"text":"immensely wasteful to send 100,000 actions into the system to report a progress value that is only","type":"text"},{"type":"text","text":" "},{"text":"going to vary from 0.0 to 1.0.","type":"text"}]},{"inlineContent":[{"text":"Instead, you can choose to report the progress every once in awhile. You can even do the math","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make it so that you report the progress at most 100 times:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","    let interval = max \/ 100","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      if count.isMultiple(of: interval) {","        send(.progress(Double(count) \/ Double(max)))","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This greatly reduces the bandwidth of actions being sent into the system so that you are not","type":"text"},{"type":"text","text":" "},{"text":"incurring unnecessary costs for sending actions.","type":"text"}]},{"level":3,"anchor":"Compiler-performance","text":"Compiler performance","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In very large SwiftUI applications you may experience degraded compiler performance causing long"},{"text":" ","type":"text"},{"text":"compile times, and possibly even compiler failures due to “complex expressions.” The","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":"  helpers that come with the library can exacerbate that problem for very complex","type":"text"},{"type":"text","text":" "},{"type":"text","text":"views. If you are running into issues using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"type":"text","text":", there are two options for fixing"},{"type":"text","text":" "},{"text":"the problem.","type":"text"}]},{"inlineContent":[{"text":"For example, if your view looks like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      \/\/ A large, complex view inside here...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"…and you start running into compiler troubles, then you can explicitly specify the type of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"view store in the closure:"}]},{"syntax":"swift","type":"codeListing","code":["WithViewStore(self.store, observe: { $0 }) { (viewStore: ViewStoreOf<Feature>) in","  \/\/ A large, complex view inside here...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can refactor the view to use an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","  @ObservedObject var viewStore: ViewStoreOf<Feature>","","  init(store: StoreOf<Feature>) {","    self.store = store","    self.viewStore = ViewStore(self.store, observe: { $0 })","  }","","  var body: some View {","    \/\/ A large, complex view inside here...","  }","}"]},{"inlineContent":[{"text":"Both of these options should greatly improve the compiler’s ability to type-check your view.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/performance"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"type":"topic","title":"Navigation","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/navigation","kind":"article","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"kind":"symbol"},"#View-stores":{"identifier":"#View-stores","titleInlineContent":[{"text":"View stores","type":"text"}],"url":"#View-stores","type":"link","title":"View stores"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","url":"\/documentation\/composablearchitecture\/testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"type":"topic","role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y","title":"init(_:observe:)","fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":">(","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Initializes a view store from a store which observes changes to state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"#CPU-intensive-calculations":{"title":"CPU-intensive calculations","identifier":"#CPU-intensive-calculations","type":"link","titleInlineContent":[{"type":"text","text":"CPU-intensive calculations"}],"url":"#CPU-intensive-calculations"},"#Compiler-performance":{"identifier":"#Compiler-performance","titleInlineContent":[{"text":"Compiler performance","type":"text"}],"url":"#Compiler-performance","type":"link","title":"Compiler performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/gettingstarted","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","title":"Getting started","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"text":" ","type":"text"},{"type":"text","text":"application."}]},"#Sharing-logic-with-actions":{"title":"Sharing logic with actions","identifier":"#Sharing-logic-with-actions","type":"link","titleInlineContent":[{"type":"text","text":"Sharing logic with actions"}],"url":"#Sharing-logic-with-actions"},"#High-frequency-actions":{"identifier":"#High-frequency-actions","titleInlineContent":[{"text":"High-frequency actions","type":"text"}],"url":"#High-frequency-actions","type":"link","title":"High-frequency actions"}}}