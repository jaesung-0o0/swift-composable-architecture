{"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ImmediateScheduler","kind":"identifier"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sx","text":"Strideable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"You can only use this scheduler for immediate actions. If you attempt to schedule actions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after a specific date, this scheduler ignores the date and performs them immediately."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This scheduler is useful for writing tests against publishers that use asynchrony operators,"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"type":"codeVoice","code":"receive(on:)"},{"text":", ","type":"text"},{"type":"codeVoice","code":"subscribe(on:)"},{"type":"text","text":" and others, because it forces the publisher to emit"},{"type":"text","text":" "},{"type":"text","text":"immediately rather than needing to wait for thread hops or delays using "},{"type":"codeVoice","code":"XCTestExpectation"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"This scheduler is different from ","type":"text"},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" in that you cannot explicitly control how"},{"text":" ","type":"text"},{"type":"text","text":"time flows through your publisher, but rather you are instantly collapsing time into a single"},{"type":"text","text":" "},{"text":"point.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a basic example, suppose you have a view model that loads some data after waiting for 10"},{"type":"text","text":" "},{"text":"seconds from when a button is tapped:","type":"text"}]},{"code":["class HomeViewModel: ObservableObject {","  @Published var episodes: [Episode]?","","  let apiClient: ApiClient","","  init(apiClient: ApiClient) {","    self.apiClient = apiClient","  }","","  func reloadButtonTapped() {","    Just(())","      .delay(for: .seconds(10), scheduler: DispatchQueue.main)","      .flatMap { apiClient.fetchEpisodes() }","      .assign(to: &self.episodes)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to test this code you would literally need to wait 10 seconds for the publisher to"},{"type":"text","text":" "},{"type":"text","text":"emit:"}]},{"type":"codeListing","code":["func testViewModel() {","  let viewModel = HomeViewModel(apiClient: .mock)","","  viewModel.reloadButtonTapped()","","  _ = XCTWaiter.wait(for: [XCTestExpectation()], timeout: 10)","","  XCTAssert(viewModel.episodes, [Episode(id: 42)])","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Alternatively, we can explicitly pass a scheduler into the view model initializer so that it"},{"type":"text","text":" "},{"text":"can be controller from the outside:","type":"text"}],"type":"paragraph"},{"code":["class HomeViewModel: ObservableObject {","  @Published var episodes: [Episode]?","","  let apiClient: ApiClient","  let scheduler: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    Just(())","      .delay(for: .seconds(10), scheduler: self.scheduler)","      .flatMap { self.apiClient.fetchEpisodes() }","      .assign(to: &self.$episodes)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then in tests use an immediate scheduler:"}],"type":"paragraph"},{"syntax":"swift","code":["func testViewModel() {","  let viewModel = HomeViewModel(","    apiClient: .mock,","    scheduler: .immediate","  )","","  viewModel.reloadButtonTapped()","","  \/\/ No more waiting...","","  XCTAssert(viewModel.episodes, [Episode(id: 42)])","}"],"type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"text":"This scheduler can ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" be used to test publishers with more complex timing logic,"},{"type":"text","text":" "},{"type":"text","text":"like those that use "},{"type":"codeVoice","code":"Debounce"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Throttle"},{"type":"text","text":", or "},{"code":"Timer.Publisher","type":"codeVoice"},{"text":", and in fact","type":"text"},{"type":"text","text":" "},{"code":"ImmediateScheduler","type":"codeVoice"},{"text":" will not schedule this work in a defined way. Use a ","type":"text"},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" "},{"type":"text","text":"instead to capture your publisherâ€™s timing behavior."}],"type":"paragraph"}],"name":"Note","style":"note"}]}],"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/immediatescheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/init(now:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/minimumTolerance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/now"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(options:_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations"],"title":"Default Implementations","generated":true}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"symbolKind":"struct","roleHeading":"Structure","title":"ImmediateScheduler","navigatorTitle":[{"text":"ImmediateScheduler","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ImmediateScheduler","kind":"identifier"}],"role":"symbol","externalID":"s:17CombineSchedulers18ImmediateSchedulerV"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"A scheduler for performing synchronous actions."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/now":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/now","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/now","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"now"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"}],"role":"symbol","title":"now","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/immediatescheduler\/scheduler-implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/minimumTolerance":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/minimumTolerance","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/minimumtolerance","type":"topic","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"minimumTolerance"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"}],"role":"symbol","title":"minimumTolerance","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/schedule(after:interval:tolerance:options:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(after:interval:tolerance:options:_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/schedule(after:interval:tolerance:options:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?, () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier"}],"role":"symbol","title":"schedule(after:interval:tolerance:options:_:)","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/schedule(options:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(options:_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/schedule(options:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"schedule(options:_:)","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/init(now:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/init(now:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/init(now:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"now"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"init(now:)","abstract":[{"type":"text","text":"Creates an immediate test scheduler with the given date."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler/schedule(after:tolerance:options:_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/immediatescheduler\/schedule(after:tolerance:options:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"after"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?, () -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"schedule(after:tolerance:options:_:)","abstract":[]},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ImmediateScheduler":{"navigatorTitle":[{"text":"ImmediateScheduler","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/immediatescheduler","type":"topic","role":"symbol","abstract":[{"text":"A scheduler for performing synchronous actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ImmediateScheduler","title":"ImmediateScheduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ImmediateScheduler","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/7Combine9SchedulerP":{"title":"Combine.Scheduler","identifier":"doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","type":"unresolvable"}}}