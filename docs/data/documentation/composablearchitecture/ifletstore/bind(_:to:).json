{"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/ifletstore\/bind(_:to:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]]},"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/bind(_:to:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture","relatedModules":["SwiftUI"]}],"extendedModule":"SwiftUI","title":"bind(_:to:)","platforms":[{"name":"iOS","unavailable":false,"introducedAt":"14.0","beta":false,"deprecated":false},{"deprecated":false,"unavailable":false,"name":"macOS","introducedAt":"11.0","beta":false},{"deprecated":false,"name":"tvOS","unavailable":false,"beta":false,"introducedAt":"14.0"},{"introducedAt":"7.0","unavailable":false,"beta":false,"deprecated":false,"name":"watchOS"}],"role":"symbol","symbolKind":"method","externalID":"s:7SwiftUI4ViewP0A16UINavigationCoreE4bind_2toQrqd___qd_0_tAD9_BindableRd__AdGRd_0_SQ5ValueRpd__AHQyd_0_AIRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture10IfLetStoreV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ModelValue"},{"text":", ","kind":"text"},{"text":"ViewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ModelValue","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ViewValue","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"modelValue"},{"kind":"text","text":": "},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"viewValue"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"text":" : ","kind":"text"},{"text":"_Bindable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewValue"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"_Bindable"},{"text":", ","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SQ","text":"Equatable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"ViewValue"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"\n"}],"platforms":["iOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding from model state. "},{"inlineContent":[{"type":"text","text":"E.g."}],"type":"emphasis"},{"text":", a binding derived from a published field","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on an observable object."}]}],"name":"modelValue"},{"name":"viewValue","content":[{"inlineContent":[{"type":"text","text":"A binding from view state. "},{"inlineContent":[{"text":"E.g.","type":"text"}],"type":"emphasis"},{"text":", a focus binding.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"SwiftUI comes with many property wrappers that can be used in views to drive view state, like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"field focus. Unfortunately, these property wrappers "},{"type":"emphasis","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" be used in views. It’s not possible"},{"text":" ","type":"text"},{"type":"text","text":"to extract this logic to an observable object and integrate it with the rest of the model’s"},{"type":"text","text":" "},{"text":"business logic, and be in a better position to test this state.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We can work around these limitations by introducing a published field to your observable"},{"type":"text","text":" "},{"type":"text","text":"object and synchronizing it to view state with this view modifier."}],"type":"paragraph"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","kind":"article","title":"View Implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","title":"IfLetStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/bind(_:to:)":{"abstract":[{"text":"Synchronizes model state to view state via two-way bindings.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore\/bind(_:to:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/bind(_:to:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ModelValue"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ViewValue"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewValue"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"title":"bind(_:to:)"}}}