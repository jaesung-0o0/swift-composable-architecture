{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler"},"kind":"symbol","metadata":{"roleHeading":"Structure","modules":[{"name":"ComposableArchitecture"}],"title":"UnimplementedScheduler","symbolKind":"struct","role":"symbol","navigatorTitle":[{"text":"UnimplementedScheduler","kind":"identifier"}],"externalID":"s:17CombineSchedulers22UnimplementedSchedulerV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UnimplementedScheduler","kind":"identifier"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/init(_:now:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/minimumTolerance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/now","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/prefix"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(options:_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations"]}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","doc:\/\/ComposableArchitecture\/s8SendableP"],"kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnimplementedScheduler"},{"text":"<","kind":"text"},{"text":"SchedulerTimeType","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sx","kind":"typeIdentifier","text":"Strideable"},{"kind":"text","text":", "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This scheduler can provide an additional layer of certainty that a tested code path does not","type":"text"},{"type":"text","text":" "},{"text":"require the use of a scheduler.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a view model becomes more complex, only some of its logic may require a scheduler. When"},{"text":" ","type":"text"},{"text":"writing unit tests for any logic that does ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" require a scheduler, one should provide an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unimplemented scheduler, instead. This documents, directly in the test, that the feature does"},{"text":" ","type":"text"},{"type":"text","text":"not use a scheduler. If it did, or ever does in the future, the test will fail."}]},{"inlineContent":[{"type":"text","text":"For example, the following view model has a couple responsibilities:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let mainQueue: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, mainQueue: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.mainQueue = mainQueue","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.mainQueue)","      .assign(to: &self.$episode)","  }","","  func favoriteButtonTapped() {","    self.episode?.isFavorite.toggle()","  }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"It lets the user tap a button to refresh some episode data","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"It lets the user toggle if the episode is one of their favorites"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The API client delivers the episode on a background queue, so the view model must receive it","type":"text"},{"text":" ","type":"text"},{"text":"on its main queue before mutating its state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tapping the favorite button, however, involves no scheduling. This means that a test can be"},{"type":"text","text":" "},{"type":"text","text":"written with an unimplemented scheduler:"}]},{"type":"codeListing","syntax":"swift","code":["func testFavoriteButton() {","  let viewModel = EpisodeViewModel(","    apiClient: .mock,","    mainQueue: .unimplemented","  )","  viewModel.episode = .mock","","  viewModel.favoriteButtonTapped()","  XCTAssert(viewModel.episode?.isFavorite == true)","","  viewModel.favoriteButtonTapped()","  XCTAssert(viewModel.episode?.isFavorite == false)","}"]},{"inlineContent":[{"text":"With ","type":"text"},{"code":".unimplemented","type":"codeVoice"},{"text":", this test pretty strongly declares that favoriting an episode does not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need a scheduler to do the job, which means it is reasonable to assume that the feature is"},{"type":"text","text":" "},{"type":"text","text":"simple and does not involve any asynchrony."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In the future, should favoriting an episode fire off an API request that involves a scheduler,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this test will begin to fail, which is a good thing! This will force us to address the"},{"text":" ","type":"text"},{"text":"complexity that was introduced. Had we used any other scheduler, it would quietly receive this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"additional work and the test would continue to pass."}]}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"A scheduler that causes the current XCTest test case to fail if it is used."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/unimplementedscheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/schedule(after:interval:tolerance:options:_:)":{"title":"schedule(after:interval:tolerance:options:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"interval","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?, () -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/schedule(after:interval:tolerance:options:_:)","abstract":[],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(after:interval:tolerance:options:_:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/Scheduler-Implementations":{"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/scheduler-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/Scheduler-Implementations","title":"Scheduler Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/schedule(options:_:)":{"title":"schedule(options:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?, () -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/schedule(options:_:)","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(options:_:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/schedule(after:tolerance:options:_:)":{"title":"schedule(after:tolerance:options:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"schedule"},{"text":"(","kind":"text"},{"text":"after","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?, () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/schedule(after:tolerance:options:_:)","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/schedule(after:tolerance:options:_:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/prefix":{"role":"symbol","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/prefix","kind":"symbol","url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/prefix","title":"prefix","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/minimumTolerance":{"title":"minimumTolerance","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"minimumTolerance","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/minimumtolerance","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/minimumTolerance"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/init(_:now:)":{"title":"init(_:now:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"now","kind":"externalParam"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/init(_:now:)","abstract":[{"type":"text","text":"Creates an unimplemented scheduler with the given date."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/init(_:now:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler/now":{"title":"now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"now","kind":"identifier"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler\/now","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler\/now","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UnimplementedScheduler":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnimplementedScheduler"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UnimplementedScheduler","title":"UnimplementedScheduler","navigatorTitle":[{"text":"UnimplementedScheduler","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"A scheduler that causes the current XCTest test case to fail if it is used.","type":"text"}],"url":"\/documentation\/composablearchitecture\/unimplementedscheduler"},"doc://ComposableArchitecture/7Combine9SchedulerP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","title":"Combine.Scheduler"}}}