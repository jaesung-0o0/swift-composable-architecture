{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindingstate"]}],"metadata":{"roleHeading":"Structure","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}],"externalID":"s:22ComposableArchitecture12BindingStateV","title":"BindingState","modules":[{"name":"ComposableArchitecture"}],"role":"symbol"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:line:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue"]},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"],"title":"Default Implementations"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingState"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Along with an action type that conforms to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" protocol, this type can be"},{"text":" ","type":"text"},{"type":"text","text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple"},{"type":"text","text":" "},{"type":"text","text":"mutable fields on state."}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not necessary to annotate "},{"inlineContent":[{"type":"text","text":"every"}],"type":"emphasis"},{"text":" field with ","type":"text"},{"code":"@BindingState","type":"codeVoice"},{"type":"text","text":", and in fact it is"},{"text":" ","type":"text"},{"text":"not recommended. Marking a field with the property wrapper makes it instantly mutable from the","type":"text"},{"type":"text","text":" "},{"text":"outside, which may hurt the encapsulation of your feature. It is best to limit the usage of","type":"text"},{"type":"text","text":" "},{"text":"the property wrapper to only those fields that need to have bindings derived for handing to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI components."}]}]},{"type":"paragraph","inlineContent":[{"text":"Read ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"type":"text","text":" for more information."}]}],"kind":"content"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"title":"Bindings"}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CustomDumpRepresentable","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Hashable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/hashable-implementations","title":"Hashable Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/s17CustomReflectableP":{"identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","title":"Swift.CustomReflectable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Equatable-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingstate\/equatable-implementations","role":"collectionGroup","type":"topic","title":"Equatable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/init(wrappedValue:fileID:line:)":{"abstract":[{"type":"text","text":"Creates bindable state from the value of another bindable state."}],"url":"\/documentation\/composablearchitecture\/bindingstate\/init(wrappedvalue:fileid:line:)","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV5Valuexmfp","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(wrappedValue:fileID:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:line:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"title":"BindableAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"url":"\/documentation\/composablearchitecture\/bindingviewstore","abstract":[{"type":"text","text":"A property wrapper type that can derive "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"text":" values for a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingViewStore","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"BindingViewStore","kind":"identifier"}],"title":"BindingViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Decodable-Implementations":{"abstract":[],"type":"topic","kind":"article","title":"Decodable Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/decodable-implementations"},"doc://ComposableArchitecture/SE":{"identifier":"doc:\/\/ComposableArchitecture\/SE","title":"Swift.Encodable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"binding"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"state","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C5Statexmfp","text":"ViewState"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp"},{"text":", ","kind":"text"},{"text":"send","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC0C6Actionq_mfp","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding"},{"text":"<","kind":"text"},{"text":"Value","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC7binding3get4send7SwiftUI7BindingVyqd__Gqd__xc_q_qd__ctlF5ValueL_qd__mfp","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"binding(get:send:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","role":"symbol","abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"text":" ","type":"text"},{"type":"text","text":"actions to the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDumpRepresentable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","type":"topic","role":"collectionGroup","title":"CustomDumpRepresentable Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/customdumprepresentable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"url":"\/documentation\/composablearchitecture\/bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","title":"Working with SwiftUI bindings","role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDebugStringConvertible-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","type":"topic","abstract":[],"title":"CustomDebugStringConvertible Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/customdebugstringconvertible-implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomReflectable-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingstate\/customreflectable-implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","type":"topic","title":"CustomReflectable Implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"url":"\/documentation\/composablearchitecture\/bindingreducer","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"바인딩 액션을 전달 받을 때, 바인딩할 수 있는 상태("},{"type":"codeVoice","code":"BindableState"},{"text":") 를 업데이트 하는 리듀서","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","title":"BindingReducer","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/SH":{"identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","role":"symbol","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"type":"topic","title":"BindingState","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingstate","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/projectedValue":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","url":"\/documentation\/composablearchitecture\/bindingstate\/projectedvalue","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"projectedValue","kind":"identifier"},{"text":": `Self`","kind":"text"}],"role":"symbol","abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"type":"topic","role":"symbol","title":"BindingAction","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/SQ":{"identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/wrappedValue":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV5Valuexmfp","text":"Value"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue","type":"topic","role":"symbol","title":"wrappedValue","url":"\/documentation\/composablearchitecture\/bindingstate\/wrappedvalue","abstract":[{"type":"text","text":"The underlying value wrapped by the binding state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Encodable-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/composablearchitecture\/bindingstate\/encodable-implementations","role":"collectionGroup","title":"Encodable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CustomDumpRepresentable":{"abstract":[{"text":"A type that can be converted to a value for the purpose of dumping.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomDumpRepresentable"}],"type":"topic","url":"\/documentation\/composablearchitecture\/customdumprepresentable","title":"CustomDumpRepresentable","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CustomDumpRepresentable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CustomDumpRepresentable"}],"kind":"symbol"},"doc://ComposableArchitecture/Se":{"identifier":"doc:\/\/ComposableArchitecture\/Se","title":"Swift.Decodable","type":"unresolvable"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible","type":"unresolvable"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","url":"\/documentation\/composablearchitecture\/bindingviewstate","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of view state that can be directly"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"type":"topic","role":"symbol","title":"BindingViewState","navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}]}}}