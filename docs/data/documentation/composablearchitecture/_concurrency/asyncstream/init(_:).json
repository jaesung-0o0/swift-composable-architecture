{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"roleHeading":"Initializer","role":"symbol","title":"init(_:)","extendedModule":"_Concurrency","symbolKind":"init","externalID":"s:ScS17ConcurrencyExtrasEyScSyxGqd__c7ElementQyd__RszSciRd__lufc"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:)"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"sequence","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"text":"S","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"AsyncSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sci"}],"languages":["swift"]}]},{"parameters":[{"name":"sequence","content":[{"inlineContent":[{"type":"text","text":"An async sequence."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Useful as a kind of type eraser for live ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"text":"-based dependencies.","type":"text"}]},{"inlineContent":[{"text":"For example, your feature may want to subscribe to screenshot notifications. You can model","type":"text"},{"text":" ","type":"text"},{"text":"this as a dependency client that returns an ","type":"text"},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["struct ScreenshotsClient {","  var screenshots: () -> AsyncStream<Void>","  func callAsFunction() -> AsyncStream<Void> { self.screenshots() }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The “live” implementation of the dependency can supply a stream by erasing the appropriate","type":"text"},{"text":" ","type":"text"},{"code":"NotificationCenter.Notifications","type":"codeVoice"},{"text":" async sequence:","type":"text"}],"type":"paragraph"},{"code":["extension ScreenshotsClient {","  static let live = Self(","    screenshots: {","      AsyncStream(","        NotificationCenter.default","          .notifications(named: UIApplication.userDidTakeScreenshotNotification)","          .map { _ in }","      )","    }","  )","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"While your tests can use ","type":"text"},{"type":"codeVoice","code":"AsyncStream.makeStream"},{"text":" to spin up a controllable stream for tests:","type":"text"}]},{"code":["func testScreenshots() {","  let screenshots = AsyncStream.makeStream(of: Void.self)","","  let model = withDependencies {","    $0.screenshots = { screenshots.stream }","  } operation: {","    FeatureModel()","  }","","  XCTAssertEqual(model.screenshotCount, 0)","  screenshots.continuation.yield()  \/\/ Simulate a screenshot being taken.","  XCTAssertEqual(model.screenshotCount, 1)","}"],"syntax":"swift","type":"codeListing"}]}],"abstract":[{"text":"Produces an ","type":"text"},{"code":"AsyncStream","type":"codeVoice"},{"type":"text","text":" from an "},{"code":"AsyncSequence","type":"codeVoice"},{"text":" by consuming the sequence till it","type":"text"},{"type":"text","text":" "},{"text":"terminates, ignoring any failure.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","role":"collection","url":"\/documentation\/composablearchitecture\/_concurrency","title":"_Concurrency","abstract":[],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream/init(_:)":{"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream\/init(_:)","type":"topic","role":"symbol","title":"init(_:)","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream\/init(_:)","abstract":[{"text":"Produces an ","type":"text"},{"code":"AsyncStream","type":"codeVoice"},{"text":" from an ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" by consuming the sequence till it"},{"text":" ","type":"text"},{"text":"terminates, ignoring any failure.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/AsyncStream":{"kind":"symbol","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"preciseIdentifier":"s:ScS","text":"AsyncStream","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"AsyncStream","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/AsyncStream","url":"\/documentation\/composablearchitecture\/_concurrency\/asyncstream","type":"topic","title":"AsyncStream"}}}