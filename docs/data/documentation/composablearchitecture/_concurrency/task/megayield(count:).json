{"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"megaYield"},{"text":"(","kind":"text"},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = _defaultMegaYieldCount) ","kind":"text"},{"kind":"keyword","text":"async"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This function can be used to make flakey async tests less flakey, as described in","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"You may, however, prefer to use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/withMainSerialExecutor(operation:)-79jpc","type":"reference"},{"text":" to improve the","type":"text"},{"type":"text","text":" "},{"text":"reliability of async tests, and to make their execution deterministic.","type":"text"}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"When invoked from "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/withMainSerialExecutor(operation:)-79jpc","isActive":true,"type":"reference"},{"type":"text","text":", or when"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/uncheckedUseMainSerialExecutor","isActive":true,"type":"reference"},{"type":"text","text":" is set to "},{"type":"codeVoice","code":"true"},{"type":"text","text":", "},{"type":"codeVoice","code":"Task.megaYield()"},{"type":"text","text":" is equivalent to"},{"text":" ","type":"text"},{"text":"a single ","type":"text"},{"type":"codeVoice","code":"Task.yield()"},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/Task"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/_concurrency\/task\/megayield(count:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Suspends the current task a number of times before resuming with the goal of allowing other"},{"text":" ","type":"text"},{"type":"text","text":"tasks to start their work."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/Task\/megaYield(count:)"},"metadata":{"modules":[{"name":"ComposableArchitecture","relatedModules":["_Concurrency"]}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"megaYield","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"roleHeading":"Type Method","title":"megaYield(count:)","extendedModule":"_Concurrency","externalID":"s:ScT17ConcurrencyExtrass5NeverORszACRs_rlE9megaYield5countySi_tYaFZ","conformance":{"constraints":[{"type":"codeVoice","code":"Success"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Never"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Never"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","symbolKind":"method"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/uncheckedUseMainSerialExecutor":{"url":"\/documentation\/composablearchitecture\/uncheckedusemainserialexecutor","type":"topic","kind":"symbol","title":"uncheckedUseMainSerialExecutor","abstract":[{"text":"Overrides Swiftâ€™s global executor with the main serial executor in an unchecked fashion.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"uncheckedUseMainSerialExecutor"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/uncheckedUseMainSerialExecutor"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency","role":"collection","url":"\/documentation\/composablearchitecture\/_concurrency","title":"_Concurrency","abstract":[],"kind":"symbol","type":"topic"},"https://forums.swift.org/t/reliably-testing-code-that-adopts-swift-concurrency/57304":{"titleInlineContent":[{"type":"text","text":"this Swift Forums post"}],"title":"this Swift Forums post","type":"link","identifier":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304","url":"https:\/\/forums.swift.org\/t\/reliably-testing-code-that-adopts-swift-concurrency\/57304"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/Task":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/Task","kind":"symbol","fragments":[{"kind":"keyword","text":"extension"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:ScT","kind":"identifier","text":"Task"}],"type":"topic","title":"Task","abstract":[],"url":"\/documentation\/composablearchitecture\/_concurrency\/task","navigatorTitle":[{"kind":"identifier","text":"Task"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_Concurrency/Task/megaYield(count:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_Concurrency\/Task\/megaYield(count:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"megaYield","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"type":"topic","title":"megaYield(count:)","abstract":[{"type":"text","text":"Suspends the current task a number of times before resuming with the goal of allowing other"},{"type":"text","text":" "},{"text":"tasks to start their work.","type":"text"}],"url":"\/documentation\/composablearchitecture\/_concurrency\/task\/megayield(count:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Success","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/withMainSerialExecutor(operation:)-79jpc":{"title":"withMainSerialExecutor(operation:)","url":"\/documentation\/composablearchitecture\/withmainserialexecutor(operation:)-79jpc","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMainSerialExecutor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/withMainSerialExecutor(operation:)-79jpc","kind":"symbol","type":"topic","abstract":[{"text":"Perform an operation on the main serial executor.","type":"text"}],"role":"symbol"}}}