{"abstract":[{"type":"text","text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uischeduler\/timer(interval:tolerance:options:)"]}],"metadata":{"modules":[{"relatedModules":["Combine"],"name":"ComposableArchitecture"}],"role":"symbol","extendedModule":"Combine","title":"timer(interval:tolerance:options:)","externalID":"s:7Combine9SchedulerP0A10SchedulersE5timer8interval9tolerance7optionsScSy0B8TimeTypeQzGAI_6StrideQZ_AM0B7OptionsQzSgtF::SYNTHESIZED::s:17CombineSchedulers11UISchedulerV","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"timer"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/timer(interval:tolerance:options:)"},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"timer","kind":"identifier"},{"text":"(","kind":"text"},{"text":"interval","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":" = .zero, ","kind":"text"},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"? = nil) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ScS","text":"AsyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The time interval on which to sleep between yielding the current instant in","type":"text"},{"text":" ","type":"text"},{"text":"time. For example, a value of ","type":"text"},{"code":"0.5","type":"codeVoice"},{"type":"text","text":" yields an instant approximately every half-second."}],"type":"paragraph"}],"name":"interval"},{"name":"tolerance","content":[{"inlineContent":[{"text":"The allowed timing variance when emitting events. Defaults to ","type":"text"},{"code":"zero","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Scheduler options passed to the timer. Defaults to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"options"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A stream that repeatedly yields the current time."}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"If the task is cancelled, the sequence will terminate."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for await instant in scheduler.timer(interval: .seconds(1)) {","  print(\"now:\", instant)","}"]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UIScheduler"}],"url":"\/documentation\/composablearchitecture\/uischeduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UIScheduler","kind":"identifier"}],"abstract":[{"text":"A scheduler that executes its work on the main queue as soon as possible.","type":"text"}],"type":"topic","kind":"symbol","title":"UIScheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uischeduler\/scheduler-implementations","abstract":[],"type":"topic","kind":"article","title":"Scheduler Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/timer(interval:tolerance:options:)":{"kind":"symbol","title":"timer(interval:tolerance:options:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"timer"},{"text":"(","kind":"text"},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:ScS","kind":"typeIdentifier","text":"AsyncStream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/timer(interval:tolerance:options:)","url":"\/documentation\/composablearchitecture\/uischeduler\/timer(interval:tolerance:options:)","abstract":[{"type":"text","text":"Returns a stream that repeatedly yields the current time of the scheduler on a given interval."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}