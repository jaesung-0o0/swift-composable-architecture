{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations"]]},"abstract":[{"text":"Suspends the current task for at least the given duration.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sleep","kind":"identifier"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"duration"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":" = .zero, ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"? = nil) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The time interval on which to sleep between yielding.","type":"text"}],"type":"paragraph"}],"name":"duration"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed timing variance when emitting events. Defaults to "},{"type":"codeVoice","code":"zero"},{"text":".","type":"text"}]}],"name":"tolerance"},{"name":"options","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scheduler options passed to the timer. Defaults to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"If the task is cancelled before the time ends, this function throws ","type":"text"},{"code":"CancellationError","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"This function doesnâ€™t block the scheduler."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["try await in scheduler.sleep(for: .seconds(1))"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uischeduler\/sleep(for:tolerance:options:)"]}],"metadata":{"symbolKind":"method","externalID":"s:7Combine9SchedulerP0A10SchedulersE5sleep3for9tolerance7optionsy0B8TimeType_6StrideQZ_AK0B7OptionsQzSgtYaKF::SYNTHESIZED::s:17CombineSchedulers11UISchedulerV","modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"role":"symbol","title":"sleep(for:tolerance:options:)","roleHeading":"Instance Method","extendedModule":"Combine","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sleep","kind":"identifier"},{"kind":"text","text":"("},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/sleep(for:tolerance:options:)","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/sleep(for:tolerance:options:)":{"role":"symbol","title":"sleep(for:tolerance:options:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/sleep(for:tolerance:options:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sleep","kind":"identifier"},{"kind":"text","text":"("},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"tolerance","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"type":"topic","url":"\/documentation\/composablearchitecture\/uischeduler\/sleep(for:tolerance:options:)","abstract":[{"text":"Suspends the current task for at least the given duration.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UIScheduler"}],"url":"\/documentation\/composablearchitecture\/uischeduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UIScheduler","kind":"identifier"}],"abstract":[{"text":"A scheduler that executes its work on the main queue as soon as possible.","type":"text"}],"type":"topic","kind":"symbol","title":"UIScheduler"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uischeduler\/scheduler-implementations","abstract":[],"type":"topic","kind":"article","title":"Scheduler Implementations"}}}