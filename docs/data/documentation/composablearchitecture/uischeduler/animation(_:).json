{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uischeduler\/animation(_:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/animation(_:)"},"abstract":[{"type":"text","text":"Specifies an animation to perform when an action is scheduled. This can be useful for times"},{"text":" ","type":"text"},{"type":"text","text":"that you cannot easily wrap state mutations in a "},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" block."}],"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"animation"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"animation"},{"kind":"text","text":": "},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"text":"? = .default) -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","kind":"typeIdentifier","text":"AnySchedulerOf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["iOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An animation to be performed.","type":"text"}]}],"name":"animation"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A scheduler that performs an animation when a scheduled action is run."}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, if you load some asynchronous data in an ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" and then"},{"text":" ","type":"text"},{"type":"text","text":"pipe its output into a "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" field, you may be tempted to use the "},{"code":".assign(to:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"operator:"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$articles)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, this prevents you from wrapping the "},{"type":"codeVoice","code":"articles"},{"text":" mutation in ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"type":"text","text":" since"},{"type":"text","text":" "},{"type":"text","text":"that is hidden from you in the "},{"code":".assign(to:)","type":"codeVoice"},{"text":" operator. In this situation you can simply","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":".animation"},{"type":"text","text":" operator on "},{"type":"codeVoice","code":"Scheduler"},{"text":" to transform ","type":"text"},{"code":"DispatchQueue.main","type":"codeVoice"},{"type":"text","text":" into a"},{"text":" ","type":"text"},{"text":"scheduler that performs its work inside ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    apiClient.loadArticles()","      .receive(on: DispatchQueue.main.animation())","      .assign(to: &self.$articles)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Another common use case is when you have a Combine publisher made up of many publishers","type":"text"},{"text":" ","type":"text"},{"text":"that have been merged or concatenated. You may want to animate the outputs of each of","type":"text"},{"text":" ","type":"text"},{"text":"those publishers differently:","type":"text"}]},{"code":["class ViewModel: ObservableObject {","  @Published var articles: [Article] = []","","  init() {","    cachedArticles()","      \/\/ Don't animate cached articles when they load","      .receive(on: DispatchQueue.main.animation(nil))","      .append(","        apiClient.loadArticles()","          \/\/ Animate the fresh articles when they load","          .receive(on: DispatchQueue.main.animation())","      )","  }","}"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"modules":[{"name":"ComposableArchitecture","relatedModules":["Combine"]}],"extendedModule":"Combine","roleHeading":"Instance Method","role":"symbol","externalID":"s:7Combine9SchedulerP0A10SchedulersE9animationyAD03AnyB0Vy0B8TimeTypeQz0B7OptionsQzG7SwiftUI9AnimationVSgF::SYNTHESIZED::s:17CombineSchedulers11UISchedulerV","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa","text":"AnySchedulerOf","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"animation(_:)"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/Scheduler-Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uischeduler\/scheduler-implementations","abstract":[],"type":"topic","kind":"article","title":"Scheduler Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnySchedulerOf":{"navigatorTitle":[{"kind":"identifier","text":"AnySchedulerOf"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnySchedulerOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnySchedulerOf","kind":"identifier"}],"title":"AnySchedulerOf","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyschedulerof","abstract":[{"type":"text","text":"A convenience type to specify an "},{"type":"codeVoice","code":"AnyScheduler"},{"type":"text","text":" by the scheduler it wraps rather than by the"},{"text":" ","type":"text"},{"text":"time type and options type.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler/animation(_:)":{"kind":"symbol","type":"topic","abstract":[{"text":"Specifies an animation to perform when an action is scheduled. This can be useful for times","type":"text"},{"type":"text","text":" "},{"text":"that you cannot easily wrap state mutations in a ","type":"text"},{"type":"codeVoice","code":"withAnimation"},{"text":" block.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/uischeduler\/animation(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler\/animation(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnySchedulerOf","preciseIdentifier":"s:17CombineSchedulers14AnySchedulerOfa"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"animation(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIScheduler":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIScheduler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UIScheduler"}],"url":"\/documentation\/composablearchitecture\/uischeduler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UIScheduler","kind":"identifier"}],"abstract":[{"text":"A scheduler that executes its work on the main queue as soon as possible.","type":"text"}],"type":"topic","kind":"symbol","title":"UIScheduler"}}}