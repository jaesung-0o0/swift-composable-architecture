{"kind":"article","abstract":[{"text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"Stack-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Stack-based navigation is the process of modeling navigation using collections of state. This style","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of navigation allows you to deep-link into any state of your application by simply constructing a"},{"type":"text","text":" "},{"text":"flat collection of data, handing it off to SwiftUI, and letting it take care of the rest.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It also allows for complex and recursive navigation paths in your application."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Basics","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Integration","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Dismissal","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Testing"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#StackState-vs-NavigationPath"}]}]}]},{"type":"heading","text":"Basics","level":2,"anchor":"Basics"},{"inlineContent":[{"type":"text","text":"The tools for this style of navigation include "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" and the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","isActive":true},{"type":"text","text":" operator, as well as a new"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","isActive":true},{"type":"text","text":" view that behaves like "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" but is tuned specifically for the"},{"type":"text","text":" "},{"text":"Composable Architecture.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The process of integrating features into a navigation stack largely consists of 2 steps:"},{"type":"text","text":" "},{"text":"integrating the features’ domains together, and constructing a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","isActive":true},{"type":"text","text":" for"},{"type":"text","text":" "},{"text":"describing all the views in the stack. One typically starts by integrating the features’ domains","type":"text"},{"type":"text","text":" "},{"type":"text","text":"together. This consists of defining a new reducer, typically called "},{"code":"Path","type":"codeVoice"},{"text":", that holds the domains","type":"text"},{"text":" ","type":"text"},{"text":"of all the features that can be pushed onto the stack:","type":"text"}]},{"type":"codeListing","code":["struct RootFeature: Reducer {","  \/\/ ...","","  struct Path: Reducer {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Path"},{"text":" reducer is identical to the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" reducer that one creates for tree-based"},{"type":"text","text":" "},{"text":"navigation when using enums. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","type":"reference"},{"type":"text","text":" for more information."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Once the ","type":"text"},{"code":"Path","type":"codeVoice"},{"text":" reducer is defined we can then hold onto ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" in the"},{"text":" ","type":"text"},{"type":"text","text":"feature that manages the navigation stack:"}]},{"code":["struct RootFeature: Reducer {","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"text":" is generic over both state and action of the ","type":"text"},{"code":"Path","type":"codeVoice"},{"text":" domain. This is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"different from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", which only has a single generic."}]}],"style":"note","type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we must make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","isActive":true},{"text":" ","type":"text"},{"text":"method to integrate the domains of all the features that can be navigated to with the domain of the","type":"text"},{"text":" ","type":"text"},{"text":"parent feature:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct RootFeature: Reducer {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \/Action.path) { ","      Path()","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"That completes the steps to integrate the child and parent features together for a navigation stack."}],"type":"paragraph"},{"inlineContent":[{"text":"Next we must integrate the child and parent views together. This is done by constructing a special","type":"text"},{"type":"text","text":" "},{"text":"version of SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":" view that comes with this library, called","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":". This view takes 3 arguments: a store focused in on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":" in your domain, a trailing view builder for the root view of the stack, and"},{"type":"text","text":" "},{"text":"another trailing view builder for all of the views that can be pushed onto the stack:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["NavigationStackStore(","  \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { state in ","  switch state {","    \/\/ A view for each case of the Path.State enum","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fill in the first argument you only need to scope your store to the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" state and "},{"type":"codeVoice","code":"path"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action you already hold in the root feature:"}]},{"syntax":"swift","type":"codeListing","code":["struct RootView: View {","  let store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStackStore(","      self.store.scope(state: \\.path, action: { .path($0) })","    ) {","      \/\/ Root view of the navigation stack","    } destination: { state in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"]},{"inlineContent":[{"text":"The root view can be anything you want, and would typically have some ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"text":"s or other","type":"text"},{"type":"text","text":" "},{"text":"buttons that push new data onto the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" held in your domain."}],"type":"paragraph"},{"inlineContent":[{"text":"And the last trailing closure is provided a single piece of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum so that you can"},{"type":"text","text":" "},{"type":"text","text":"switch on it:"}],"type":"paragraph"},{"code":["} destination: { state in","  switch state {","  case .addItem:","  case .detailItem:","  case .editItem:","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will give you compile-time guarantees that you have handled each case of the "},{"code":"Path.State","type":"codeVoice"},{"text":" enum,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can be nice for when you add new types of destinations to the stack."}],"type":"paragraph"},{"inlineContent":[{"text":"In each of these cases you can return any kind of view that you want, but ultimately you want to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"make use of the library’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" view in order to scope down to a specific case of the"},{"type":"text","text":" "},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["} destination: { state in","  switch state {","  case .addItem:","    CaseLet(","      \/RootFeature.Path.State.addItem,","      action: RootFeature.Path.Action.addItem,","      then: AddView.init(store:)","    )","  case .detailItem:","    CaseLet(","      \/RootFeature.Path.State.detailItem,","      action: RootFeature.Path.Action.detailItem,","      then: DetailView.init(store:)","    )","  case .editItem:","    CaseLet(","      \/RootFeature.Path.State.editItem,","      action: RootFeature.Path.Action.editItem,","      then: EditView.init(store:)","    )","  }","}"]},{"inlineContent":[{"text":"And that is all it takes to integrate multiple child features together into a navigation stack,","type":"text"},{"type":"text","text":" "},{"text":"and done so with concisely modeled domains. Once those steps are taken you can easily add","type":"text"},{"type":"text","text":" "},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducer state and action enums,"},{"type":"text","text":" "},{"type":"text","text":"and you get complete introspection into what is happening in each child feature from the parent."},{"type":"text","text":" "},{"type":"text","text":"Continue reading into "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","type":"reference","isActive":true},{"type":"text","text":" for more information on that."}],"type":"paragraph"},{"text":"Integration","anchor":"Integration","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"type":"text","text":" "},{"text":"access to everything happening inside the navigation stack. You can use this as a means to integrate","type":"text"},{"type":"text","text":" "},{"text":"the logic of the stack element features with the parent feature. For example, if you want to detect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action."},{"text":" ","type":"text"},{"type":"text","text":"This consists of pattern matching on the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":", then the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"text":" action, then the feature you are interested in, and finally the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action you are interested in:"}]},{"code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"type":"text","text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = state.path[id: id]","  else { return .none }","","  state.path.pop(from: id)","  return .run { _ in","    await self.database.save(editItemState.item)","  }"]},{"inlineContent":[{"type":"text","text":"Note that when destructuring the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","type":"reference","isActive":true},{"text":" action we get access to not","type":"text"},{"type":"text","text":" "},{"text":"only the action that happened in the child domain, but also the ID of the element in the stack.","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"type":"text","text":" "},{"type":"text","text":"to look up specific elements in the stack using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)"},{"type":"text","text":" and pop elements"},{"text":" ","type":"text"},{"type":"text","text":"from the stack using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Dismissal","level":2,"text":"Dismissal","type":"heading"},{"inlineContent":[{"type":"text","text":"Dismissing a feature in a stack is as simple as mutating the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" using one of its"},{"text":" ","type":"text"},{"type":"text","text":"methods, such as "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true},{"text":" and more:","type":"text"}],"type":"paragraph"},{"code":["case .closeButtonTapped:","  state.popLast()","  return .none"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, in order to do this you must have access to that stack state, and usually only the parent"},{"type":"text","text":" "},{"type":"text","text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside"},{"type":"text","text":" "},{"text":"the child feature without needing explicit communication with the parent.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"text":"views","type":"text"}]},{"text":" to dismiss themselves from the parent,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"type":"codeVoice","code":"dismiss"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it can be used like so:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"]},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view that is presented in the"},{"type":"text","text":" "},{"text":"navigation stack, and removes that state from the collection powering the stack. This can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissal such as validation or async work."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s"},{"text":" ","type":"text"},{"text":"dependency management system (see ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"reference","isActive":true},{"text":") using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .closeButtonTapped:","      return .run { _ in await self.dismiss() }","    \/\/ ...","    } ","  }","}"]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true,"type":"reference"},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"text":" ","type":"text"},{"text":"reducer. Instead it must be called from ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","isActive":true}]}]},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will remove the corresponding value from the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"powering the navigation stack. It does this by sending a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","type":"reference","isActive":true},{"text":" action back","type":"text"},{"type":"text","text":" "},{"text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for dismissing a child feature entirely inside the child domain without explicitly communicating"},{"type":"text","text":" "},{"text":"with the parent.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"text":"after invoking ","type":"text"},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To do so would be to send an action for a feature while its state is not present in the stack,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and that will cause a runtime warning in Xcode and a test failure when running tests."}]}],"type":"aside","name":"Note"},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"SwiftUI’s environment value ","type":"text"},{"code":"@Environment(\\.dismiss)","type":"codeVoice"},{"type":"text","text":" and the Composable Architecture’s"},{"text":" ","type":"text"},{"text":"dependency value ","type":"text"},{"code":"@Dependency(\\.dismiss)","type":"codeVoice"},{"text":" serve similar purposes, but are completely different","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}]}]},{"text":"Testing","type":"heading","anchor":"Testing","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of using the tools of this library to model navigation stacks is that testing becomes"},{"type":"text","text":" "},{"type":"text","text":"quite easy. Further, using “non-exhaustive testing” (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can"},{"text":" ","type":"text"},{"type":"text","text":"be very useful for testing navigation since you often only want to assert on a few high level"},{"type":"text","text":" "},{"type":"text","text":"details and not all state mutations and effects."}]},{"inlineContent":[{"text":"As an example, consider the following simple counter feature that wants to dismiss itself if its","type":"text"},{"type":"text","text":" "},{"text":"count is greater than or equal to 5:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .run { _ in await self.dismiss() }","        : .none","    }","  }","}"]},{"inlineContent":[{"text":"And then let’s embed that feature into a parent feature:","type":"text"}],"type":"paragraph"},{"code":["struct Feature: Reducer {","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action: Equatable {","    case path(StackAction<Path.State, Path.Action>)","  }","","  struct Path: Reducer {","    enum State: Equatable { case counter(Counter.State) }","    enum Action: Equatable { case counter(Counter.Action) }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.counter, action: \/Action.counter) { Counter() }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \/Action.path) { Path() }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Now let’s try to write a test on the ","type":"text"},{"code":"Feature","type":"codeVoice"},{"text":" reducer that proves that when the child counter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" that starts in a state with a single counter already on the stack:"}],"type":"paragraph"},{"code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then we can send the ","type":"text"},{"type":"codeVoice","code":".incrementButtonTapped"},{"type":"text","text":" action in the counter child feature inside the"},{"text":" ","type":"text"},{"text":"stack in order to confirm that the count goes up by one, but in order to do so we need to provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an ID:"}]},{"syntax":"swift","type":"codeListing","code":["await store.send(.path(.element(id: ???, action: .incrementButtonTapped))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"As mentioned in ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" automatically manages IDs"},{"type":"text","text":" "},{"type":"text","text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests"},{"type":"text","text":" "},{"text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature","type":"text"},{"type":"text","text":" "},{"text":"pushed onto the stack the global ID increments by one.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that when the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" were constructed with a single element already in the stack"},{"type":"text","text":" "},{"type":"text","text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:"}]},{"type":"codeListing","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  \/\/ ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To"},{"type":"text","text":" "},{"text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the","type":"text"},{"type":"text","text":" "},{"text":"optional value returned from that subscript, then pattern match on the case of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"enum, and then perform the mutation."}]},{"inlineContent":[{"text":"The library provides two different tools to perform all of these steps in a single step. You can","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" helper:"}],"type":"paragraph"},{"type":"codeListing","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0.path[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 4","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"text":" function takes an ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":" piece of enum state as its first argument and a case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"path for its second argument, and then uses the case path to extract the payload in that case,"},{"type":"text","text":" "},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"text":" ","type":"text"},{"type":"text","text":"above we are subscripting into ID 0, isolating the "},{"type":"codeVoice","code":".counter"},{"type":"text","text":" case of the "},{"code":"Path.State","type":"codeVoice"},{"text":" enum,","type":"text"},{"text":" ","type":"text"},{"text":"and mutating the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" to be 4 since it incremented by one. Further, if the case of ","type":"text"},{"type":"codeVoice","code":"$0.path[id: 0]"},{"text":" ","type":"text"},{"text":"didn’t match the case path, then a test failure would be emitted.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another option is to use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true,"type":"reference"},{"text":" to simultaneously subscript into an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ID on the stack "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" a case of the path enum:"}]},{"code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  $0.path[id: 0, case: \/Feature.Path.State.counter]?.count = 4","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"XCTModify","type":"codeVoice"},{"text":" style is best when you have many things you need to modify on the state, and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)"},{"type":"text","text":" style is best when you have simple mutations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:","type":"text"}]},{"type":"codeListing","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0.path[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 5","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"text":" action being sent to pop the counter feature off the stack, which we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can assert using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","isActive":true},{"text":" method on","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["await store.receive(.path(.popFrom(id: 0))) {","  $0.path[id: 0] = nil","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"text":" ","type":"text"},{"type":"text","text":"other in a navigation stack."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, the more complex the features become, the more cumbersome testing their integration can be.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" for more info)."}]},{"inlineContent":[{"type":"text","text":"But "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" also supports a form of testing known as “non-exhaustive testing” that allows you"},{"text":" ","type":"text"},{"text":"to assert on only the parts of the features that you actually care about (see","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if we turn off exhaustivity on the test store (see ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"text":") then we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true,"type":"reference"},{"text":" action:","type":"text"}]},{"syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.receive(.path(.popFrom(id: 0)))","}"],"type":"codeListing"},{"inlineContent":[{"text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer","type":"text"},{"type":"text","text":" "},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}],"type":"paragraph"},{"anchor":"StackState-vs-NavigationPath","text":"StackState vs NavigationPath","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","type":"reference","isActive":true},{"type":"text","text":", and so you might wonder why we created our own data type,"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":", instead of leveraging "},{"code":"NavigationPath","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"NavigationPath","type":"codeVoice"},{"type":"text","text":" data type is a type-erased list of data that is tuned specifically for"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"s. It allows you to maximally decouple features in the stack since you can add any"},{"type":"text","text":" "},{"type":"text","text":"kind of data to a path, as long as it is "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack"},{"type":"text","text":" "},{"text":"corresponding to a type of data:","type":"text"}]},{"code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This can be powerful, but it does come with some downsides. Because the underlying data is"},{"type":"text","text":" "},{"type":"text","text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only"},{"type":"text","text":" "},{"text":"things you can do with a path are append data to the end of it, as seen above, or remove data","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the end of it:"}],"type":"paragraph"},{"syntax":"swift","code":["path.removeLast()"],"type":"codeListing"},{"inlineContent":[{"text":"Or count the elements in the path:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["path.count"]},{"inlineContent":[{"type":"text","text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even"},{"text":" ","type":"text"},{"type":"text","text":"iterate over the path:"}],"type":"paragraph"},{"type":"codeListing","code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"],"syntax":"swift"},{"inlineContent":[{"text":"This can make it very difficult to analyze what is on the stack and aggregate data across the","type":"text"},{"type":"text","text":" "},{"text":"entire stack.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The Composable Architecture’s "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" serves a similar purpose as "},{"type":"codeVoice","code":"NavigationPath"},{"text":", but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with different trade offs:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":" is fully statically typed, and so you cannot add just ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" kind of data to it.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But, "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"type":"text","text":" conforms to the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" protocol (as well as "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":"), which gives you access to a lot of methods for manipulating the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collection and introspecting what is inside the stack."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Your feature’s data does not need to be "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" to put it in a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":". The data type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"manages stable identifiers for your features under the hood, and automatically derives a hash"},{"text":" ","type":"text"},{"type":"text","text":"value from those identifiers."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":" offers a nice balance between full runtime flexibility and static,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the"},{"text":" ","type":"text"},{"text":"Composable Architecture.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"Stack-based navigation","role":"article","roleHeading":"Article"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"type":"topic","title":"Enum state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","abstract":[],"kind":"section"},"#Integration":{"title":"Integration","type":"link","titleInlineContent":[{"type":"text","text":"Integration"}],"identifier":"#Integration","url":"#Integration"},"#Dismissal":{"type":"link","titleInlineContent":[{"type":"text","text":"Dismissal"}],"identifier":"#Dismissal","url":"#Dismissal","title":"Dismissal"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"type":"topic","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackAction"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/stackaction","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"title":"StackAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE6Actionq_mfp"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"state"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQRzSQR_rlE5Statexmfp","kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"receive(_:timeout:assert:file:line:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","type":"topic","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","role":"symbol","title":"exhaustivity"},"#Basics":{"identifier":"#Basics","url":"#Basics","type":"link","titleInlineContent":[{"text":"Basics","type":"text"}],"title":"Basics"},"#Testing":{"url":"#Testing","identifier":"#Testing","titleInlineContent":[{"text":"Testing","type":"text"}],"title":"Testing","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:)":{"title":"subscript(id:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)","abstract":[{"text":"Accesses the value associated with the given id for reading and writing.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:)","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":" _: "},{"text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV7Elementxmfp","text":"Element"},{"kind":"text","text":"?"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"title":"pop(from:)","abstract":[{"type":"text","text":"Pops the element corresponding to "},{"code":"id","type":"codeVoice"},{"type":"text","text":" from the stack, and all elements after it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pop","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","role":"article","title":"Dependencies","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"navigatorTitle":[{"text":"StackElementID","kind":"identifier"}],"title":"StackElementID","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackElementID"}],"url":"\/documentation\/composablearchitecture\/stackelementid","abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":".","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"element"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture11StackActionO0D0q_mfp"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","title":"StackAction.element(id:action:)","abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"title":"CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","type":"link","titleInlineContent":[{"code":"NavigationPath","type":"codeVoice"}],"title":"NavigationPath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"abstract":[{"text":"A list of data representing the content of a navigation stack.","type":"text"}],"navigatorTitle":[{"text":"StackState","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/stackstate","title":"StackState","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"type":"topic","kind":"article","title":"Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"popFrom"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","type":"topic","title":"StackAction.popFrom(id:)","abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"title":"DismissEffect","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"type":"topic","title":"subscript(id:case:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"kind":"text","text":" _: "},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture10StackStateV7Elementxmfp","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV2id4caseqd__SgAA0C9ElementIDV_9CasePaths0I4PathVyxqd__Gtcluip0I0L_qd__mfp","text":"Case"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV2id4caseqd__SgAA0C9ElementIDV_9CasePaths0I4PathVyxqd__Gtcluip0I0L_qd__mfp","text":"Case"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Accesses the value associated with the given id and case for reading and writing."}],"url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","role":"symbol","navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"type":"topic","kind":"symbol","title":"NavigationStackStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"url":"\/documentation\/composablearchitecture\/testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","kind":"section","title":"Non-exhaustive testing","type":"topic","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"popLast"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"BidirectionalCollection","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","title":"popLast()","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/poplast()","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","title":"Integration","abstract":[],"type":"topic"},"#StackState-vs-NavigationPath":{"identifier":"#StackState-vs-NavigationPath","url":"#StackState-vs-NavigationPath","type":"link","titleInlineContent":[{"text":"StackState vs NavigationPath","type":"text"}],"title":"StackState vs NavigationPath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)":{"type":"topic","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"text":" ","type":"text"},{"type":"text","text":"parent state."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action11destination6fileID4lineAA06_StackC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd__qd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationO0L_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action11destination6fileID4lineAA06_StackC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd__qd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationO0L_qd__mfp"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action11destination6fileID4lineAA06_StackC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd__qd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF011DestinationR0L_qd_0_mfp","kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action11destination6fileID4lineAA06_StackC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd__qd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"_StackReducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13_StackReducerV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action11destination6fileID4lineAA06_StackC0Vyxqd_1_Gs15WritableKeyPathCy5StateQzAA0kO0Vyqd__GG_9CasePaths0pN0Vy6ActionQzAA0kR0Oyqd__qd_0_GGqd_1_yXEs12StaticStringVSutANQyd_1_Rsd__AWQyd_1_Rsd_0_AaBRd_1_r1_lF11DestinationL_qd_1_mfp","kind":"typeIdentifier","text":"Destination"},{"text":">","kind":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","title":"forEach(_:action:destination:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"abstract":[{"type":"text","text":"비동기의 단위 작업을 감싼 "},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"title":"run(priority:operation:catch:fileID:line:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"send"},{"kind":"text","text":": "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"text":": ((","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"error"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"send","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV6Actionxmfp","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"}}}