{"sections":[],"kind":"article","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stack-based navigation is the process of modeling navigation using collections of state. This style"},{"text":" ","type":"text"},{"type":"text","text":"of navigation allows you to deep-link into any state of your application by simply constructing a"},{"type":"text","text":" "},{"text":"flat collection of data, handing it off to SwiftUI, and letting it take care of the rest.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It also allows for complex and recursive navigation paths in your application."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"#Basics","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Integration","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Dismissal","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Testing","type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#StackState-vs-NavigationPath","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"anchor":"Basics","level":2,"text":"Basics","type":"heading"},{"inlineContent":[{"text":"The tools for this style of navigation include ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":" and the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","isActive":true},{"text":" operator, as well as a new","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"text":" view that behaves like ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" but is tuned specifically for the"},{"text":" ","type":"text"},{"text":"Composable Architecture.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The process of integrating features into a navigation stack largely consists of 2 steps:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integrating the features’ domains together, and constructing a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" for"},{"text":" ","type":"text"},{"type":"text","text":"describing all the views in the stack. One typically starts by integrating the features’ domains"},{"type":"text","text":" "},{"text":"together. This consists of defining a new reducer, typically called ","type":"text"},{"type":"codeVoice","code":"Path"},{"text":", that holds the domains","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of all the features that can be pushed onto the stack:"}],"type":"paragraph"},{"code":["struct RootFeature: Reducer {","  \/\/ ...","","  struct Path: Reducer {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"Path","type":"codeVoice"},{"text":" reducer is identical to the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"text":" reducer that one creates for tree-based","type":"text"},{"type":"text","text":" "},{"text":"navigation when using enums. See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","isActive":true,"type":"reference"},{"type":"text","text":" for more information."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"Once the ","type":"text"},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducer is defined we can then hold onto "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"text":"feature that manages the navigation stack:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct RootFeature: Reducer {","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","    \/\/ ...","  }","}"]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"type":"text","text":" is generic over both state and action of the "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" domain. This is"},{"text":" ","type":"text"},{"type":"text","text":"different from "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"type":"text","text":", which only has a single generic."}]}]},{"inlineContent":[{"text":"And then we must make use of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"method to integrate the domains of all the features that can be navigated to with the domain of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent feature:"}],"type":"paragraph"},{"code":["struct RootFeature: Reducer {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \/Action.path) { ","      Path()","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"That completes the steps to integrate the child and parent features together for a navigation stack."}],"type":"paragraph"},{"inlineContent":[{"text":"Next we must integrate the child and parent views together. This is done by constructing a special","type":"text"},{"type":"text","text":" "},{"type":"text","text":"version of SwiftUI’s "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" view that comes with this library, called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":". This view takes 3 arguments: a store focused in on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" "},{"type":"text","text":"and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":" in your domain, a trailing view builder for the root view of the stack, and"},{"type":"text","text":" "},{"type":"text","text":"another trailing view builder for all of the views that can be pushed onto the stack:"}],"type":"paragraph"},{"syntax":"swift","code":["NavigationStackStore(","  \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { state in ","  switch state {","    \/\/ A view for each case of the Path.State enum","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fill in the first argument you only need to scope your store to the "},{"type":"codeVoice","code":"path"},{"text":" state and ","type":"text"},{"type":"codeVoice","code":"path"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action you already hold in the root feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","  let store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStackStore(","      self.store.scope(state: \\.path, action: { .path($0) })","    ) {","      \/\/ Root view of the navigation stack","    } destination: { state in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"The root view can be anything you want, and would typically have some "},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":"s or other"},{"text":" ","type":"text"},{"type":"text","text":"buttons that push new data onto the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" held in your domain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the last trailing closure is provided a single piece of the "},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum so that you can"},{"text":" ","type":"text"},{"type":"text","text":"switch on it:"}]},{"syntax":"swift","code":["} destination: { state in","  switch state {","  case .addItem:","  case .detailItem:","  case .editItem:","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will give you compile-time guarantees that you have handled each case of the "},{"type":"codeVoice","code":"Path.State"},{"text":" enum,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can be nice for when you add new types of destinations to the stack."}]},{"type":"paragraph","inlineContent":[{"text":"In each of these cases you can return any kind of view that you want, but ultimately you want to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"make use of the library’s "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference","isActive":true},{"type":"text","text":" view in order to scope down to a specific case of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Path.State"},{"text":" enum:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["} destination: { state in","  switch state {","  case .addItem:","    CaseLet(","      \/RootFeature.Path.State.addItem,","      action: RootFeature.Path.Action.addItem,","      then: AddView.init(store:)","    )","  case .detailItem:","    CaseLet(","      \/RootFeature.Path.State.detailItem,","      action: RootFeature.Path.Action.detailItem,","      then: DetailView.init(store:)","    )","  case .editItem:","    CaseLet(","      \/RootFeature.Path.State.editItem,","      action: RootFeature.Path.Action.editItem,","      then: EditView.init(store:)","    )","  }","}"]},{"inlineContent":[{"type":"text","text":"And that is all it takes to integrate multiple child features together into a navigation stack,"},{"type":"text","text":" "},{"text":"and done so with concisely modeled domains. Once those steps are taken you can easily add","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"code":"Path","type":"codeVoice"},{"text":" reducer state and action enums,","type":"text"},{"type":"text","text":" "},{"text":"and you get complete introspection into what is happening in each child feature from the parent.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Continue reading into "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","isActive":true},{"text":" for more information on that.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Integration","text":"Integration"},{"inlineContent":[{"text":"Once your features are integrated together using the steps above, your parent feature gets instant","type":"text"},{"type":"text","text":" "},{"text":"access to everything happening inside the navigation stack. You can use this as a means to integrate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the logic of the stack element features with the parent feature. For example, if you want to detect"},{"text":" ","type":"text"},{"type":"text","text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action."},{"text":" ","type":"text"},{"text":"This consists of pattern matching on the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"type":"text","text":", then the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true,"type":"reference"},{"type":"text","text":" action, then the feature you are interested in, and finally the"},{"type":"text","text":" "},{"text":"action you are interested in:","type":"text"}],"type":"paragraph"},{"code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Once inside that case you can then try extracting out the feature state so that you can perform","type":"text"},{"type":"text","text":" "},{"text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = state.path[id: id]","  else { return .none }","","  state.path.pop(from: id)","  return .run { _ in","    await self.database.save(editItemState.item)","  }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that when destructuring the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true},{"type":"text","text":" action we get access to not"},{"type":"text","text":" "},{"text":"only the action that happened in the child domain, but also the ID of the element in the stack.","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"type":"text","text":" "},{"type":"text","text":"to look up specific elements in the stack using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)"},{"type":"text","text":" and pop elements"},{"text":" ","type":"text"},{"text":"from the stack using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Dismissal","text":"Dismissal"},{"inlineContent":[{"type":"text","text":"Dismissing a feature in a stack is as simple as mutating the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" using one of its"},{"type":"text","text":" "},{"text":"methods, such as ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)"},{"type":"text","text":" and more:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.popLast()","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in order to do this you must have access to that stack state, and usually only the parent"},{"text":" ","type":"text"},{"type":"text","text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside"},{"type":"text","text":" "},{"type":"text","text":"the child feature without needing explicit communication with the parent."}]},{"type":"paragraph","inlineContent":[{"text":"SwiftUI provides a wonderful tool for allowing child ","type":"text"},{"inlineContent":[{"type":"text","text":"views"}],"type":"emphasis"},{"text":" to dismiss themselves from the parent,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"code":"dismiss","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it can be used like so:"}]},{"code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view that is presented in the"},{"text":" ","type":"text"},{"text":"navigation stack, and removes that state from the collection powering the stack. This can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"text":" elsewhere, like in an observable object, which would allow you to have nuanced logic","type":"text"},{"type":"text","text":" "},{"text":"for dismissal such as validation or async work.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"text":" ","type":"text"},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dependency management system (see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":") using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .closeButtonTapped:","      return .run { _ in await self.dismiss() }","    \/\/ ...","    } ","  }","}"]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Instead it must be called from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"self.dismiss()","type":"codeVoice"},{"type":"text","text":" is invoked it will remove the corresponding value from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" "},{"type":"text","text":"powering the navigation stack. It does this by sending a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"text":" action back","type":"text"},{"type":"text","text":" "},{"text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic","type":"text"},{"text":" ","type":"text"},{"text":"for dismissing a child feature entirely inside the child domain without explicitly communicating","type":"text"},{"type":"text","text":" "},{"text":"with the parent.","type":"text"}]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Because dismissal is handled by sending an action, it is not valid to ever send an action","type":"text"},{"text":" ","type":"text"},{"text":"after invoking ","type":"text"},{"code":"dismiss()","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"type":"codeListing"},{"inlineContent":[{"text":"To do so would be to send an action for a feature while its state is not present in the stack,","type":"text"},{"type":"text","text":" "},{"text":"and that will cause a runtime warning in Xcode and a test failure when running tests.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"code":"@Environment(\\.dismiss)","type":"codeVoice"},{"text":" and the Composable Architecture’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"code":"@Dependency(\\.dismiss)","type":"codeVoice"},{"text":" serve similar purposes, but are completely different","type":"text"},{"text":" ","type":"text"},{"text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dependency value can only be used inside reducers."}]}]},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of using the tools of this library to model navigation stacks is that testing becomes"},{"type":"text","text":" "},{"type":"text","text":"quite easy. Further, using “non-exhaustive testing” (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"type":"text","text":") can"},{"text":" ","type":"text"},{"text":"be very useful for testing navigation since you often only want to assert on a few high level","type":"text"},{"text":" ","type":"text"},{"text":"details and not all state mutations and effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}]},{"code":["struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .run { _ in await self.dismiss() }","        : .none","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And then let’s embed that feature into a parent feature:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Feature: Reducer {","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action: Equatable {","    case path(StackAction<Path.State, Path.Action>)","  }","","  struct Path: Reducer {","    enum State: Equatable { case counter(Counter.State) }","    enum Action: Equatable { case counter(Counter.Action) }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.counter, action: \/Action.counter) { Counter() }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \/Action.path) { Path() }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer that proves that when the child counter"},{"type":"text","text":" "},{"text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"text":" that starts in a state with a single counter already on the stack:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can send the "},{"type":"codeVoice","code":".incrementButtonTapped"},{"text":" action in the counter child feature inside the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack in order to confirm that the count goes up by one, but in order to do so we need to provide"},{"text":" ","type":"text"},{"text":"an ID:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: ???, action: .incrementButtonTapped))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"As mentioned in ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":" automatically manages IDs"},{"type":"text","text":" "},{"type":"text","text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests"},{"text":" ","type":"text"},{"type":"text","text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature"},{"type":"text","text":" "},{"type":"text","text":"pushed onto the stack the global ID increments by one."}]},{"inlineContent":[{"text":"This means that when the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" were constructed with a single element already in the stack"},{"type":"text","text":" "},{"text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:","type":"text"}],"type":"paragraph"},{"code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To"},{"text":" ","type":"text"},{"type":"text","text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the"},{"text":" ","type":"text"},{"text":"optional value returned from that subscript, then pattern match on the case of the ","type":"text"},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" "},{"text":"enum, and then perform the mutation.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The library provides two different tools to perform all of these steps in a single step. You can"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" helper:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0.path[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 4","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"XCTModify","type":"codeVoice"},{"type":"text","text":" function takes an "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" piece of enum state as its first argument and a case"},{"text":" ","type":"text"},{"text":"path for its second argument, and then uses the case path to extract the payload in that case,","type":"text"},{"type":"text","text":" "},{"text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"above we are subscripting into ID 0, isolating the "},{"code":".counter","type":"codeVoice"},{"text":" case of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum,"},{"text":" ","type":"text"},{"text":"and mutating the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" to be 4 since it incremented by one. Further, if the case of "},{"code":"$0.path[id: 0]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"didn’t match the case path, then a test failure would be emitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another option is to use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true},{"type":"text","text":" to simultaneously subscript into an"},{"type":"text","text":" "},{"type":"text","text":"ID on the stack "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" a case of the path enum:"}]},{"syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  $0.path[id: 0, case: \/Feature.Path.State.counter]?.count = 4","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" style is best when you have many things you need to modify on the state, and the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true},{"text":" style is best when you have simple mutations.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:"}]},{"code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0.path[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 5","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true},{"type":"text","text":" action being sent to pop the counter feature off the stack, which we"},{"type":"text","text":" "},{"text":"can assert using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","type":"reference","isActive":true},{"text":" method on","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":":","type":"text"}]},{"code":["await store.receive(.path(.popFrom(id: 0))) {","  $0.path[id: 0] = nil","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"text":" ","type":"text"},{"type":"text","text":"other in a navigation stack."}]},{"type":"paragraph","inlineContent":[{"text":"However, the more complex the features become, the more cumbersome testing their integration can be.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"text":" ","type":"text"},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","isActive":true},{"text":" for more info).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"text":" for more info).","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":") then we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action:"}],"type":"paragraph"},{"type":"codeListing","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.receive(.path(.popFrom(id: 0)))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer","type":"text"},{"text":" ","type":"text"},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"level":2,"text":"StackState vs NavigationPath","anchor":"StackState-vs-NavigationPath","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","type":"reference"},{"text":", and so you might wonder why we created our own data type,","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":", instead of leveraging "},{"code":"NavigationPath","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"NavigationPath","type":"codeVoice"},{"text":" data type is a type-erased list of data that is tuned specifically for","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"s. It allows you to maximally decouple features in the stack since you can add any"},{"text":" ","type":"text"},{"type":"text","text":"kind of data to a path, as long as it is "},{"type":"codeVoice","code":"Hashable"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"]},{"inlineContent":[{"type":"text","text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack"},{"type":"text","text":" "},{"text":"corresponding to a type of data:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This can be powerful, but it does come with some downsides. Because the underlying data is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only"},{"type":"text","text":" "},{"type":"text","text":"things you can do with a path are append data to the end of it, as seen above, or remove data"},{"text":" ","type":"text"},{"text":"from the end of it:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["path.removeLast()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Or count the elements in the path:"}],"type":"paragraph"},{"syntax":"swift","code":["path.count"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even"},{"text":" ","type":"text"},{"text":"iterate over the path:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can make it very difficult to analyze what is on the stack and aggregate data across the"},{"text":" ","type":"text"},{"text":"entire stack.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" serves a similar purpose as "},{"type":"codeVoice","code":"NavigationPath"},{"text":", but","type":"text"},{"type":"text","text":" "},{"text":"with different trade offs:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"text":" is fully statically typed, and so you cannot add just ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" kind of data to it."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"But, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" conforms to the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" protocol (as well as "},{"code":"RandomAccessCollection","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":"), which gives you access to a lot of methods for manipulating the"},{"text":" ","type":"text"},{"text":"collection and introspecting what is inside the stack.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Your feature’s data does not need to be "},{"type":"codeVoice","code":"Hashable"},{"text":" to put it in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"type":"text","text":". The data type"},{"text":" ","type":"text"},{"text":"manages stable identifiers for your features under the hood, and automatically derives a hash","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value from those identifiers."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"We feel that "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" offers a nice balance between full runtime flexibility and static,"},{"text":" ","type":"text"},{"type":"text","text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the"},{"type":"text","text":" "},{"text":"Composable Architecture.","type":"text"}],"type":"paragraph"}]}],"seeAlsoSections":[{"title":"Stack-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"],"generated":true}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Stack-based navigation","roleHeading":"Article"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"type":"text","text":" "},{"text":"model your domains, how to integrate features, how to test your features, and more.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"title":"exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)","title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:)","role":"symbol","abstract":[{"text":"Accesses the value associated with the given id for reading and writing.","type":"text"}],"fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","title":"StackAction","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)":{"kind":"symbol","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StackState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"_StackReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","role":"symbol","type":"topic","title":"forEach(_:action:destination:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","title":"StackState","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate","abstract":[{"text":"네비게이션 스택의 컨텐츠를 나타내는 데이터 목록","type":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic","title":"CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","abstract":[{"text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","role":"article","url":"\/documentation\/composablearchitecture\/testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackElementID"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","title":"StackElementID","type":"topic","abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/stackelementid","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StackElementID"}],"kind":"symbol"},"#Dismissal":{"identifier":"#Dismissal","titleInlineContent":[{"text":"Dismissal","type":"text"}],"title":"Dismissal","url":"#Dismissal","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction","role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","kind":"section","type":"topic","abstract":[],"title":"Non-exhaustive testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"title":"DismissEffect","role":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","kind":"symbol","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},"#Integration":{"title":"Integration","titleInlineContent":[{"type":"text","text":"Integration"}],"url":"#Integration","identifier":"#Integration","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","title":"subscript(id:case:)","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)","role":"symbol","abstract":[{"text":"Accesses the value associated with the given id and case for reading and writing.","type":"text"}],"fragments":[{"kind":"keyword","text":"subscript"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"case"},{"text":" _: ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic"},"#Testing":{"title":"Testing","titleInlineContent":[{"text":"Testing","type":"text"}],"url":"#Testing","identifier":"#Testing","type":"link"},"#StackState-vs-NavigationPath":{"identifier":"#StackState-vs-NavigationPath","titleInlineContent":[{"text":"StackState vs NavigationPath","type":"text"}],"title":"StackState vs NavigationPath","url":"#StackState-vs-NavigationPath","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","type":"topic","title":"Integration","url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration","kind":"section","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","title":"Enum state"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"titleInlineContent":[{"code":"NavigationPath","type":"codeVoice"}],"type":"link","title":"NavigationPath","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"title":"run(priority:operation:catch:fileID:line:)","type":"topic","abstract":[{"text":"비동기의 단위 작업을 감싼 ","type":"text"},{"code":"Effect","type":"codeVoice"},{"type":"text","text":" 를 제공합니다. 비동기 작업은 횟수 제한없이 액션을 방출합니다."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","kind":"typeIdentifier","text":"TaskPriority"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-5awso":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-5awso","abstract":[{"text":"Asserts an action was received from an effect and asserts how the state changes.","type":"text"}],"title":"receive(_:timeout:assert:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-5awso","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"type":"topic","title":"Navigation","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/navigation","kind":"article","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"title":"StackAction.element(id:action:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"element","kind":"identifier"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pop","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","title":"pop(from:)","kind":"symbol","abstract":[{"type":"text","text":"Pops the element corresponding to "},{"code":"id","type":"codeVoice"},{"text":" from the stack, and all elements after it.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/switchstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"abstract":[{"text":"A view that observes when enum state held in a store changes cases, and provides stores to","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference","isActive":true},{"type":"text","text":" views."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"type":"topic","title":"SwitchStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"popFrom","kind":"identifier"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","title":"StackAction.popFrom(id:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},"#Basics":{"titleInlineContent":[{"text":"Basics","type":"text"}],"type":"link","identifier":"#Basics","title":"Basics","url":"#Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"kind":"symbol","title":"popLast()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"popLast","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"code":"BidirectionalCollection","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/stackstate\/poplast()","role":"symbol","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"}}}