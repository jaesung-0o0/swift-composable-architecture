{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"title":"Conforms To","type":"conformsTo"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/init(_:content:)"],"title":"Initializers"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/body","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/data"],"title":"Instance Properties"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations"],"title":"Default Implementations","generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"title":"View containers","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"EachState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"EachAction"},{"text":", ","kind":"text"},{"text":"Data","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Data","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ID","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SH","kind":"typeIdentifier","text":"Hashable"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":" loops over a store’s collection with a store scoped to the domain of each"},{"type":"text","text":" "},{"type":"text","text":"element. This allows you to extract and modularize an element’s view and avoid concerns around"},{"type":"text","text":" "},{"text":"collection index math and parent-child store communication.","type":"text"}]},{"inlineContent":[{"text":"For example, a todos app may define the domain and logic associated with an individual todo:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Todo: Reducer {","  struct State: Equatable, Identifiable {","    let id: UUID","    var description = \"\"","    var isComplete = false","  }","","  enum Action {","    case isCompleteToggled(Bool)","    case descriptionChanged(String)","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    \/\/ ...","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"As well as a view with a domain-specific store:"}],"type":"paragraph"},{"code":["struct TodoView: View {","  let store: StoreOf<Todo>","  var body: some View { \/* ... *\/ }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For a parent domain to work with a collection of todos, it can hold onto this collection in","type":"text"},{"text":" ","type":"text"},{"text":"state:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Todos: Reducer {","  struct State: Equatable {","    var todos: IdentifiedArrayOf<Todo.State> = []","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Define a case to handle actions sent to the child domain:","type":"text"}]},{"code":["enum Action {","  case todo(id: Todo.State.ID, action: Todo.Action)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Enhance its core reducer using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)","isActive":true},{"type":"text","text":":"}]},{"code":["var body: some Reducer<State, Action> {","  Reduce { state, action in","    \/\/ ...","  }","  .forEach(\\.todos, action: \/Action.todo(id:action:)) {","    Todo()","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally render a list of "},{"type":"codeVoice","code":"TodoView"},{"text":"s using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"type":"text","text":":"}]},{"type":"codeListing","code":["ForEachStore(","  self.store.scope(state: \\.todos, action: { .todo(id: $0, action: $1) })",") { todoStore in","  TodoView(store: todoStore)","}"],"syntax":"swift"}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"metadata":{"title":"ForEachStore","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"role":"symbol","symbolKind":"struct","externalID":"s:22ComposableArchitecture12ForEachStoreV","roleHeading":"Structure"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/foreachstore"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/data":{"url":"\/documentation\/composablearchitecture\/foreachstore\/data","type":"topic","title":"data","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"data","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Data"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/data","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","type":"unresolvable","title":"SwiftUI.DynamicViewContent"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/switchstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"abstract":[{"text":"A view that observes when enum state held in a store changes cases, and provides stores to","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference","isActive":true},{"type":"text","text":" views."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"type":"topic","title":"SwitchStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:line:)":{"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)","title":"forEach(_:action:element:fileID:line:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElementAction"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Element","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"text":")>, ","kind":"text"},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_ForEachReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","title":"ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"title":"NavigationStackStore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic","title":"CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/View-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations","url":"\/documentation\/composablearchitecture\/foreachstore\/view-implementations","abstract":[],"kind":"article","title":"View Implementations","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/DynamicViewContent-Implementations":{"url":"\/documentation\/composablearchitecture\/foreachstore\/dynamicviewcontent-implementations","type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/DynamicViewContent-Implementations","kind":"article","title":"DynamicViewContent Implementations"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","type":"unresolvable","title":"SwiftUI.View"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"topic","title":"IfLetStore","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/init(_:content:)":{"url":"\/documentation\/composablearchitecture\/foreachstore\/init(_:content:)","type":"topic","title":"init(_:content:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"EachContent","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"EachState","kind":"typeIdentifier"},{"kind":"text","text":">, ("},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"text":"EachAction","kind":"typeIdentifier"},{"text":")>, ","kind":"text"},{"text":"content","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"EachState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"EachAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EachContent"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/init(_:content:)","abstract":[{"type":"text","text":"Initializes a structure that computes views on demand from a store on a collection of data and"},{"type":"text","text":" "},{"type":"text","text":"an identified action."}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/body":{"url":"\/documentation\/composablearchitecture\/foreachstore\/body","type":"topic","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/body","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"title":"ForEachStore","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"type":"topic"}}}