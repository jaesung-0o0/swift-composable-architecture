{"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/foreachstore"]}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"kind":"relationships","type":"conformsTo"}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","role":"symbol","externalID":"s:22ComposableArchitecture12ForEachStoreV","title":"ForEachStore","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"generated":true,"title":"View containers"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"EachState"},{"kind":"text","text":", "},{"text":"EachAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Data","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Content","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Data","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":" : "},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH"},{"text":", ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}],"languages":["swift"]}]},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true,"type":"reference"},{"type":"text","text":" loops over a store’s collection with a store scoped to the domain of each"},{"text":" ","type":"text"},{"type":"text","text":"element. This allows you to extract and modularize an element’s view and avoid concerns around"},{"type":"text","text":" "},{"type":"text","text":"collection index math and parent-child store communication."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a todos app may define the domain and logic associated with an individual todo:"}]},{"code":["struct Todo: Reducer {","  struct State: Equatable, Identifiable {","    let id: UUID","    var description = \"\"","    var isComplete = false","  }","","  enum Action {","    case isCompleteToggled(Bool)","    case descriptionChanged(String)","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As well as a view with a domain-specific store:"}]},{"syntax":"swift","type":"codeListing","code":["struct TodoView: View {","  let store: StoreOf<Todo>","  var body: some View { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a parent domain to work with a collection of todos, it can hold onto this collection in"},{"type":"text","text":" "},{"text":"state:","type":"text"}]},{"code":["struct Todos: Reducer {","  struct State: Equatable {","    var todos: IdentifiedArrayOf<Todo.State> = []","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a case to handle actions sent to the child domain:"}]},{"type":"codeListing","syntax":"swift","code":["enum Action {","  case todo(id: Todo.State.ID, action: Todo.Action)","}"]},{"inlineContent":[{"text":"Enhance its core reducer using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some Reducer<State, Action> {","  Reduce { state, action in","    \/\/ ...","  }","  .forEach(\\.todos, action: \/Action.todo(id:action:)) {","    Todo()","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And finally render a list of "},{"type":"codeVoice","code":"TodoView"},{"text":"s using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["ForEachStore(","  self.store.scope(state: \\.todos, action: { .todo(id: $0, action: $1) })",") { todoStore in","  TodoView(store: todoStore)","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"kind":"symbol","topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/init(_:content:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/body","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/data"],"title":"Instance Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations"],"generated":true}],"references":{"doc://ComposableArchitecture/7SwiftUI4ViewP":{"title":"SwiftUI.View","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","role":"symbol","url":"\/documentation\/composablearchitecture\/caselet","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"title":"CaseLet","kind":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/init(_:content:)":{"title":"init(_:content:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"EachContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID","preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV2IDq1_mfp"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"EachState","preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV0D5Statexmfp"},{"text":">, (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV2IDq1_mfp","text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV0D6Actionq_mfp","text":"EachAction","kind":"typeIdentifier"},{"text":")>, ","kind":"text"},{"text":"content","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"store"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV0D5Statexmfp","kind":"typeIdentifier","text":"EachState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV0D6Actionq_mfp","text":"EachAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV_7contentACyxq_21IdentifiedCollections0G5ArrayVyq1_xGq1_AA08WithViewE0VyAHq1__q_t7SwiftUI0cD0VyAHq1_qd__GGGAA0E0CyAHq1__q_tG_qd__ARyxq_GctcAHRs0_AORs2_AK0K0Rd__lufc0D7ContentL_qd__mfp","text":"EachContent","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/composablearchitecture\/foreachstore\/init(_:content:)","abstract":[{"type":"text","text":"Initializes a structure that computes views on demand from a store on a collection of data and"},{"text":" ","type":"text"},{"text":"an identified action.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/init(_:content:)","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:line:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:line:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementState"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ID"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF0I0L_qd_1_mfp","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF07ElementO0L_qd__mfp","text":"ElementState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF0I0L_qd_1_mfp","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF07ElementU0L_qd_0_mfp","text":"ElementAction"},{"text":")>, ","kind":"text"},{"kind":"externalParam","text":"element"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF7ElementL_qd_2_mfp"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_ForEachReducer","preciseIdentifier":"s:22ComposableArchitecture15_ForEachReducerV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ID","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF0I0L_qd_1_mfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:22ComposableArchitecture7ReducerPAAE7forEach_6action7element6fileID4lineAA04_ForeC0Vyxqd_1_qd_2_Gs15WritableKeyPathCy5StateQz21IdentifiedCollections0P5ArrayVyqd_1_qd__GG_9CasePaths0sN0Vy6ActionQzqd_1__qd_0_tGqd_2_yXEs12StaticStringVSutANQyd_2_Rsd__AXQyd_2_Rsd_0_SHRd_1_AaBRd_2_r2_lF7ElementL_qd_2_mfp"},{"text":">","kind":"text"}],"abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"title":"forEach(_:action:element:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/body":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"kind":"text","text":": "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}],"title":"body","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/body","kind":"symbol","abstract":[],"url":"\/documentation\/composablearchitecture\/foreachstore\/body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"title":"ViewStore","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"type":"topic","kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/data":{"title":"data","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"data"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ForEachStoreV4Dataq0_mfp","kind":"typeIdentifier","text":"Data"}],"url":"\/documentation\/composablearchitecture\/foreachstore\/data","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/data","kind":"symbol","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"text":" views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/View-Implementations":{"title":"View Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/foreachstore\/view-implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","title":"SwiftUI.DynamicViewContent"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","title":"IfLetStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/DynamicViewContent-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/foreachstore\/dynamicviewcontent-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/DynamicViewContent-Implementations","role":"collectionGroup","kind":"article","title":"DynamicViewContent Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","role":"symbol","navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"type":"topic","kind":"symbol","title":"NavigationStackStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"}}}