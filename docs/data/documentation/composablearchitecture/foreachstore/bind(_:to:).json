{"kind":"symbol","abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations"]]},"metadata":{"externalID":"s:7SwiftUI4ViewP0A16UINavigationCoreE4bind_2toQrqd___qd_0_tAD9_BindableRd__AdGRd_0_SQ5ValueRpd__AHQyd_0_AIRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture12ForEachStoreV","roleHeading":"Instance Method","modules":[{"name":"ComposableArchitecture","relatedModules":["SwiftUI"]}],"platforms":[{"deprecated":false,"name":"iOS","unavailable":false,"introducedAt":"14.0","beta":false},{"name":"macOS","deprecated":false,"introducedAt":"11.0","unavailable":false,"beta":false},{"unavailable":false,"introducedAt":"14.0","beta":false,"deprecated":false,"name":"tvOS"},{"beta":false,"deprecated":false,"name":"watchOS","unavailable":false,"introducedAt":"7.0"}],"symbolKind":"method","extendedModule":"SwiftUI","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bind"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ModelValue"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewValue"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewValue"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"title":"bind(_:to:)","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/foreachstore\/bind(_:to:)"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/bind(_:to:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ModelValue","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewValue"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"modelValue","kind":"internalParam"},{"kind":"text","text":": "},{"text":"ModelValue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":" "},{"text":"viewValue","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_Bindable"},{"text":", ","kind":"text"},{"text":"ViewValue","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"_Bindable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ModelValue"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:SQ","kind":"typeIdentifier","text":"Equatable"},{"text":", ","kind":"text"},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" == "},{"text":"ViewValue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"\n","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A binding from model state. ","type":"text"},{"inlineContent":[{"type":"text","text":"E.g."}],"type":"emphasis"},{"type":"text","text":", a binding derived from a published field"},{"text":" ","type":"text"},{"type":"text","text":"on an observable object."}]}],"name":"modelValue"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding from view state. "},{"inlineContent":[{"type":"text","text":"E.g."}],"type":"emphasis"},{"type":"text","text":", a focus binding."}]}],"name":"viewValue"}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"text":"SwiftUI comes with many property wrappers that can be used in views to drive view state, like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"field focus. Unfortunately, these property wrappers "},{"inlineContent":[{"type":"text","text":"must"}],"type":"emphasis"},{"type":"text","text":" be used in views. It’s not possible"},{"type":"text","text":" "},{"type":"text","text":"to extract this logic to an observable object and integrate it with the rest of the model’s"},{"text":" ","type":"text"},{"text":"business logic, and be in a better position to test this state.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We can work around these limitations by introducing a published field to your observable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object and synchronizing it to view state with this view modifier."}]}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","title":"SwiftUI Integration","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/bind(_:to:)":{"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/bind(_:to:)","url":"\/documentation\/composablearchitecture\/foreachstore\/bind(_:to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"bind","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ModelValue","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ViewValue","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"ModelValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"ViewValue","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"title":"bind(_:to:)","abstract":[{"type":"text","text":"Synchronizes model state to view state via two-way bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","role":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"type":"topic","kind":"symbol","title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore/View-Implementations":{"title":"View Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/foreachstore\/view-implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore\/View-Implementations"}}}