{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"symbolKind":"struct","title":"AnyScheduler","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyScheduler"}],"roleHeading":"Structure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyScheduler"}],"modules":[{"name":"ComposableArchitecture"}],"externalID":"s:17CombineSchedulers12AnySchedulerV"},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/minimumTolerance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/now"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(options:_:)"],"title":"Instance Methods"},{"title":"Type Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-1wd8w","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-6rks3","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-72aqv","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-52iwi","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-6fs4i","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-7t04g","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-2ccke","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-4xd6t","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-9vmjt","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/shared","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-2eza8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-4kkaa","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-yw77"]},{"title":"Type Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-20w14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-2402o","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-64ryl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/global(qos:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-27peg","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-37rcm","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-7dg30"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations"],"generated":true,"title":"Default Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyScheduler","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"SchedulerOptions"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Strideable","preciseIdentifier":"s:Sx"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"SchedulerTimeIntervalConvertible","kind":"typeIdentifier","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is useful for times that you want to be able to customize the scheduler used in some"},{"text":" ","type":"text"},{"text":"code from the outside, but you don’t want to introduce a generic to make it customizable. For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example, suppose you have a view model "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" that performs an API request when a"},{"type":"text","text":" "},{"type":"text","text":"method is called:"}]},{"syntax":"swift","type":"codeListing","code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","","  init(apiClient: ApiClient) {","    self.apiClient = apiClient","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: DispatchQueue.main)","      .assign(to: &self.$episode)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that we are using "},{"code":"DispatchQueue.main","type":"codeVoice"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"reloadButtonTapped"},{"type":"text","text":" method because the"},{"type":"text","text":" "},{"type":"codeVoice","code":"fetchEpisode"},{"type":"text","text":" endpoint most likely delivers its output on a background thread (as is the case"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"URLSession"},{"text":").","type":"text"}]},{"inlineContent":[{"text":"This code seems innocent enough, but the presence of ","type":"text"},{"type":"codeVoice","code":".receive(on: DispatchQueue.main)"},{"type":"text","text":" makes"},{"text":" ","type":"text"},{"type":"text","text":"this code harder to test since you have to use "},{"code":"XCTest","type":"codeVoice"},{"type":"text","text":" expectations to explicitly wait a small"},{"text":" ","type":"text"},{"text":"amount of time for the queue to execute. This can lead to flakiness in tests and make test","type":"text"},{"type":"text","text":" "},{"type":"text","text":"suites take longer to execute than necessary."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One way to fix this testing problem is to use an “immediate” scheduler instead of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.main"},{"text":", which will cause ","type":"text"},{"type":"codeVoice","code":"fetchEpisode"},{"text":" to deliver its output as soon as possible","type":"text"},{"text":" ","type":"text"},{"text":"with no thread hops. In order to allow for this we would need to inject a scheduler into our","type":"text"},{"type":"text","text":" "},{"text":"view model so that we can control it from the outside:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class EpisodeViewModel<S: Scheduler>: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let scheduler: S","","  init(apiClient: ApiClient, scheduler: S) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.scheduler)","      .assign(to: &self.$episode)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now we can initialize this view model in production by using ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.main"},{"text":" and we can","type":"text"},{"text":" ","type":"text"},{"text":"initialize it in tests using ","type":"text"},{"code":"DispatchQueue.immediate","type":"codeVoice"},{"type":"text","text":". Sounds like a win!"}]},{"inlineContent":[{"text":"However, introducing this generic to our view model is quite heavyweight as it is loudly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"announcing to the outside world that this type uses a scheduler, and worse it will end up"},{"type":"text","text":" "},{"text":"infecting any code that touches this view model that also wants to be testable. For example,","type":"text"},{"text":" ","type":"text"},{"text":"any view that uses this view model will need to introduce a generic if it wants to also be able","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to control the scheduler, which would be useful if we wanted to write snapshot tests."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Instead of introducing a generic to allow for substituting in different schedulers we can use"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AnyScheduler"},{"text":". It allows us to be somewhat generic in the scheduler, but without actually","type":"text"},{"text":" ","type":"text"},{"text":"introducing a generic.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Instead of holding a generic scheduler in our view model we can say that we only want a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"scheduler whose associated types match that of "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":":"}]},{"syntax":"swift","code":["class EpisodeViewModel: ObservableObject {","  @Published var episode: Episode?","","  let apiClient: ApiClient","  let scheduler: AnySchedulerOf<DispatchQueue>","","  init(apiClient: ApiClient, scheduler: AnySchedulerOf<DispatchQueue>) {","    self.apiClient = apiClient","    self.scheduler = scheduler","  }","","  func reloadButtonTapped() {","    self.apiClient.fetchEpisode()","      .receive(on: self.scheduler)","      .assign(to: &self.$episode)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in production we can create a view model that uses a live "},{"code":"DispatchQueue","type":"codeVoice"},{"type":"text","text":", but we just"},{"type":"text","text":" "},{"text":"have to first erase its type:","type":"text"}]},{"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: DispatchQueue.main.eraseToAnyScheduler()",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"For common schedulers, like "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":", "},{"type":"codeVoice","code":"OperationQueue"},{"type":"text","text":", and "},{"code":"RunLoop","type":"codeVoice"},{"type":"text","text":", there is even a"},{"text":" ","type":"text"},{"type":"text","text":"static helper on "},{"type":"codeVoice","code":"AnyScheduler"},{"text":" that further simplifies this:","type":"text"}],"type":"paragraph"},{"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: .main",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in tests we can use an immediate scheduler:"}]},{"code":["let viewModel = EpisodeViewModel(","  apiClient: ...,","  scheduler: .immediate",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, in general, "},{"type":"codeVoice","code":"AnyScheduler"},{"text":" is great for allowing one to control what scheduler is used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in classes, functions, etc. without needing to introduce a generic, which can help simplify"},{"type":"text","text":" "},{"text":"the code and reduce implementation details from leaking out.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/anyscheduler"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"code":"Scheduler","type":"codeVoice"},{"text":" protocol, which can be useful for being generic over","type":"text"},{"type":"text","text":" "},{"type":"text","text":"many types of schedulers without needing to actually introduce a generic to your code."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing-72aqv":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"OperationQueue","preciseIdentifier":"c:objc(cs)NSOperationQueue"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","preciseIdentifier":"s:So16NSOperationQueueC10FoundationE17SchedulerTimeTypeV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSOperationQueue","text":"OperationQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So16NSOperationQueueC10FoundationE16SchedulerOptionsV","text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":">"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}]},"role":"symbol","deprecated":true,"abstract":[],"title":"failing","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing-72aqv","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-72aqv"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/minimumTolerance":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"minimumTolerance","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"}],"role":"symbol","abstract":[],"title":"minimumTolerance","url":"\/documentation\/composablearchitecture\/anyscheduler\/minimumtolerance","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/minimumTolerance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/init(_:)":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"Creates a type-erasing scheduler to wrap the provided scheduler.","type":"text"}],"title":"init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/main-2ccke":{"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"main","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSRunLoop","text":"RunLoop"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:So9NSRunLoopC10FoundationE17SchedulerTimeTypeV","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"text":"RunLoop","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSRunLoop"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So9NSRunLoopC10FoundationE16SchedulerOptionsV","text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"type":"text","text":" is "},{"code":"RunLoop.SchedulerOptions","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","abstract":[{"text":"A type-erased main run loop.","type":"text"}],"title":"main","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/main-2ccke","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-2ccke"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler":{"url":"\/documentation\/composablearchitecture\/anyscheduler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyScheduler","kind":"identifier"}],"title":"AnyScheduler","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler","abstract":[{"text":"A type-erasing wrapper for the ","type":"text"},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" protocol, which can be useful for being generic over"},{"type":"text","text":" "},{"text":"many types of schedulers without needing to actually introduce a generic to your code.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/shared":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"kind":"text","text":"<"},{"preciseIdentifier":"c:objc(cs)OS_dispatch_queue","text":"DispatchQueue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE17SchedulerTimeTypeV"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5NeverO","text":"Never","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]},"role":"symbol","abstract":[{"text":"The type-erased UI scheduler shared instance.","type":"text"}],"title":"shared","url":"\/documentation\/composablearchitecture\/anyscheduler\/shared","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/shared"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing-1wd8w":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"failing","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","text":"DispatchQueue"},{"text":".","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE17SchedulerTimeTypeV"},{"text":", ","kind":"text"},{"preciseIdentifier":"c:objc(cs)OS_dispatch_queue","text":"DispatchQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerOptions","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE16SchedulerOptionsV","kind":"typeIdentifier"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"text":" and ","type":"text"},{"code":"SchedulerOptions","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","deprecated":true,"abstract":[],"title":"failing","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing-1wd8w","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-1wd8w"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/schedule(after:interval:tolerance:options:_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"text":"(","kind":"text"},{"text":"after","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":"?, () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}],"role":"symbol","abstract":[],"title":"schedule(after:interval:tolerance:options:_:)","url":"\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:interval:tolerance:options:_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:interval:tolerance:options:_:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing(_:)-64ryl":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"failing","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}]},"role":"symbol","deprecated":true,"abstract":[],"title":"failing(_:)","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing(_:)-64ryl","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-64ryl"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/immediate-52iwi":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-52iwi","type":"topic","url":"\/documentation\/composablearchitecture\/anyscheduler\/immediate-52iwi","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"immediate","abstract":[{"type":"text","text":"An immediate scheduler that can substitute itself for a run loop."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"immediate"},{"kind":"text","text":": "},{"text":"AnyScheduler","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"RunLoop","preciseIdentifier":"c:objc(cs)NSRunLoop"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So9NSRunLoopC10FoundationE17SchedulerTimeTypeV","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"text":"RunLoop","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSRunLoop"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:So9NSRunLoopC10FoundationE16SchedulerOptionsV","text":"SchedulerOptions"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing-6rks3":{"deprecated":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing-6rks3","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing-6rks3","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"failing","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"failing","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"kind":"text","text":"<"},{"preciseIdentifier":"c:objc(cs)NSRunLoop","text":"RunLoop","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So9NSRunLoopC10FoundationE17SchedulerTimeTypeV","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSRunLoop","text":"RunLoop","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So9NSRunLoopC10FoundationE16SchedulerOptionsV","kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented-2eza8":{"type":"topic","title":"unimplemented","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-2eza8","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unimplemented"},{"text":": ","kind":"text"},{"text":"AnyScheduler","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSOperationQueue","text":"OperationQueue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So16NSOperationQueueC10FoundationE17SchedulerTimeTypeV","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSOperationQueue","text":"OperationQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SchedulerOptions","preciseIdentifier":"s:So16NSOperationQueueC10FoundationE16SchedulerOptionsV","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for an operation queue."}],"url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented-2eza8","conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"text":" is ","type":"text"},{"code":"OperationQueue.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol"},"doc://ComposableArchitecture/7Combine9SchedulerP":{"identifier":"doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","title":"Combine.Scheduler","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented(_:)-37rcm":{"url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-37rcm","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"text":".","type":"text"}]},"type":"topic","title":"unimplemented(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-37rcm","kind":"symbol","abstract":[{"text":"An unimplemented scheduler that can substitute itself for a run loop.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/immediate-7t04g":{"type":"topic","title":"immediate","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-7t04g","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"immediate"},{"kind":"text","text":": "},{"text":"AnyScheduler","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"text":"<","kind":"text"},{"preciseIdentifier":"c:objc(cs)NSOperationQueue","text":"OperationQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:So16NSOperationQueueC10FoundationE17SchedulerTimeTypeV","kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OperationQueue","preciseIdentifier":"c:objc(cs)NSOperationQueue"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:So16NSOperationQueueC10FoundationE16SchedulerOptionsV"},{"text":">","kind":"text"}],"abstract":[{"text":"An immediate scheduler that can substitute itself for an operation queue.","type":"text"}],"url":"\/documentation\/composablearchitecture\/anyscheduler\/immediate-7t04g","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"code":"OperationQueue.SchedulerTimeType","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerOptions"},{"type":"text","text":"."}]},"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/now":{"role":"symbol","title":"now","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/now","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"now","kind":"identifier"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"}],"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/now"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/main-4xd6t":{"role":"symbol","title":"main","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"OperationQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"code":"OperationQueue.SchedulerOptions","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/main-4xd6t","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"main"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"text":"<","kind":"text"},{"text":"OperationQueue","preciseIdentifier":"c:objc(cs)NSOperationQueue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:So16NSOperationQueueC10FoundationE17SchedulerTimeTypeV","kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"OperationQueue","preciseIdentifier":"c:objc(cs)NSOperationQueue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So16NSOperationQueueC10FoundationE16SchedulerOptionsV","text":"SchedulerOptions"},{"kind":"text","text":">"}],"abstract":[{"text":"A type-erased main operation queue.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-4xd6t"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented-4kkaa":{"role":"symbol","title":"unimplemented","conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented-4kkaa","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"text":"<","kind":"text"},{"text":"RunLoop","preciseIdentifier":"c:objc(cs)NSRunLoop","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:So9NSRunLoopC10FoundationE17SchedulerTimeTypeV"},{"kind":"text","text":", "},{"preciseIdentifier":"c:objc(cs)NSRunLoop","text":"RunLoop","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:So9NSRunLoopC10FoundationE16SchedulerOptionsV","text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"An unimplemented scheduler that can substitute itself for a run loop.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-4kkaa"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/main-9vmjt":{"role":"symbol","title":"main","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}]},"kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/main-9vmjt","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"main"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"text":"<","kind":"text"},{"text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE17SchedulerTimeTypeV","kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE16SchedulerOptionsV","text":"SchedulerOptions"},{"kind":"text","text":">"}],"abstract":[{"text":"A type-erased main dispatch queue.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/main-9vmjt"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/immediate-6fs4i":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerTimeType"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerOptions","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/immediate-6fs4i","abstract":[{"text":"An immediate scheduler that can substitute itself for a dispatch queue.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"immediate","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"text":"<","kind":"text"},{"text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE17SchedulerTimeTypeV"},{"kind":"text","text":", "},{"preciseIdentifier":"c:objc(cs)OS_dispatch_queue","text":"DispatchQueue","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE16SchedulerOptionsV","text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/immediate-6fs4i","title":"immediate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/init(minimumTolerance:now:scheduleImmediately:delayed:interval:)","abstract":[{"text":"Creates a type-erasing scheduler to wrap the provided endpoints.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"minimumTolerance","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"now"},{"kind":"text","text":": () -> "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scheduleImmediately"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"delayed"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?, () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"interval","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/init(minimumtolerance:now:scheduleimmediately:delayed:interval:)","title":"init(minimumTolerance:now:scheduleImmediately:delayed:interval:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/global(qos:)":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/global(qos:)","abstract":[{"type":"text","text":"A type-erased global dispatch queue with the specified quality-of-service class"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"global"},{"text":"(","kind":"text"},{"text":"qos","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8Dispatch0A3QoSV","kind":"typeIdentifier","text":"DispatchQoS"},{"text":".","kind":"text"},{"preciseIdentifier":"s:8Dispatch0A3QoSV0B6SClassO","kind":"typeIdentifier","text":"QoSClass"},{"kind":"text","text":") -> "},{"text":"AnyScheduler","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/global(qos:)","title":"global(qos:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/schedule(options:_:)":{"role":"symbol","title":"schedule(options:_:)","abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(options:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/anyscheduler\/schedule(options:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing(_:)-2402o":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerTimeType"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"type":"codeVoice","code":"RunLoop.SchedulerOptions"},{"type":"text","text":"."}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-2402o","abstract":[],"deprecated":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"failing"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"text":"AnyScheduler","kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing(_:)-2402o","title":"failing(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/Scheduler-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/Scheduler-Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/anyscheduler\/scheduler-implementations","title":"Scheduler Implementations","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented-yw77":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerTimeType","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SchedulerOptions"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerOptions","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented-yw77","abstract":[{"text":"An unimplemented scheduler that can substitute itself for a dispatch queue.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","text":"DispatchQueue"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE17SchedulerTimeTypeV","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"text":"DispatchQueue","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions","preciseIdentifier":"s:So17OS_dispatch_queueC8DispatchE16SchedulerOptionsV"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented-yw77","title":"unimplemented"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented(_:)-7dg30":{"conformance":{"constraints":[{"type":"codeVoice","code":"SchedulerTimeType"},{"type":"text","text":" is "},{"code":"OperationQueue.SchedulerTimeType","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SchedulerOptions","type":"codeVoice"},{"type":"text","text":" is "},{"code":"OperationQueue.SchedulerOptions","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-7dg30","abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for an operation queue."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unimplemented"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","text":"AnyScheduler"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-7dg30","title":"unimplemented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/failing(_:)-20w14":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"code":"OperationQueue.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"OperationQueue.SchedulerOptions","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/failing(_:)-20w14","abstract":[],"deprecated":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"text":"AnyScheduler","preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/failing(_:)-20w14","title":"failing(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/unimplemented(_:)-27peg":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" is "},{"code":"DispatchQueue.SchedulerTimeType","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SchedulerOptions","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"DispatchQueue.SchedulerOptions"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/unimplemented(_:)-27peg","abstract":[{"type":"text","text":"An unimplemented scheduler that can substitute itself for a dispatch queue."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unimplemented","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:17CombineSchedulers12AnySchedulerV","kind":"typeIdentifier","text":"AnyScheduler"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/unimplemented(_:)-27peg","title":"unimplemented(_:)"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyScheduler/schedule(after:tolerance:options:_:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyScheduler\/schedule(after:tolerance:options:_:)","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"kind":"text","text":"("},{"text":"after","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/anyscheduler\/schedule(after:tolerance:options:_:)","title":"schedule(after:tolerance:options:_:)"}}}