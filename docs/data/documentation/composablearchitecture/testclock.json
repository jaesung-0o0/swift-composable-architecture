{"topicSections":[{"title":"Structures","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/Instant"]},{"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/init()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/init(now:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/minimumResolution","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/now"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/advance(by:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/advance(to:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/checkSuspension()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/run(timeout:file:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/sleep(until:tolerance:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/Clock-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/Clock-Implementations"],"generated":true,"title":"Default Implementations"}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A clock whose time can be controlled in a deterministic manner."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Duration"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s16DurationProtocolP","kind":"typeIdentifier","text":"DurationProtocol"},{"text":", ","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:SH","kind":"typeIdentifier","text":"Hashable"}]}]},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This clock is useful for testing how the flow of time affects asynchronous and concurrent code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This includes any code that makes use of "},{"type":"codeVoice","code":"sleep"},{"type":"text","text":" or any time-based async operators, such as"},{"type":"text","text":" "},{"type":"text","text":"timers, "},{"type":"codeVoice","code":"debounce"},{"text":", ","type":"text"},{"type":"codeVoice","code":"throttle"},{"text":", ","type":"text"},{"type":"codeVoice","code":"timeout"},{"text":", and more.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you have a model that encapsulates the behavior of a timer that can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"started and stopped:"}]},{"type":"codeListing","code":["@MainActor","class FeatureModel: ObservableObject {","  @Published var count = 0","  let clock: any Clock<Duration>","  var timerTask: Task<Void, Error>?","","  init(clock: any Clock<Duration>) {","    self.clock = clock","  }","  func startTimerButtonTapped() {","    self.timerTask = Task {","      while true {","        try await self.clock.sleep(for: .seconds(5))","        self.count += 1","      }","    }","  }","  func stopTimerButtonTapped() {","    self.timerTask?.cancel()","    self.timerTask = nil","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we have explicitly forced a clock to be provided in order to construct the "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This makes it possible to use a real life clock, such as ","type":"text"},{"type":"codeVoice","code":"ContinuousClock"},{"type":"text","text":", when running on a"},{"type":"text","text":" "},{"text":"device or simulator, and use a more controllable clock in tests, such as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"To write a test for this feature we can construct a "},{"type":"codeVoice","code":"FeatureModel"},{"text":" with a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock","isActive":true,"type":"reference"},{"text":", then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"advance the clock forward and assert on how the model changes:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testTimer() async {","  let clock = TestClock()","  let model = FeatureModel(clock: clock)","","  XCTAssertEqual(model.count, 0)","  model.startTimerButtonTapped()","","  await clock.advance(by: .seconds(1))","  XCTAssertEqual(model.count, 1)","","  await clock.advance(by: .seconds(4))","  XCTAssertEqual(model.count, 5)","","  model.stopTimerButtonTapped()","  await clock.run()","}"]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"TestClock"}],"roleHeading":"Class","externalID":"s:6Clocks9TestClockC","role":"symbol","platforms":[{"beta":false,"introducedAt":"16.0","unavailable":false,"name":"iOS","deprecated":false},{"introducedAt":"13.0","deprecated":false,"name":"macOS","unavailable":false,"beta":false},{"beta":false,"deprecated":false,"introducedAt":"16.0","name":"tvOS","unavailable":false},{"unavailable":false,"name":"watchOS","deprecated":false,"introducedAt":"9.0","beta":false}],"modules":[{"name":"ComposableArchitecture"}],"title":"TestClock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClock"}],"symbolKind":"class"},"variants":[{"paths":["\/documentation\/composablearchitecture\/testclock"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/12_Concurrency5ClockP"],"type":"conformsTo"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/checkSuspension()":{"role":"symbol","url":"\/documentation\/composablearchitecture\/testclock\/checksuspension()","title":"checkSuspension()","type":"topic","abstract":[{"text":"Throws an error if there are active sleeps on the clock.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"checkSuspension","kind":"identifier"},{"kind":"text","text":"() "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/checkSuspension()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/now":{"type":"topic","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"now","kind":"identifier"},{"kind":"text","text":": "},{"text":"TestClock","kind":"typeIdentifier","preciseIdentifier":"s:6Clocks9TestClockC"},{"text":"<","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:6Clocks9TestClockC7InstantV","kind":"typeIdentifier","text":"Instant"}],"title":"now","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/now","abstract":[],"url":"\/documentation\/composablearchitecture\/testclock\/now"},"doc://ComposableArchitecture/12_Concurrency5ClockP":{"identifier":"doc:\/\/ComposableArchitecture\/12_Concurrency5ClockP","title":"_Concurrency.Clock","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/minimumResolution":{"url":"\/documentation\/composablearchitecture\/testclock\/minimumresolution","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/minimumResolution","abstract":[],"title":"minimumResolution","kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"minimumResolution","kind":"identifier"},{"kind":"text","text":": "},{"text":"Duration","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/advance(by:)":{"title":"advance(by:)","url":"\/documentation\/composablearchitecture\/testclock\/advance(by:)","abstract":[{"type":"text","text":"Advances the test clock’s internal time by the duration."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/advance(by:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"advance"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/run(timeout:file:line:)":{"abstract":[{"type":"text","text":"Runs the clock until it has no scheduled sleeps left."}],"url":"\/documentation\/composablearchitecture\/testclock\/run(timeout:file:line:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/run(timeout:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"title":"run(timeout:file:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/Instant":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/Instant","url":"\/documentation\/composablearchitecture\/testclock\/instant","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Instant","kind":"identifier"}],"role":"symbol","title":"TestClock.Instant","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"Instant","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/advance(to:)":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"advance"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:6Clocks9TestClockC","text":"TestClock","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Duration","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks9TestClockC7InstantV"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"title":"advance(to:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/advance(to:)","abstract":[{"text":"Advances the test clock’s internal time to the deadline.","type":"text"}],"url":"\/documentation\/composablearchitecture\/testclock\/advance(to:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/Clock-Implementations":{"type":"topic","role":"collectionGroup","title":"Clock Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/Clock-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/testclock\/clock-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/init(now:)":{"type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"now"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:6Clocks9TestClockC","kind":"typeIdentifier","text":"TestClock"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration"},{"kind":"text","text":">."},{"text":"Instant","kind":"typeIdentifier","preciseIdentifier":"s:6Clocks9TestClockC7InstantV"},{"kind":"text","text":")"}],"title":"init(now:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/init(now:)","abstract":[],"url":"\/documentation\/composablearchitecture\/testclock\/init(now:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock","url":"\/documentation\/composablearchitecture\/testclock","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClock","kind":"identifier"}],"role":"symbol","title":"TestClock","kind":"symbol","abstract":[{"text":"A clock whose time can be controlled in a deterministic manner.","type":"text"}],"navigatorTitle":[{"text":"TestClock","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/init()":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"title":"init()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/init()","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Duration"},{"type":"text","text":" is "},{"code":"Duration","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[],"url":"\/documentation\/composablearchitecture\/testclock\/init()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestClock/sleep(until:tolerance:)":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sleep"},{"kind":"text","text":"("},{"text":"until","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TestClock","kind":"typeIdentifier","preciseIdentifier":"s:6Clocks9TestClockC"},{"text":"<","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"Instant","preciseIdentifier":"s:6Clocks9TestClockC7InstantV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"title":"sleep(until:tolerance:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestClock\/sleep(until:tolerance:)","abstract":[],"url":"\/documentation\/composablearchitecture\/testclock\/sleep(until:tolerance:)"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"}}}