{"metadata":{"externalID":"s:22ComposableArchitecture5ScopeV5state6action5child6fileID4lineACyxq_q0_G9CasePaths0J4PathVyxqd__G_ALyq_qd_0_Gq0_yXEs12StaticStringVSutc5StateQy0_Rsd__6ActionQy0_Rsd_0_r0_lufc","roleHeading":"Initializer","role":"symbol","symbolKind":"init","title":"init(state:action:child:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"text":"ParentState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">, ","kind":"text"},{"text":"child","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Child"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"modules":[{"name":"ComposableArchitecture"}]},"abstract":[{"text":"Initializes a reducer that runs the given child reducer against a slice of parent state and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actions."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"toChildState","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ParentState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":" "},{"text":"toChildAction","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","text":"CasePath"},{"text":"<","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"@","kind":"attribute"},{"kind":"attribute","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","text":"ReducerBuilder","preciseIdentifier":"s:22ComposableArchitecture14ReducerBuilderO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"},{"text":" ","kind":"text"},{"kind":"externalParam","text":"child"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Child"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":" = ","kind":"text"},{"kind":"keyword","text":"#fileID"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":" = ","kind":"text"},{"kind":"keyword","text":"#line"},{"kind":"text","text":") "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ChildState"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"Child"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":" == "},{"text":"Child","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action"}],"languages":["swift"]}]},{"parameters":[{"name":"toChildState","content":[{"type":"paragraph","inlineContent":[{"text":"A case path from parent state to a case containing child state.","type":"text"}]}]},{"name":"toChildAction","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A case path from parent action to a case containing child actions."}]}]},{"name":"child","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that will be invoked with child actions against child state."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for combining reducers of mutually-exclusive enum state."}]},{"syntax":"swift","code":["var body: some Reducer<State, Action> {","  Scope(state: \/State.loggedIn, action: \/Action.loggedIn) {","    LoggedIn()","  }","  Scope(state: \/State.loggedOut, action: \/Action.loggedOut) {","    LoggedOut()","  }","}"],"type":"codeListing"},{"name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"Be careful when assembling reducers that are scoped to cases of enum state. If a","type":"text"},{"text":" ","type":"text"},{"text":"scoped reducer receives a child action when its state is set to an unrelated case, it will","type":"text"},{"type":"text","text":" "},{"text":"not be able to process the action, which is considered an application logic error and will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"emit runtime warnings."}]},{"inlineContent":[{"type":"text","text":"This can happen if another reducer in the parent domain changes the child state to an"},{"text":" ","type":"text"},{"type":"text","text":"unrelated case when it handles the action "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" the scoped reducer runs. For example, a"},{"text":" ","type":"text"},{"type":"text","text":"parent may receive a dismissal action from the child domain:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in","  switch action {","  case .loggedIn(.quitButtonTapped):","    state = .loggedOut(LoggedOut.State())","  \/\/ ...","  }","}","Scope(state: \/State.loggedIn, action: \/Action.loggedIn) {","  LoggedIn()  \/\/ ⚠️ Logged-in domain can't handle `quitButtonTapped`","}"]},{"inlineContent":[{"type":"text","text":"If the parent domain contains additional logic for switching between cases of child state,"},{"type":"text","text":" "},{"type":"text","text":"prefer "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:line:)"},{"text":", which better ensures that child","type":"text"},{"type":"text","text":" "},{"text":"logic runs ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" any parent logic can replace child state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in","  switch action {","  case .loggedIn(.quitButtonTapped):","    state = .loggedOut(LoggedOut.State())","  \/\/ ...","  }","}",".ifCaseLet(\/State.loggedIn, action: \/Action.loggedIn) {","  LoggedIn()  \/\/ ✅ Receives actions before its case can change","}"]}],"type":"aside","style":"warning"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:child:fileID:line:)"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/scope\/init(state:action:child:fileid:line:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","kind":"symbol","abstract":[{"type":"text","text":"현재 앱의 상태를 주어진 액션을 가지고 어떻게 다음 상태로 변경할 지를 묘사하는 프로토콜. 또한 나중에 Store에 의해 실행되어야 할 "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"가 무엇인지 묘사하고 있습니다.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/init(state:action:child:fileID:line:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath"},{"kind":"text","text":"<"},{"text":"ParentState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ParentAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">, ","kind":"text"},{"text":"child","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Child"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"type":"topic","title":"init(state:action:child:fileID:line:)","abstract":[{"type":"text","text":"Initializes a reducer that runs the given child reducer against a slice of parent state and"},{"type":"text","text":" "},{"type":"text","text":"actions."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/scope\/init(state:action:child:fileid:line:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/init(state:action:child:fileID:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifCaseLet(_:action:then:fileID:line:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:line:)","title":"ifCaseLet(_:action:then:fileID:line:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/ifcaselet(_:action:then:fileid:line:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifCaseLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"CaseState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"CaseAction"},{"text":", ","kind":"text"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CaseState"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"CaseAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"then","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Case","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"_IfCaseLetReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Case","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/scope","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"topic","title":"Scope","abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"navigatorTitle":[{"kind":"identifier","text":"Scope"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerBuilder"}],"title":"ReducerBuilder","role":"symbol","url":"\/documentation\/composablearchitecture\/reducerbuilder","kind":"symbol","abstract":[{"text":"리듀서들을 순차적으로 실행시켜 하나의 리듀서로 결합시키고 이펙트들을 머지하기 위한 ","type":"text"},{"type":"codeVoice","code":"resultBuilder"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"ReducerBuilder","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","url":"\/documentation\/composablearchitecture","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","title":"ComposableArchitecture"}}}