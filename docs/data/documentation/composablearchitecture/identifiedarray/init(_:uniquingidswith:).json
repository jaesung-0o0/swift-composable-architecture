{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"]]},"abstract":[{"text":"Creates a new array from the elements in the given sequence, using a combining closure to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"determine the element for any elements with duplicate ids."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"elements"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"uniquingIDsWith"},{"kind":"text","text":" "},{"kind":"internalParam","text":"combine"},{"text":": (","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:ST","kind":"typeIdentifier","text":"Sequence"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"elements","content":[{"inlineContent":[{"type":"text","text":"A sequence of elements to use for the new array."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Closure used to combine duplicated elements.","type":"text"}]}],"name":"combine"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"A new array initialized with the unique elements of ","type":"text"},{"code":"elements","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use this initializer to create an array when you have an arbitrary sequence of elements"},{"text":" ","type":"text"},{"type":"text","text":"that may not have unique ids. This initializer calls the "},{"type":"codeVoice","code":"combine"},{"text":" closure with the current","type":"text"},{"type":"text","text":" "},{"text":"and new elements for any duplicate ids. Pass a closure as ","type":"text"},{"code":"combine","type":"codeVoice"},{"text":" that returns the element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use in the resulting array: The closure can choose between the two elements, combine them"},{"text":" ","type":"text"},{"type":"text","text":"to produce a new element, or even throw an error."}]},{"name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expected O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":") on average, where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the count of elements, if "},{"code":"ID","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"implements high-quality hashing."}]}],"type":"aside"}],"kind":"content"}],"metadata":{"platforms":[{"beta":false,"introducedAt":"13.0","deprecated":false,"name":"iOS","unavailable":false},{"deprecated":false,"unavailable":false,"introducedAt":"10.15","name":"macOS","beta":false},{"deprecated":false,"name":"tvOS","unavailable":false,"beta":false,"introducedAt":"13.0"},{"name":"watchOS","introducedAt":"6.0","unavailable":false,"deprecated":false,"beta":false}],"symbolKind":"init","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Element.ID"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}]},"modules":[{"relatedModules":["IdentifiedCollections"],"name":"ComposableArchitecture"}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"uniquingIDsWith"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"title":"init(_:uniquingIDsWith:)","roleHeading":"Initializer","externalID":"s:21IdentifiedCollections0A5ArrayVAA2IDQy_Rszs12IdentifiableR_rlE_15uniquingIDsWithACyxq_Gqd___q_q__q_tKXEtKc7ElementQyd__Rs_STRd__lufc","extendedModule":"IdentifiedCollections","role":"symbol"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:uniquingIDsWith:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/identifiedarray\/init(_:uniquingidswith:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:uniquingIDsWith:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"uniquingIDsWith","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:uniquingIDsWith:)","title":"init(_:uniquingIDsWith:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:uniquingidswith:)","role":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Element.ID"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","abstract":[{"text":"Creates a new array from the elements in the given sequence, using a combining closure to","type":"text"},{"text":" ","type":"text"},{"text":"determine the element for any elements with duplicate ids.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","abstract":[{"type":"text","text":"An ordered collection of identifiable elements."}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"url":"\/documentation\/composablearchitecture\/identifiedarray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArray"}],"kind":"symbol","role":"symbol","title":"IdentifiedArray"}}}