{"abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the comparison between elements."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort(by:)-36swl"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sort"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":" "},{"text":"areInIncreasingOrder","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A predicate that returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if its first argument should","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be ordered before its second argument; otherwise, "},{"code":"false","type":"codeVoice"},{"text":". If ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" throws","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an error during the sort, the elements may be in a different order, but none will be lost."}],"type":"paragraph"}],"name":"areInIncreasingOrder"}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you want to sort a collection of elements that donâ€™t conform to the "},{"code":"Comparable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"protocol, pass a closure to this method that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the first element should be"},{"type":"text","text":" "},{"type":"text","text":"ordered before the second."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, use this method to sort a collection of elements that do conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" when you want the sort to be descending instead of ascending. Pass the"},{"text":" ","type":"text"},{"type":"text","text":"greater-than operator ("},{"code":">","type":"codeVoice"},{"type":"text","text":") operator as the predicate."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" must be a ","type":"text"},{"inlineContent":[{"text":"strict weak ordering","type":"text"}],"type":"emphasis"},{"type":"text","text":" over the elements. That is, for any"},{"text":" ","type":"text"},{"text":"elements ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"text":", and ","type":"text"},{"code":"c","type":"codeVoice"},{"type":"text","text":", the following conditions must hold:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"type":"text","text":". (Irreflexivity)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"type":"text","text":" are both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then"},{"text":" ","type":"text"},{"code":"areInIncreasingOrder(a, c)","type":"codeVoice"},{"type":"text","text":" is also "},{"code":"true","type":"codeVoice"},{"text":". (Transitive comparability)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Two elements are ","type":"text"},{"inlineContent":[{"type":"text","text":"incomparable"}],"type":"emphasis"},{"type":"text","text":" if neither is ordered before the other according to the"},{"type":"text","text":" "},{"text":"predicate. If ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"text":" and ","type":"text"},{"code":"c","type":"codeVoice"},{"type":"text","text":" are incomparable, then "},{"code":"a","type":"codeVoice"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"c","type":"codeVoice"},{"type":"text","text":" are also incomparable. (Transitive incomparability)"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The sorting algorithm is not guaranteed to be stable. A stable sort preserves the relative","type":"text"},{"text":" ","type":"text"},{"text":"order of elements for which ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" does not establish an order."}]},{"name":"Complexity","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the collection."}]}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/identifiedarray\/sort(by:)-36swl"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:21IdentifiedCollections0A5ArrayV4sort2byySbq__q_tKXE_tKF","title":"sort(by:)","extendedModule":"IdentifiedCollections","modules":[{"name":"ComposableArchitecture","relatedModules":["IdentifiedCollections"]}],"conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"roleHeading":"Instance Method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"symbolKind":"method"},"sections":[],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/sort(by:)-36swl":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/sort(by:)-36swl","title":"sort(by:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/sort(by:)-36swl","role":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","abstract":[{"text":"Sorts the collection in place, using the given predicate as the comparison between elements.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","abstract":[{"type":"text","text":"An ordered collection of identifiable elements."}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"url":"\/documentation\/composablearchitecture\/identifiedarray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArray"}],"kind":"symbol","role":"symbol","title":"IdentifiedArray"}}}