{"metadata":{"externalID":"s:21IdentifiedCollections0A5ArrayV_2id15uniquingIDsWithACyxq_Gqd___s7KeyPathCyq_xGq_q__q_tKXEtKc7ElementQyd__Rs_STRd__lufc","title":"init(_:id:uniquingIDsWith:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","conformance":{"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"uniquingIDsWith"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"extendedModule":"IdentifiedCollections","modules":[{"name":"ComposableArchitecture","relatedModules":["IdentifiedCollections"]}]},"variants":[{"paths":["\/documentation\/composablearchitecture\/identifiedarray\/init(_:id:uniquingidswith:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:uniquingIDsWith:)"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray"]]},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence, using a combining closure to"},{"type":"text","text":" "},{"text":"determine the element for any elements with duplicate identity.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"elements"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":">, ","kind":"text"},{"text":"uniquingIDsWith","kind":"externalParam"},{"kind":"text","text":" "},{"text":"combine","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:ST","text":"Sequence","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"elements","content":[{"type":"paragraph","inlineContent":[{"text":"A sequence of elements to use for the new array.","type":"text"}]}]},{"name":"id","content":[{"type":"paragraph","inlineContent":[{"text":"The key path to an elementâ€™s identifier.","type":"text"}]}]},{"name":"combine","content":[{"inlineContent":[{"type":"text","text":"Closure used to combine elements with duplicate ids."}],"type":"paragraph"}]}]},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new array initialized with the unique elements of "},{"type":"codeVoice","code":"elements"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use this initializer to create an array when you have an arbitrary sequence of elements"},{"type":"text","text":" "},{"text":"that may not have unique ids. This initializer calls the ","type":"text"},{"type":"codeVoice","code":"combine"},{"type":"text","text":" closure with the current"},{"type":"text","text":" "},{"text":"and new elements for any duplicate ids. Pass a closure as ","type":"text"},{"code":"combine","type":"codeVoice"},{"type":"text","text":" that returns the element"},{"text":" ","type":"text"},{"text":"to use in the resulting array: The closure can choose between the two elements, combine them","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to produce a new element, or even throw an error."}]},{"name":"Complexity","type":"aside","style":"note","content":[{"inlineContent":[{"text":"Expected O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":") on average, where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the count of elements, if ","type":"text"},{"code":"ID","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"implements high-quality hashing."}],"type":"paragraph"}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray","abstract":[{"type":"text","text":"An ordered collection of identifiable elements."}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedArray"}],"url":"\/documentation\/composablearchitecture\/identifiedarray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedArray"}],"kind":"symbol","role":"symbol","title":"IdentifiedArray"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedArray/init(_:id:uniquingIDsWith:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedArray\/init(_:id:uniquingIDsWith:)","url":"\/documentation\/composablearchitecture\/identifiedarray\/init(_:id:uniquingidswith:)","title":"init(_:id:uniquingIDsWith:)","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ID"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Creates a new array from the elements in the given sequence, using a combining closure to"},{"text":" ","type":"text"},{"type":"text","text":"determine the element for any elements with duplicate identity."}],"kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"text":">, ","kind":"text"},{"text":"uniquingIDsWith","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]}}}