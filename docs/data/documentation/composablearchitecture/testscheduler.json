{"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"A scheduler whose current time and execution can be controlled in a deterministic manner.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/init(now:)"],"title":"Initializers"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/minimumTolerance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/now"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(by:)-3sq11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(by:)-4jg15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(to:)-4vrqd","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(to:)-6v0ti","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-1sq94","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-77ue7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(after:interval:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(after:tolerance:options:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(options:_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"],"generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestScheduler"},{"text":"<","kind":"text"},{"text":"SchedulerTimeType","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SchedulerOptions"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sx","kind":"typeIdentifier","text":"Strideable"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SchedulerTimeIntervalConvertible","preciseIdentifier":"s:7Combine32SchedulerTimeIntervalConvertibleP"}]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"This scheduler is useful for testing how the flow of time effects publishers that use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous operators, such as "},{"code":"debounce","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"throttle"},{"text":", ","type":"text"},{"code":"delay","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"timeout"},{"type":"text","text":", "},{"code":"receive(on:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"subscribe(on:)"},{"type":"text","text":" and more."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, consider the following ","type":"text"},{"type":"codeVoice","code":"race"},{"text":" operator that runs two futures in parallel, but","type":"text"},{"type":"text","text":" "},{"text":"only emits the first one that completes:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func race<Output, Failure: Error>(","  _ first: Future<Output, Failure>,","  _ second: Future<Output, Failure>",") -> AnyPublisher<Output, Failure> {","  first","    .merge(with: second)","    .prefix(1)","    .eraseToAnyPublisher()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Although this publisher is quite simple we may still want to write some tests for it.","type":"text"}]},{"inlineContent":[{"text":"To do this we can create a test scheduler and create two futures, one that emits after a","type":"text"},{"type":"text","text":" "},{"text":"second and one that emits after two seconds:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let scheduler = DispatchQueue.test","let first = Future<Int, Never> { callback in","  scheduler.schedule(after: scheduler.now.advanced(by: 1)) { callback(.success(1)) }","}","let second = Future<Int, Never> { callback in","  scheduler.schedule(after: scheduler.now.advanced(by: 2)) { callback(.success(2)) }","}"]},{"inlineContent":[{"text":"And then we can race these futures and collect their emissions into an array:","type":"text"}],"type":"paragraph"},{"code":["var output: [Int] = []","let cancellable = race(first, second).sink { output.append($0) }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And then we can deterministically move time forward in the scheduler to see how the publisher","type":"text"},{"type":"text","text":" "},{"text":"emits. We can start by moving time forward by one second:","type":"text"}]},{"code":["scheduler.advance(by: 1)","XCTAssertEqual(output, [1])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This proves that we get the first emission from the publisher since one second of time has","type":"text"},{"type":"text","text":" "},{"text":"passed. If we further advance by one more second we can prove that we do not get anymore","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"emissions:"}],"type":"paragraph"},{"syntax":"swift","code":["scheduler.advance(by: 1)","XCTAssertEqual(output, [1])"],"type":"codeListing"},{"inlineContent":[{"text":"This is a very simple example of how to control the flow of time with the test scheduler,","type":"text"},{"text":" ","type":"text"},{"text":"but this technique can be used to test any publisher that involves Combineâ€™s asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"operations.","type":"text"}],"type":"paragraph"}]}],"metadata":{"roleHeading":"Class","modules":[{"name":"ComposableArchitecture"}],"title":"TestScheduler","symbolKind":"class","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestScheduler"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestScheduler"}],"externalID":"s:17CombineSchedulers13TestSchedulerC"},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/testscheduler"]}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/Scheduler-Implementations":{"title":"Scheduler Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/composablearchitecture\/testscheduler\/scheduler-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/Scheduler-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/init(now:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/init(now:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"now"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Creates a test scheduler with the given date."}],"title":"init(now:)","role":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler\/init(now:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler":{"title":"TestScheduler","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler","navigatorTitle":[{"text":"TestScheduler","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A scheduler whose current time and execution can be controlled in a deterministic manner."}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestScheduler","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/advance(by:)-3sq11":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"advance","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Advances the scheduler by the given stride."}],"url":"\/documentation\/composablearchitecture\/testscheduler\/advance(by:)-3sq11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(by:)-3sq11","kind":"symbol","role":"symbol","type":"topic","title":"advance(by:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/advance(by:)-4jg15":{"type":"topic","title":"advance(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"advance","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler\/advance(by:)-4jg15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(by:)-4jg15","abstract":[{"type":"text","text":"Advances the scheduler by the given stride."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/advance(to:)-6v0ti":{"type":"topic","kind":"symbol","abstract":[{"text":"Advances the scheduler to the given instant.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"advance"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":")"}],"title":"advance(to:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(to:)-6v0ti","url":"\/documentation\/composablearchitecture\/testscheduler\/advance(to:)-6v0ti"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/advance(to:)-4vrqd":{"title":"advance(to:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/advance(to:)-4vrqd","type":"topic","url":"\/documentation\/composablearchitecture\/testscheduler\/advance(to:)-4vrqd","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"advance"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"abstract":[{"type":"text","text":"Advances the scheduler to the given instant."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/run()-77ue7":{"title":"run()","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Runs the scheduler until it has no scheduled items left."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-77ue7","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/testscheduler\/run()-77ue7","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/schedule(options:_:)":{"title":"schedule(options:_:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(options:_:)","abstract":[],"url":"\/documentation\/composablearchitecture\/testscheduler\/schedule(options:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"schedule"},{"text":"(","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"text":"SchedulerOptions","kind":"typeIdentifier"},{"kind":"text","text":"?, () -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/7Combine9SchedulerP":{"identifier":"doc:\/\/ComposableArchitecture\/7Combine9SchedulerP","title":"Combine.Scheduler","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/run()-1sq94":{"title":"run()","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/run()-1sq94","abstract":[],"url":"\/documentation\/composablearchitecture\/testscheduler\/run()-1sq94","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"async"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/schedule(after:tolerance:options:_:)":{"abstract":[],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/testscheduler\/schedule(after:tolerance:options:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"schedule","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"after"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tolerance","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?, () -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(after:tolerance:options:_:)","title":"schedule(after:tolerance:options:_:)"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/minimumTolerance":{"title":"minimumTolerance","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/minimumTolerance","abstract":[],"url":"\/documentation\/composablearchitecture\/testscheduler\/minimumtolerance","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"minimumTolerance"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/schedule(after:interval:tolerance:options:_:)":{"title":"schedule(after:interval:tolerance:options:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/schedule(after:interval:tolerance:options:_:)","type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/testscheduler\/schedule(after:interval:tolerance:options:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"schedule","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"after"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"externalParam","text":"interval"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"text":".","kind":"text"},{"text":"Stride","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tolerance"},{"text":": ","kind":"text"},{"text":"SchedulerTimeType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"text":"?, () -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestScheduler/now":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestScheduler\/now","type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/testscheduler\/now","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"now","kind":"identifier"},{"kind":"text","text":": "},{"text":"SchedulerTimeType","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","title":"now"}}}