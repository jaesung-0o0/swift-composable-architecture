{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"root"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["iOS"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"A case with no an associated value.","type":"text"}],"type":"paragraph"}],"name":"root"}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A void case path.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"This operator is only intended to be used with enum cases that have no associated"},{"type":"text","text":" "},{"type":"text","text":"values. Its behavior is otherwise undefined."}],"type":"paragraph"}],"name":"Note"}],"kind":"content"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath\/init(_:)-777fr"},"sections":[],"abstract":[{"type":"text","text":"Returns a void case path for a case with no associated value."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/casepath\/init(_:)-777fr"]}],"metadata":{"symbolKind":"init","modules":[{"name":"ComposableArchitecture","relatedModules":["CasePaths"]}],"roleHeading":"Initializer","externalID":"s:9CasePaths0A4PathVAAytRs_rlEyACyxytGxcfc","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":")","kind":"text"}],"extendedModule":"CasePaths","title":"init(_:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"()"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CasePath/init(_:)-777fr":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" is "},{"code":"()","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"Returns a void case path for a case with no associated value.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/casepath\/init(_:)-777fr","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath\/init(_:)-777fr"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CasePath":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath","role":"symbol","type":"topic","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a rootâ€™s embedded","type":"text"},{"type":"text","text":" "},{"text":"value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/casepath","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CasePath","kind":"identifier"}],"title":"CasePath"}}}