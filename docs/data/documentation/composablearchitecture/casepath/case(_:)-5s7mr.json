{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A4PathV","kind":"typeIdentifier","text":"CasePath","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath"},{"text":"<","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An enum case with no associated values."}],"type":"paragraph"}],"name":"value"}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A case path that extracts "},{"type":"codeVoice","code":"()"},{"type":"text","text":" if the case matches, otherwise "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]}],"kind":"content"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"name":"Note","content":[{"inlineContent":[{"text":"This function is only intended to be used with enum cases that have no associated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values. Its behavior is otherwise undefined."}],"type":"paragraph"}],"style":"note","type":"aside"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/casepath\/case(_:)-5s7mr"]}],"kind":"symbol","abstract":[{"type":"text","text":"Returns a case path that successfully extracts "},{"type":"codeVoice","code":"()"},{"type":"text","text":" from a given enum case with no associated"},{"type":"text","text":" "},{"type":"text","text":"values."}],"metadata":{"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"()","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"`case`","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"CasePaths","title":"case(_:)","symbolKind":"method","platforms":[],"roleHeading":"Type Method","modules":[{"relatedModules":["CasePaths"],"name":"ComposableArchitecture"}],"externalID":"s:9CasePaths0A4PathVAAytRs_rlE4caseyACyxytGxFZ"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath\/case(_:)-5s7mr"},"schemaVersion":{"major":0,"minor":3,"patch":0},"deprecationSummary":[{"inlineContent":[{"text":"Use case path literal syntax (e.g., '\/Root.caseName')","type":"text"}],"type":"paragraph"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/CasePath":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath","role":"symbol","type":"topic","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a rootâ€™s embedded","type":"text"},{"type":"text","text":" "},{"text":"value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/casepath","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CasePath","kind":"identifier"}],"title":"CasePath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CasePath/case(_:)-5s7mr":{"role":"symbol","abstract":[{"type":"text","text":"Returns a case path that successfully extracts "},{"type":"codeVoice","code":"()"},{"type":"text","text":" from a given enum case with no associated"},{"text":" ","type":"text"},{"text":"values.","type":"text"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CasePath\/case(_:)-5s7mr","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"()"},{"text":".","type":"text"}]},"url":"\/documentation\/composablearchitecture\/casepath\/case(_:)-5s7mr","title":"case(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV"},{"text":"<","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">","kind":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}