{"variants":[{"paths":["\/documentation\/composablearchitecture\/extract(_:)-5ivuf"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"metadata":{"roleHeading":"Function","title":"extract(_:)","modules":[{"name":"ComposableArchitecture"}],"platforms":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"extract"},{"text":"<","kind":"text"},{"text":"Root","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"text":"?) -> (","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":"?) -> "},{"text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","externalID":"s:9CasePaths7extractyq_SgxSgcADq_cr0_lF","symbolKind":"func"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(_:)-5ivuf"},"abstract":[{"text":"Returns a function that can attempt to extract associated values from the given enum case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializer."}],"kind":"symbol","deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use case path literal syntax (e.g., '\/Root.caseName')","type":"text"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"extract","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Root","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"embed","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"text":"?) -> (","kind":"text"},{"kind":"typeIdentifier","text":"Root"},{"text":"?) -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"?"}]}]},{"kind":"parameters","parameters":[{"name":"embed","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An enum case initializer."}]}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A function that can attempt to extract associated values from an enum."}],"type":"paragraph"}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"Use this function to create new transform functions to pass to higher-order methods like"},{"type":"text","text":" "},{"code":"compactMap","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["[Result<Int, Error>.success(42), .failure(MyError()]","  .compactMap(extract(Result.success))","\/\/ [42]"],"syntax":"swift","type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"This function is only intended to be used with enum case initializers. Its behavior is"},{"type":"text","text":" "},{"text":"otherwise undefined.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/extract(_:)-5ivuf":{"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/extract(_:)-5ivuf","kind":"symbol","abstract":[{"type":"text","text":"Returns a function that can attempt to extract associated values from the given enum case"},{"type":"text","text":" "},{"type":"text","text":"initializer."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"extract","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Root","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Root","kind":"typeIdentifier"},{"kind":"text","text":"?) -> ("},{"text":"Root","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"extract(_:)","deprecated":true,"url":"\/documentation\/composablearchitecture\/extract(_:)-5ivuf"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","kind":"symbol","title":"ComposableArchitecture"}}}